/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/slick.min.js":
/*!*****************************!*\
  !*** ./src/js/slick.min.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\n/*\r\n     _ _      _       _\r\n ___| (_) ___| | __  (_)___\r\n/ __| | |/ __| |/ /  | / __|\r\n\\__ \\ | | (__|   < _ | \\__ \\\r\n|___/_|_|\\___|_|\\_(_)/ |___/\r\n                   |__/\r\n\r\n Version: 1.8.0\r\n  Author: Ken Wheeler\r\n Website: http://kenwheeler.github.io\r\n    Docs: http://kenwheeler.github.io/slick\r\n    Repo: http://github.com/kenwheeler/slick\r\n  Issues: http://github.com/kenwheeler/slick/issues\r\n\r\n */\r\n\r\n/* global window, document, define, jQuery, setInterval, clearInterval */\r\n;\r\n\r\n(function (factory) {\r\n  'use strict';\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['jquery'], factory);\r\n  } else if (typeof exports !== 'undefined') {\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    factory(jQuery);\r\n  }\r\n})(function ($) {\r\n  'use strict';\r\n\r\n  var Slick = window.Slick || {};\r\n\r\n  Slick = function () {\r\n    var instanceUid = 0;\r\n\r\n    function Slick(element, settings) {\r\n      var _ = this,\r\n          dataSettings;\r\n\r\n      _.defaults = {\r\n        accessibility: true,\r\n        adaptiveHeight: false,\r\n        appendArrows: $(element),\r\n        appendDots: $(element),\r\n        arrows: true,\r\n        asNavFor: null,\r\n        prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\r\n        nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\r\n        autoplay: false,\r\n        autoplaySpeed: 3000,\r\n        centerMode: false,\r\n        centerPadding: '50px',\r\n        cssEase: 'ease',\r\n        customPaging: function customPaging(slider, i) {\r\n          return $('<button type=\"button\" />').text(i + 1);\r\n        },\r\n        dots: false,\r\n        dotsClass: 'slick-dots',\r\n        draggable: true,\r\n        easing: 'linear',\r\n        edgeFriction: 0.35,\r\n        fade: false,\r\n        focusOnSelect: false,\r\n        focusOnChange: false,\r\n        infinite: true,\r\n        initialSlide: 0,\r\n        lazyLoad: 'ondemand',\r\n        mobileFirst: false,\r\n        pauseOnHover: true,\r\n        pauseOnFocus: true,\r\n        pauseOnDotsHover: false,\r\n        respondTo: 'window',\r\n        responsive: null,\r\n        rows: 1,\r\n        rtl: false,\r\n        slide: '',\r\n        slidesPerRow: 1,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        speed: 500,\r\n        swipe: true,\r\n        swipeToSlide: false,\r\n        touchMove: true,\r\n        touchThreshold: 5,\r\n        useCSS: true,\r\n        useTransform: true,\r\n        variableWidth: false,\r\n        vertical: false,\r\n        verticalSwiping: false,\r\n        waitForAnimate: true,\r\n        zIndex: 1000\r\n      };\r\n      _.initials = {\r\n        animating: false,\r\n        dragging: false,\r\n        autoPlayTimer: null,\r\n        currentDirection: 0,\r\n        currentLeft: null,\r\n        currentSlide: 0,\r\n        direction: 1,\r\n        $dots: null,\r\n        listWidth: null,\r\n        listHeight: null,\r\n        loadIndex: 0,\r\n        $nextArrow: null,\r\n        $prevArrow: null,\r\n        scrolling: false,\r\n        slideCount: null,\r\n        slideWidth: null,\r\n        $slideTrack: null,\r\n        $slides: null,\r\n        sliding: false,\r\n        slideOffset: 0,\r\n        swipeLeft: null,\r\n        swiping: false,\r\n        $list: null,\r\n        touchObject: {},\r\n        transformsEnabled: false,\r\n        unslicked: false\r\n      };\r\n      $.extend(_, _.initials);\r\n      _.activeBreakpoint = null;\r\n      _.animType = null;\r\n      _.animProp = null;\r\n      _.breakpoints = [];\r\n      _.breakpointSettings = [];\r\n      _.cssTransitions = false;\r\n      _.focussed = false;\r\n      _.interrupted = false;\r\n      _.hidden = 'hidden';\r\n      _.paused = true;\r\n      _.positionProp = null;\r\n      _.respondTo = null;\r\n      _.rowCount = 1;\r\n      _.shouldClick = true;\r\n      _.$slider = $(element);\r\n      _.$slidesCache = null;\r\n      _.transformType = null;\r\n      _.transitionType = null;\r\n      _.visibilityChange = 'visibilitychange';\r\n      _.windowWidth = 0;\r\n      _.windowTimer = null;\r\n      dataSettings = $(element).data('slick') || {};\r\n      _.options = $.extend({}, _.defaults, settings, dataSettings);\r\n      _.currentSlide = _.options.initialSlide;\r\n      _.originalSettings = _.options;\r\n\r\n      if (typeof document.mozHidden !== 'undefined') {\r\n        _.hidden = 'mozHidden';\r\n        _.visibilityChange = 'mozvisibilitychange';\r\n      } else if (typeof document.webkitHidden !== 'undefined') {\r\n        _.hidden = 'webkitHidden';\r\n        _.visibilityChange = 'webkitvisibilitychange';\r\n      }\r\n\r\n      _.autoPlay = $.proxy(_.autoPlay, _);\r\n      _.autoPlayClear = $.proxy(_.autoPlayClear, _);\r\n      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\r\n      _.changeSlide = $.proxy(_.changeSlide, _);\r\n      _.clickHandler = $.proxy(_.clickHandler, _);\r\n      _.selectHandler = $.proxy(_.selectHandler, _);\r\n      _.setPosition = $.proxy(_.setPosition, _);\r\n      _.swipeHandler = $.proxy(_.swipeHandler, _);\r\n      _.dragHandler = $.proxy(_.dragHandler, _);\r\n      _.keyHandler = $.proxy(_.keyHandler, _);\r\n      _.instanceUid = instanceUid++; // A simple way to check for HTML strings\r\n      // Strict HTML recognition (must start with <)\r\n      // Extracted from jQuery v1.11 source\r\n\r\n      _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\r\n\r\n      _.registerBreakpoints();\r\n\r\n      _.init(true);\r\n    }\r\n\r\n    return Slick;\r\n  }();\r\n\r\n  Slick.prototype.activateADA = function () {\r\n    var _ = this;\r\n\r\n    _.$slideTrack.find('.slick-active').attr({\r\n      'aria-hidden': 'false'\r\n    }).find('a, input, button, select').attr({\r\n      'tabindex': '0'\r\n    });\r\n  };\r\n\r\n  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {\r\n    var _ = this;\r\n\r\n    if (typeof index === 'boolean') {\r\n      addBefore = index;\r\n      index = null;\r\n    } else if (index < 0 || index >= _.slideCount) {\r\n      return false;\r\n    }\r\n\r\n    _.unload();\r\n\r\n    if (typeof index === 'number') {\r\n      if (index === 0 && _.$slides.length === 0) {\r\n        $(markup).appendTo(_.$slideTrack);\r\n      } else if (addBefore) {\r\n        $(markup).insertBefore(_.$slides.eq(index));\r\n      } else {\r\n        $(markup).insertAfter(_.$slides.eq(index));\r\n      }\r\n    } else {\r\n      if (addBefore === true) {\r\n        $(markup).prependTo(_.$slideTrack);\r\n      } else {\r\n        $(markup).appendTo(_.$slideTrack);\r\n      }\r\n    }\r\n\r\n    _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n    _.$slideTrack.children(this.options.slide).detach();\r\n\r\n    _.$slideTrack.append(_.$slides);\r\n\r\n    _.$slides.each(function (index, element) {\r\n      $(element).attr('data-slick-index', index);\r\n    });\r\n\r\n    _.$slidesCache = _.$slides;\r\n\r\n    _.reinit();\r\n  };\r\n\r\n  Slick.prototype.animateHeight = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n\r\n      _.$list.animate({\r\n        height: targetHeight\r\n      }, _.options.speed);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.animateSlide = function (targetLeft, callback) {\r\n    var animProps = {},\r\n        _ = this;\r\n\r\n    _.animateHeight();\r\n\r\n    if (_.options.rtl === true && _.options.vertical === false) {\r\n      targetLeft = -targetLeft;\r\n    }\r\n\r\n    if (_.transformsEnabled === false) {\r\n      if (_.options.vertical === false) {\r\n        _.$slideTrack.animate({\r\n          left: targetLeft\r\n        }, _.options.speed, _.options.easing, callback);\r\n      } else {\r\n        _.$slideTrack.animate({\r\n          top: targetLeft\r\n        }, _.options.speed, _.options.easing, callback);\r\n      }\r\n    } else {\r\n      if (_.cssTransitions === false) {\r\n        if (_.options.rtl === true) {\r\n          _.currentLeft = -_.currentLeft;\r\n        }\r\n\r\n        $({\r\n          animStart: _.currentLeft\r\n        }).animate({\r\n          animStart: targetLeft\r\n        }, {\r\n          duration: _.options.speed,\r\n          easing: _.options.easing,\r\n          step: function step(now) {\r\n            now = Math.ceil(now);\r\n\r\n            if (_.options.vertical === false) {\r\n              animProps[_.animType] = 'translate(' + now + 'px, 0px)';\r\n\r\n              _.$slideTrack.css(animProps);\r\n            } else {\r\n              animProps[_.animType] = 'translate(0px,' + now + 'px)';\r\n\r\n              _.$slideTrack.css(animProps);\r\n            }\r\n          },\r\n          complete: function complete() {\r\n            if (callback) {\r\n              callback.call();\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        _.applyTransition();\r\n\r\n        targetLeft = Math.ceil(targetLeft);\r\n\r\n        if (_.options.vertical === false) {\r\n          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\r\n        } else {\r\n          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\r\n        }\r\n\r\n        _.$slideTrack.css(animProps);\r\n\r\n        if (callback) {\r\n          setTimeout(function () {\r\n            _.disableTransition();\r\n\r\n            callback.call();\r\n          }, _.options.speed);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.getNavTarget = function () {\r\n    var _ = this,\r\n        asNavFor = _.options.asNavFor;\r\n\r\n    if (asNavFor && asNavFor !== null) {\r\n      asNavFor = $(asNavFor).not(_.$slider);\r\n    }\r\n\r\n    return asNavFor;\r\n  };\r\n\r\n  Slick.prototype.asNavFor = function (index) {\r\n    var _ = this,\r\n        asNavFor = _.getNavTarget();\r\n\r\n    if (asNavFor !== null && _typeof(asNavFor) === 'object') {\r\n      asNavFor.each(function () {\r\n        var target = $(this).slick('getSlick');\r\n\r\n        if (!target.unslicked) {\r\n          target.slideHandler(index, true);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  Slick.prototype.applyTransition = function (slide) {\r\n    var _ = this,\r\n        transition = {};\r\n\r\n    if (_.options.fade === false) {\r\n      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n    } else {\r\n      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n    }\r\n\r\n    if (_.options.fade === false) {\r\n      _.$slideTrack.css(transition);\r\n    } else {\r\n      _.$slides.eq(slide).css(transition);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.autoPlay = function () {\r\n    var _ = this;\r\n\r\n    _.autoPlayClear();\r\n\r\n    if (_.slideCount > _.options.slidesToShow) {\r\n      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.autoPlayClear = function () {\r\n    var _ = this;\r\n\r\n    if (_.autoPlayTimer) {\r\n      clearInterval(_.autoPlayTimer);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.autoPlayIterator = function () {\r\n    var _ = this,\r\n        slideTo = _.currentSlide + _.options.slidesToScroll;\r\n\r\n    if (!_.paused && !_.interrupted && !_.focussed) {\r\n      if (_.options.infinite === false) {\r\n        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {\r\n          _.direction = 0;\r\n        } else if (_.direction === 0) {\r\n          slideTo = _.currentSlide - _.options.slidesToScroll;\r\n\r\n          if (_.currentSlide - 1 === 0) {\r\n            _.direction = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      _.slideHandler(slideTo);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.buildArrows = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.arrows === true) {\r\n      _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\r\n      _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\r\n\r\n      if (_.slideCount > _.options.slidesToShow) {\r\n        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n\r\n        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n\r\n        if (_.htmlExpr.test(_.options.prevArrow)) {\r\n          _.$prevArrow.prependTo(_.options.appendArrows);\r\n        }\r\n\r\n        if (_.htmlExpr.test(_.options.nextArrow)) {\r\n          _.$nextArrow.appendTo(_.options.appendArrows);\r\n        }\r\n\r\n        if (_.options.infinite !== true) {\r\n          _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n        }\r\n      } else {\r\n        _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({\r\n          'aria-disabled': 'true',\r\n          'tabindex': '-1'\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.buildDots = function () {\r\n    var _ = this,\r\n        i,\r\n        dot;\r\n\r\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$slider.addClass('slick-dotted');\r\n\r\n      dot = $('<ul />').addClass(_.options.dotsClass);\r\n\r\n      for (i = 0; i <= _.getDotCount(); i += 1) {\r\n        dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\r\n      }\r\n\r\n      _.$dots = dot.appendTo(_.options.appendDots);\r\n\r\n      _.$dots.find('li').first().addClass('slick-active');\r\n    }\r\n  };\r\n\r\n  Slick.prototype.buildOut = function () {\r\n    var _ = this;\r\n\r\n    _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');\r\n    _.slideCount = _.$slides.length;\r\n\r\n    _.$slides.each(function (index, element) {\r\n      $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');\r\n    });\r\n\r\n    _.$slider.addClass('slick-slider');\r\n\r\n    _.$slideTrack = _.slideCount === 0 ? $('<div class=\"slick-track\"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\r\n    _.$list = _.$slideTrack.wrap('<div class=\"slick-list\"/>').parent();\r\n\r\n    _.$slideTrack.css('opacity', 0);\r\n\r\n    if (_.options.centerMode === true || _.options.swipeToSlide === true) {\r\n      _.options.slidesToScroll = 1;\r\n    }\r\n\r\n    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\r\n\r\n    _.setupInfinite();\r\n\r\n    _.buildArrows();\r\n\r\n    _.buildDots();\r\n\r\n    _.updateDots();\r\n\r\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n    if (_.options.draggable === true) {\r\n      _.$list.addClass('draggable');\r\n    }\r\n  };\r\n\r\n  Slick.prototype.buildRows = function () {\r\n    var _ = this,\r\n        a,\r\n        b,\r\n        c,\r\n        newSlides,\r\n        numOfSlides,\r\n        originalSlides,\r\n        slidesPerSection;\r\n\r\n    newSlides = document.createDocumentFragment();\r\n    originalSlides = _.$slider.children();\r\n\r\n    if (_.options.rows > 0) {\r\n      slidesPerSection = _.options.slidesPerRow * _.options.rows;\r\n      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);\r\n\r\n      for (a = 0; a < numOfSlides; a++) {\r\n        var slide = document.createElement('div');\r\n\r\n        for (b = 0; b < _.options.rows; b++) {\r\n          var row = document.createElement('div');\r\n\r\n          for (c = 0; c < _.options.slidesPerRow; c++) {\r\n            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);\r\n\r\n            if (originalSlides.get(target)) {\r\n              row.appendChild(originalSlides.get(target));\r\n            }\r\n          }\r\n\r\n          slide.appendChild(row);\r\n        }\r\n\r\n        newSlides.appendChild(slide);\r\n      }\r\n\r\n      _.$slider.empty().append(newSlides);\r\n\r\n      _.$slider.children().children().children().css({\r\n        'width': 100 / _.options.slidesPerRow + '%',\r\n        'display': 'inline-block'\r\n      });\r\n    }\r\n  };\r\n\r\n  Slick.prototype.checkResponsive = function (initial, forceUpdate) {\r\n    var _ = this,\r\n        breakpoint,\r\n        targetBreakpoint,\r\n        respondToWidth,\r\n        triggerBreakpoint = false;\r\n\r\n    var sliderWidth = _.$slider.width();\r\n\r\n    var windowWidth = window.innerWidth || $(window).width();\r\n\r\n    if (_.respondTo === 'window') {\r\n      respondToWidth = windowWidth;\r\n    } else if (_.respondTo === 'slider') {\r\n      respondToWidth = sliderWidth;\r\n    } else if (_.respondTo === 'min') {\r\n      respondToWidth = Math.min(windowWidth, sliderWidth);\r\n    }\r\n\r\n    if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {\r\n      targetBreakpoint = null;\r\n\r\n      for (breakpoint in _.breakpoints) {\r\n        if (_.breakpoints.hasOwnProperty(breakpoint)) {\r\n          if (_.originalSettings.mobileFirst === false) {\r\n            if (respondToWidth < _.breakpoints[breakpoint]) {\r\n              targetBreakpoint = _.breakpoints[breakpoint];\r\n            }\r\n          } else {\r\n            if (respondToWidth > _.breakpoints[breakpoint]) {\r\n              targetBreakpoint = _.breakpoints[breakpoint];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (targetBreakpoint !== null) {\r\n        if (_.activeBreakpoint !== null) {\r\n          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\r\n            _.activeBreakpoint = targetBreakpoint;\r\n\r\n            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n              _.unslick(targetBreakpoint);\r\n            } else {\r\n              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\r\n\r\n              if (initial === true) {\r\n                _.currentSlide = _.options.initialSlide;\r\n              }\r\n\r\n              _.refresh(initial);\r\n            }\r\n\r\n            triggerBreakpoint = targetBreakpoint;\r\n          }\r\n        } else {\r\n          _.activeBreakpoint = targetBreakpoint;\r\n\r\n          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n            _.unslick(targetBreakpoint);\r\n          } else {\r\n            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);\r\n\r\n            if (initial === true) {\r\n              _.currentSlide = _.options.initialSlide;\r\n            }\r\n\r\n            _.refresh(initial);\r\n          }\r\n\r\n          triggerBreakpoint = targetBreakpoint;\r\n        }\r\n      } else {\r\n        if (_.activeBreakpoint !== null) {\r\n          _.activeBreakpoint = null;\r\n          _.options = _.originalSettings;\r\n\r\n          if (initial === true) {\r\n            _.currentSlide = _.options.initialSlide;\r\n          }\r\n\r\n          _.refresh(initial);\r\n\r\n          triggerBreakpoint = targetBreakpoint;\r\n        }\r\n      } // only trigger breakpoints during an actual break. not on initialize.\r\n\r\n\r\n      if (!initial && triggerBreakpoint !== false) {\r\n        _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.changeSlide = function (event, dontAnimate) {\r\n    var _ = this,\r\n        $target = $(event.currentTarget),\r\n        indexOffset,\r\n        slideOffset,\r\n        unevenOffset; // If target is a link, prevent default action.\r\n\r\n\r\n    if ($target.is('a')) {\r\n      event.preventDefault();\r\n    } // If target is not the <li> element (ie: a child), find the <li>.\r\n\r\n\r\n    if (!$target.is('li')) {\r\n      $target = $target.closest('li');\r\n    }\r\n\r\n    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;\r\n    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\r\n\r\n    switch (event.data.message) {\r\n      case 'previous':\r\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\r\n\r\n        if (_.slideCount > _.options.slidesToShow) {\r\n          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\r\n        }\r\n\r\n        break;\r\n\r\n      case 'next':\r\n        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\r\n\r\n        if (_.slideCount > _.options.slidesToShow) {\r\n          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\r\n        }\r\n\r\n        break;\r\n\r\n      case 'index':\r\n        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;\r\n\r\n        _.slideHandler(_.checkNavigable(index), false, dontAnimate);\r\n\r\n        $target.children().trigger('focus');\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  Slick.prototype.checkNavigable = function (index) {\r\n    var _ = this,\r\n        navigables,\r\n        prevNavigable;\r\n\r\n    navigables = _.getNavigableIndexes();\r\n    prevNavigable = 0;\r\n\r\n    if (index > navigables[navigables.length - 1]) {\r\n      index = navigables[navigables.length - 1];\r\n    } else {\r\n      for (var n in navigables) {\r\n        if (index < navigables[n]) {\r\n          index = prevNavigable;\r\n          break;\r\n        }\r\n\r\n        prevNavigable = navigables[n];\r\n      }\r\n    }\r\n\r\n    return index;\r\n  };\r\n\r\n  Slick.prototype.cleanUpEvents = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.dots && _.$dots !== null) {\r\n      $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n      if (_.options.accessibility === true) {\r\n        _.$dots.off('keydown.slick', _.keyHandler);\r\n      }\r\n    }\r\n\r\n    _.$slider.off('focus.slick blur.slick');\r\n\r\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\r\n      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\r\n\r\n      if (_.options.accessibility === true) {\r\n        _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\r\n        _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\r\n      }\r\n    }\r\n\r\n    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\r\n\r\n    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\r\n\r\n    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\r\n\r\n    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\r\n\r\n    _.$list.off('click.slick', _.clickHandler);\r\n\r\n    $(document).off(_.visibilityChange, _.visibility);\r\n\r\n    _.cleanUpSlideEvents();\r\n\r\n    if (_.options.accessibility === true) {\r\n      _.$list.off('keydown.slick', _.keyHandler);\r\n    }\r\n\r\n    if (_.options.focusOnSelect === true) {\r\n      $(_.$slideTrack).children().off('click.slick', _.selectHandler);\r\n    }\r\n\r\n    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\r\n    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\r\n    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\r\n    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n  };\r\n\r\n  Slick.prototype.cleanUpSlideEvents = function () {\r\n    var _ = this;\r\n\r\n    _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n\r\n    _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n  };\r\n\r\n  Slick.prototype.cleanUpRows = function () {\r\n    var _ = this,\r\n        originalSlides;\r\n\r\n    if (_.options.rows > 0) {\r\n      originalSlides = _.$slides.children().children();\r\n      originalSlides.removeAttr('style');\r\n\r\n      _.$slider.empty().append(originalSlides);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.clickHandler = function (event) {\r\n    var _ = this;\r\n\r\n    if (_.shouldClick === false) {\r\n      event.stopImmediatePropagation();\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.destroy = function (refresh) {\r\n    var _ = this;\r\n\r\n    _.autoPlayClear();\r\n\r\n    _.touchObject = {};\r\n\r\n    _.cleanUpEvents();\r\n\r\n    $('.slick-cloned', _.$slider).detach();\r\n\r\n    if (_.$dots) {\r\n      _.$dots.remove();\r\n    }\r\n\r\n    if (_.$prevArrow && _.$prevArrow.length) {\r\n      _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\r\n\r\n      if (_.htmlExpr.test(_.options.prevArrow)) {\r\n        _.$prevArrow.remove();\r\n      }\r\n    }\r\n\r\n    if (_.$nextArrow && _.$nextArrow.length) {\r\n      _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');\r\n\r\n      if (_.htmlExpr.test(_.options.nextArrow)) {\r\n        _.$nextArrow.remove();\r\n      }\r\n    }\r\n\r\n    if (_.$slides) {\r\n      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {\r\n        $(this).attr('style', $(this).data('originalStyling'));\r\n      });\r\n\r\n      _.$slideTrack.children(this.options.slide).detach();\r\n\r\n      _.$slideTrack.detach();\r\n\r\n      _.$list.detach();\r\n\r\n      _.$slider.append(_.$slides);\r\n    }\r\n\r\n    _.cleanUpRows();\r\n\r\n    _.$slider.removeClass('slick-slider');\r\n\r\n    _.$slider.removeClass('slick-initialized');\r\n\r\n    _.$slider.removeClass('slick-dotted');\r\n\r\n    _.unslicked = true;\r\n\r\n    if (!refresh) {\r\n      _.$slider.trigger('destroy', [_]);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.disableTransition = function (slide) {\r\n    var _ = this,\r\n        transition = {};\r\n\r\n    transition[_.transitionType] = '';\r\n\r\n    if (_.options.fade === false) {\r\n      _.$slideTrack.css(transition);\r\n    } else {\r\n      _.$slides.eq(slide).css(transition);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.fadeSlide = function (slideIndex, callback) {\r\n    var _ = this;\r\n\r\n    if (_.cssTransitions === false) {\r\n      _.$slides.eq(slideIndex).css({\r\n        zIndex: _.options.zIndex\r\n      });\r\n\r\n      _.$slides.eq(slideIndex).animate({\r\n        opacity: 1\r\n      }, _.options.speed, _.options.easing, callback);\r\n    } else {\r\n      _.applyTransition(slideIndex);\r\n\r\n      _.$slides.eq(slideIndex).css({\r\n        opacity: 1,\r\n        zIndex: _.options.zIndex\r\n      });\r\n\r\n      if (callback) {\r\n        setTimeout(function () {\r\n          _.disableTransition(slideIndex);\r\n\r\n          callback.call();\r\n        }, _.options.speed);\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.fadeSlideOut = function (slideIndex) {\r\n    var _ = this;\r\n\r\n    if (_.cssTransitions === false) {\r\n      _.$slides.eq(slideIndex).animate({\r\n        opacity: 0,\r\n        zIndex: _.options.zIndex - 2\r\n      }, _.options.speed, _.options.easing);\r\n    } else {\r\n      _.applyTransition(slideIndex);\r\n\r\n      _.$slides.eq(slideIndex).css({\r\n        opacity: 0,\r\n        zIndex: _.options.zIndex - 2\r\n      });\r\n    }\r\n  };\r\n\r\n  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {\r\n    var _ = this;\r\n\r\n    if (filter !== null) {\r\n      _.$slidesCache = _.$slides;\r\n\r\n      _.unload();\r\n\r\n      _.$slideTrack.children(this.options.slide).detach();\r\n\r\n      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\r\n\r\n      _.reinit();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.focusHandler = function () {\r\n    var _ = this;\r\n\r\n    _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {\r\n      event.stopImmediatePropagation();\r\n      var $sf = $(this);\r\n      setTimeout(function () {\r\n        if (_.options.pauseOnFocus) {\r\n          _.focussed = $sf.is(':focus');\r\n\r\n          _.autoPlay();\r\n        }\r\n      }, 0);\r\n    });\r\n  };\r\n\r\n  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {\r\n    var _ = this;\r\n\r\n    return _.currentSlide;\r\n  };\r\n\r\n  Slick.prototype.getDotCount = function () {\r\n    var _ = this;\r\n\r\n    var breakPoint = 0;\r\n    var counter = 0;\r\n    var pagerQty = 0;\r\n\r\n    if (_.options.infinite === true) {\r\n      if (_.slideCount <= _.options.slidesToShow) {\r\n        ++pagerQty;\r\n      } else {\r\n        while (breakPoint < _.slideCount) {\r\n          ++pagerQty;\r\n          breakPoint = counter + _.options.slidesToScroll;\r\n          counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n        }\r\n      }\r\n    } else if (_.options.centerMode === true) {\r\n      pagerQty = _.slideCount;\r\n    } else if (!_.options.asNavFor) {\r\n      pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\r\n    } else {\r\n      while (breakPoint < _.slideCount) {\r\n        ++pagerQty;\r\n        breakPoint = counter + _.options.slidesToScroll;\r\n        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n      }\r\n    }\r\n\r\n    return pagerQty - 1;\r\n  };\r\n\r\n  Slick.prototype.getLeft = function (slideIndex) {\r\n    var _ = this,\r\n        targetLeft,\r\n        verticalHeight,\r\n        verticalOffset = 0,\r\n        targetSlide,\r\n        coef;\r\n\r\n    _.slideOffset = 0;\r\n    verticalHeight = _.$slides.first().outerHeight(true);\r\n\r\n    if (_.options.infinite === true) {\r\n      if (_.slideCount > _.options.slidesToShow) {\r\n        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;\r\n        coef = -1;\r\n\r\n        if (_.options.vertical === true && _.options.centerMode === true) {\r\n          if (_.options.slidesToShow === 2) {\r\n            coef = -1.5;\r\n          } else if (_.options.slidesToShow === 1) {\r\n            coef = -2;\r\n          }\r\n        }\r\n\r\n        verticalOffset = verticalHeight * _.options.slidesToShow * coef;\r\n      }\r\n\r\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\r\n          if (slideIndex > _.slideCount) {\r\n            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;\r\n            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;\r\n          } else {\r\n            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;\r\n            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      if (slideIndex + _.options.slidesToShow > _.slideCount) {\r\n        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;\r\n        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;\r\n      }\r\n    }\r\n\r\n    if (_.slideCount <= _.options.slidesToShow) {\r\n      _.slideOffset = 0;\r\n      verticalOffset = 0;\r\n    }\r\n\r\n    if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\r\n      _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;\r\n    } else if (_.options.centerMode === true && _.options.infinite === true) {\r\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\r\n    } else if (_.options.centerMode === true) {\r\n      _.slideOffset = 0;\r\n      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\r\n    }\r\n\r\n    if (_.options.vertical === false) {\r\n      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;\r\n    } else {\r\n      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;\r\n    }\r\n\r\n    if (_.options.variableWidth === true) {\r\n      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n      } else {\r\n        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\r\n      }\r\n\r\n      if (_.options.rtl === true) {\r\n        if (targetSlide[0]) {\r\n          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n        } else {\r\n          targetLeft = 0;\r\n        }\r\n      } else {\r\n        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n      }\r\n\r\n      if (_.options.centerMode === true) {\r\n        if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n        } else {\r\n          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\r\n        }\r\n\r\n        if (_.options.rtl === true) {\r\n          if (targetSlide[0]) {\r\n            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n          } else {\r\n            targetLeft = 0;\r\n          }\r\n        } else {\r\n          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n        }\r\n\r\n        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\r\n      }\r\n    }\r\n\r\n    return targetLeft;\r\n  };\r\n\r\n  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {\r\n    var _ = this;\r\n\r\n    return _.options[option];\r\n  };\r\n\r\n  Slick.prototype.getNavigableIndexes = function () {\r\n    var _ = this,\r\n        breakPoint = 0,\r\n        counter = 0,\r\n        indexes = [],\r\n        max;\r\n\r\n    if (_.options.infinite === false) {\r\n      max = _.slideCount;\r\n    } else {\r\n      breakPoint = _.options.slidesToScroll * -1;\r\n      counter = _.options.slidesToScroll * -1;\r\n      max = _.slideCount * 2;\r\n    }\r\n\r\n    while (breakPoint < max) {\r\n      indexes.push(breakPoint);\r\n      breakPoint = counter + _.options.slidesToScroll;\r\n      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n    }\r\n\r\n    return indexes;\r\n  };\r\n\r\n  Slick.prototype.getSlick = function () {\r\n    return this;\r\n  };\r\n\r\n  Slick.prototype.getSlideCount = function () {\r\n    var _ = this,\r\n        slidesTraversed,\r\n        swipedSlide,\r\n        centerOffset;\r\n\r\n    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\r\n\r\n    if (_.options.swipeToSlide === true) {\r\n      _.$slideTrack.find('.slick-slide').each(function (index, slide) {\r\n        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {\r\n          swipedSlide = slide;\r\n          return false;\r\n        }\r\n      });\r\n\r\n      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\r\n      return slidesTraversed;\r\n    } else {\r\n      return _.options.slidesToScroll;\r\n    }\r\n  };\r\n\r\n  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {\r\n    var _ = this;\r\n\r\n    _.changeSlide({\r\n      data: {\r\n        message: 'index',\r\n        index: parseInt(slide)\r\n      }\r\n    }, dontAnimate);\r\n  };\r\n\r\n  Slick.prototype.init = function (creation) {\r\n    var _ = this;\r\n\r\n    if (!$(_.$slider).hasClass('slick-initialized')) {\r\n      $(_.$slider).addClass('slick-initialized');\r\n\r\n      _.buildRows();\r\n\r\n      _.buildOut();\r\n\r\n      _.setProps();\r\n\r\n      _.startLoad();\r\n\r\n      _.loadSlider();\r\n\r\n      _.initializeEvents();\r\n\r\n      _.updateArrows();\r\n\r\n      _.updateDots();\r\n\r\n      _.checkResponsive(true);\r\n\r\n      _.focusHandler();\r\n    }\r\n\r\n    if (creation) {\r\n      _.$slider.trigger('init', [_]);\r\n    }\r\n\r\n    if (_.options.accessibility === true) {\r\n      _.initADA();\r\n    }\r\n\r\n    if (_.options.autoplay) {\r\n      _.paused = false;\r\n\r\n      _.autoPlay();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.initADA = function () {\r\n    var _ = this,\r\n        numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\r\n        tabControlIndexes = _.getNavigableIndexes().filter(function (val) {\r\n      return val >= 0 && val < _.slideCount;\r\n    });\r\n\r\n    _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\r\n      'aria-hidden': 'true',\r\n      'tabindex': '-1'\r\n    }).find('a, input, button, select').attr({\r\n      'tabindex': '-1'\r\n    });\r\n\r\n    if (_.$dots !== null) {\r\n      _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {\r\n        var slideControlIndex = tabControlIndexes.indexOf(i);\r\n        $(this).attr({\r\n          'role': 'tabpanel',\r\n          'id': 'slick-slide' + _.instanceUid + i,\r\n          'tabindex': -1\r\n        });\r\n\r\n        if (slideControlIndex !== -1) {\r\n          var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex;\r\n\r\n          if ($('#' + ariaButtonControl).length) {\r\n            $(this).attr({\r\n              'aria-describedby': ariaButtonControl\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      _.$dots.attr('role', 'tablist').find('li').each(function (i) {\r\n        var mappedSlideIndex = tabControlIndexes[i];\r\n        $(this).attr({\r\n          'role': 'presentation'\r\n        });\r\n        $(this).find('button').first().attr({\r\n          'role': 'tab',\r\n          'id': 'slick-slide-control' + _.instanceUid + i,\r\n          'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\r\n          'aria-label': i + 1 + ' of ' + numDotGroups,\r\n          'aria-selected': null,\r\n          'tabindex': '-1'\r\n        });\r\n      }).eq(_.currentSlide).find('button').attr({\r\n        'aria-selected': 'true',\r\n        'tabindex': '0'\r\n      }).end();\r\n    }\r\n\r\n    for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {\r\n      if (_.options.focusOnChange) {\r\n        _.$slides.eq(i).attr({\r\n          'tabindex': '0'\r\n        });\r\n      } else {\r\n        _.$slides.eq(i).removeAttr('tabindex');\r\n      }\r\n    }\r\n\r\n    _.activateADA();\r\n  };\r\n\r\n  Slick.prototype.initArrowEvents = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$prevArrow.off('click.slick').on('click.slick', {\r\n        message: 'previous'\r\n      }, _.changeSlide);\r\n\r\n      _.$nextArrow.off('click.slick').on('click.slick', {\r\n        message: 'next'\r\n      }, _.changeSlide);\r\n\r\n      if (_.options.accessibility === true) {\r\n        _.$prevArrow.on('keydown.slick', _.keyHandler);\r\n\r\n        _.$nextArrow.on('keydown.slick', _.keyHandler);\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.initDotEvents = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n      $('li', _.$dots).on('click.slick', {\r\n        message: 'index'\r\n      }, _.changeSlide);\r\n\r\n      if (_.options.accessibility === true) {\r\n        _.$dots.on('keydown.slick', _.keyHandler);\r\n      }\r\n    }\r\n\r\n    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\r\n      $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n    }\r\n  };\r\n\r\n  Slick.prototype.initSlideEvents = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.pauseOnHover) {\r\n      _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n\r\n      _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n    }\r\n  };\r\n\r\n  Slick.prototype.initializeEvents = function () {\r\n    var _ = this;\r\n\r\n    _.initArrowEvents();\r\n\r\n    _.initDotEvents();\r\n\r\n    _.initSlideEvents();\r\n\r\n    _.$list.on('touchstart.slick mousedown.slick', {\r\n      action: 'start'\r\n    }, _.swipeHandler);\r\n\r\n    _.$list.on('touchmove.slick mousemove.slick', {\r\n      action: 'move'\r\n    }, _.swipeHandler);\r\n\r\n    _.$list.on('touchend.slick mouseup.slick', {\r\n      action: 'end'\r\n    }, _.swipeHandler);\r\n\r\n    _.$list.on('touchcancel.slick mouseleave.slick', {\r\n      action: 'end'\r\n    }, _.swipeHandler);\r\n\r\n    _.$list.on('click.slick', _.clickHandler);\r\n\r\n    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\r\n\r\n    if (_.options.accessibility === true) {\r\n      _.$list.on('keydown.slick', _.keyHandler);\r\n    }\r\n\r\n    if (_.options.focusOnSelect === true) {\r\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n    }\r\n\r\n    $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\r\n    $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\r\n    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\r\n    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n    $(_.setPosition);\r\n  };\r\n\r\n  Slick.prototype.initUI = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$prevArrow.show();\r\n\r\n      _.$nextArrow.show();\r\n    }\r\n\r\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$dots.show();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.keyHandler = function (event) {\r\n    var _ = this; //Dont slide if the cursor is inside the form fields and arrow keys are pressed\r\n\r\n\r\n    if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\r\n      if (event.keyCode === 37 && _.options.accessibility === true) {\r\n        _.changeSlide({\r\n          data: {\r\n            message: _.options.rtl === true ? 'next' : 'previous'\r\n          }\r\n        });\r\n      } else if (event.keyCode === 39 && _.options.accessibility === true) {\r\n        _.changeSlide({\r\n          data: {\r\n            message: _.options.rtl === true ? 'previous' : 'next'\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.lazyLoad = function () {\r\n    var _ = this,\r\n        loadRange,\r\n        cloneRange,\r\n        rangeStart,\r\n        rangeEnd;\r\n\r\n    function loadImages(imagesScope) {\r\n      $('img[data-lazy]', imagesScope).each(function () {\r\n        var image = $(this),\r\n            imageSource = $(this).attr('data-lazy'),\r\n            imageSrcSet = $(this).attr('data-srcset'),\r\n            imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\r\n            imageToLoad = document.createElement('img');\r\n\r\n        imageToLoad.onload = function () {\r\n          image.animate({\r\n            opacity: 0\r\n          }, 100, function () {\r\n            if (imageSrcSet) {\r\n              image.attr('srcset', imageSrcSet);\r\n\r\n              if (imageSizes) {\r\n                image.attr('sizes', imageSizes);\r\n              }\r\n            }\r\n\r\n            image.attr('src', imageSource).animate({\r\n              opacity: 1\r\n            }, 200, function () {\r\n              image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\r\n            });\r\n\r\n            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\r\n          });\r\n        };\r\n\r\n        imageToLoad.onerror = function () {\r\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\r\n\r\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\r\n        };\r\n\r\n        imageToLoad.src = imageSource;\r\n      });\r\n    }\r\n\r\n    if (_.options.centerMode === true) {\r\n      if (_.options.infinite === true) {\r\n        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\r\n        rangeEnd = rangeStart + _.options.slidesToShow + 2;\r\n      } else {\r\n        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\r\n        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\r\n      }\r\n    } else {\r\n      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\r\n      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\r\n\r\n      if (_.options.fade === true) {\r\n        if (rangeStart > 0) rangeStart--;\r\n        if (rangeEnd <= _.slideCount) rangeEnd++;\r\n      }\r\n    }\r\n\r\n    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\r\n\r\n    if (_.options.lazyLoad === 'anticipated') {\r\n      var prevSlide = rangeStart - 1,\r\n          nextSlide = rangeEnd,\r\n          $slides = _.$slider.find('.slick-slide');\r\n\r\n      for (var i = 0; i < _.options.slidesToScroll; i++) {\r\n        if (prevSlide < 0) prevSlide = _.slideCount - 1;\r\n        loadRange = loadRange.add($slides.eq(prevSlide));\r\n        loadRange = loadRange.add($slides.eq(nextSlide));\r\n        prevSlide--;\r\n        nextSlide++;\r\n      }\r\n    }\r\n\r\n    loadImages(loadRange);\r\n\r\n    if (_.slideCount <= _.options.slidesToShow) {\r\n      cloneRange = _.$slider.find('.slick-slide');\r\n      loadImages(cloneRange);\r\n    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\r\n      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\r\n      loadImages(cloneRange);\r\n    } else if (_.currentSlide === 0) {\r\n      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\r\n      loadImages(cloneRange);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.loadSlider = function () {\r\n    var _ = this;\r\n\r\n    _.setPosition();\r\n\r\n    _.$slideTrack.css({\r\n      opacity: 1\r\n    });\r\n\r\n    _.$slider.removeClass('slick-loading');\r\n\r\n    _.initUI();\r\n\r\n    if (_.options.lazyLoad === 'progressive') {\r\n      _.progressiveLazyLoad();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.next = Slick.prototype.slickNext = function () {\r\n    var _ = this;\r\n\r\n    _.changeSlide({\r\n      data: {\r\n        message: 'next'\r\n      }\r\n    });\r\n  };\r\n\r\n  Slick.prototype.orientationChange = function () {\r\n    var _ = this;\r\n\r\n    _.checkResponsive();\r\n\r\n    _.setPosition();\r\n  };\r\n\r\n  Slick.prototype.pause = Slick.prototype.slickPause = function () {\r\n    var _ = this;\r\n\r\n    _.autoPlayClear();\r\n\r\n    _.paused = true;\r\n  };\r\n\r\n  Slick.prototype.play = Slick.prototype.slickPlay = function () {\r\n    var _ = this;\r\n\r\n    _.autoPlay();\r\n\r\n    _.options.autoplay = true;\r\n    _.paused = false;\r\n    _.focussed = false;\r\n    _.interrupted = false;\r\n  };\r\n\r\n  Slick.prototype.postSlide = function (index) {\r\n    var _ = this;\r\n\r\n    if (!_.unslicked) {\r\n      _.$slider.trigger('afterChange', [_, index]);\r\n\r\n      _.animating = false;\r\n\r\n      if (_.slideCount > _.options.slidesToShow) {\r\n        _.setPosition();\r\n      }\r\n\r\n      _.swipeLeft = null;\r\n\r\n      if (_.options.autoplay) {\r\n        _.autoPlay();\r\n      }\r\n\r\n      if (_.options.accessibility === true) {\r\n        _.initADA();\r\n\r\n        if (_.options.focusOnChange) {\r\n          var $currentSlide = $(_.$slides.get(_.currentSlide));\r\n          $currentSlide.attr('tabindex', 0).focus();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.prev = Slick.prototype.slickPrev = function () {\r\n    var _ = this;\r\n\r\n    _.changeSlide({\r\n      data: {\r\n        message: 'previous'\r\n      }\r\n    });\r\n  };\r\n\r\n  Slick.prototype.preventDefault = function (event) {\r\n    event.preventDefault();\r\n  };\r\n\r\n  Slick.prototype.progressiveLazyLoad = function (tryCount) {\r\n    tryCount = tryCount || 1;\r\n\r\n    var _ = this,\r\n        $imgsToLoad = $('img[data-lazy]', _.$slider),\r\n        image,\r\n        imageSource,\r\n        imageSrcSet,\r\n        imageSizes,\r\n        imageToLoad;\r\n\r\n    if ($imgsToLoad.length) {\r\n      image = $imgsToLoad.first();\r\n      imageSource = image.attr('data-lazy');\r\n      imageSrcSet = image.attr('data-srcset');\r\n      imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');\r\n      imageToLoad = document.createElement('img');\r\n\r\n      imageToLoad.onload = function () {\r\n        if (imageSrcSet) {\r\n          image.attr('srcset', imageSrcSet);\r\n\r\n          if (imageSizes) {\r\n            image.attr('sizes', imageSizes);\r\n          }\r\n        }\r\n\r\n        image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');\r\n\r\n        if (_.options.adaptiveHeight === true) {\r\n          _.setPosition();\r\n        }\r\n\r\n        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\r\n\r\n        _.progressiveLazyLoad();\r\n      };\r\n\r\n      imageToLoad.onerror = function () {\r\n        if (tryCount < 3) {\r\n          /**\r\n           * try to load the image 3 times,\r\n           * leave a slight delay so we don't get\r\n           * servers blocking the request.\r\n           */\r\n          setTimeout(function () {\r\n            _.progressiveLazyLoad(tryCount + 1);\r\n          }, 500);\r\n        } else {\r\n          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');\r\n\r\n          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\r\n\r\n          _.progressiveLazyLoad();\r\n        }\r\n      };\r\n\r\n      imageToLoad.src = imageSource;\r\n    } else {\r\n      _.$slider.trigger('allImagesLoaded', [_]);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.refresh = function (initializing) {\r\n    var _ = this,\r\n        currentSlide,\r\n        lastVisibleIndex;\r\n\r\n    lastVisibleIndex = _.slideCount - _.options.slidesToShow; // in non-infinite sliders, we don't want to go past the\r\n    // last visible index.\r\n\r\n    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {\r\n      _.currentSlide = lastVisibleIndex;\r\n    } // if less slides than to show, go to start.\r\n\r\n\r\n    if (_.slideCount <= _.options.slidesToShow) {\r\n      _.currentSlide = 0;\r\n    }\r\n\r\n    currentSlide = _.currentSlide;\r\n\r\n    _.destroy(true);\r\n\r\n    $.extend(_, _.initials, {\r\n      currentSlide: currentSlide\r\n    });\r\n\r\n    _.init();\r\n\r\n    if (!initializing) {\r\n      _.changeSlide({\r\n        data: {\r\n          message: 'index',\r\n          index: currentSlide\r\n        }\r\n      }, false);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.registerBreakpoints = function () {\r\n    var _ = this,\r\n        breakpoint,\r\n        currentBreakpoint,\r\n        l,\r\n        responsiveSettings = _.options.responsive || null;\r\n\r\n    if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {\r\n      _.respondTo = _.options.respondTo || 'window';\r\n\r\n      for (breakpoint in responsiveSettings) {\r\n        l = _.breakpoints.length - 1;\r\n\r\n        if (responsiveSettings.hasOwnProperty(breakpoint)) {\r\n          currentBreakpoint = responsiveSettings[breakpoint].breakpoint; // loop through the breakpoints and cut out any existing\r\n          // ones with the same breakpoint number, we don't want dupes.\r\n\r\n          while (l >= 0) {\r\n            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {\r\n              _.breakpoints.splice(l, 1);\r\n            }\r\n\r\n            l--;\r\n          }\r\n\r\n          _.breakpoints.push(currentBreakpoint);\r\n\r\n          _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\r\n        }\r\n      }\r\n\r\n      _.breakpoints.sort(function (a, b) {\r\n        return _.options.mobileFirst ? a - b : b - a;\r\n      });\r\n    }\r\n  };\r\n\r\n  Slick.prototype.reinit = function () {\r\n    var _ = this;\r\n\r\n    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');\r\n    _.slideCount = _.$slides.length;\r\n\r\n    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\r\n      _.currentSlide = _.currentSlide - _.options.slidesToScroll;\r\n    }\r\n\r\n    if (_.slideCount <= _.options.slidesToShow) {\r\n      _.currentSlide = 0;\r\n    }\r\n\r\n    _.registerBreakpoints();\r\n\r\n    _.setProps();\r\n\r\n    _.setupInfinite();\r\n\r\n    _.buildArrows();\r\n\r\n    _.updateArrows();\r\n\r\n    _.initArrowEvents();\r\n\r\n    _.buildDots();\r\n\r\n    _.updateDots();\r\n\r\n    _.initDotEvents();\r\n\r\n    _.cleanUpSlideEvents();\r\n\r\n    _.initSlideEvents();\r\n\r\n    _.checkResponsive(false, true);\r\n\r\n    if (_.options.focusOnSelect === true) {\r\n      $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n    }\r\n\r\n    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n    _.setPosition();\r\n\r\n    _.focusHandler();\r\n\r\n    _.paused = !_.options.autoplay;\r\n\r\n    _.autoPlay();\r\n\r\n    _.$slider.trigger('reInit', [_]);\r\n  };\r\n\r\n  Slick.prototype.resize = function () {\r\n    var _ = this;\r\n\r\n    if ($(window).width() !== _.windowWidth) {\r\n      clearTimeout(_.windowDelay);\r\n      _.windowDelay = window.setTimeout(function () {\r\n        _.windowWidth = $(window).width();\r\n\r\n        _.checkResponsive();\r\n\r\n        if (!_.unslicked) {\r\n          _.setPosition();\r\n        }\r\n      }, 50);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {\r\n    var _ = this;\r\n\r\n    if (typeof index === 'boolean') {\r\n      removeBefore = index;\r\n      index = removeBefore === true ? 0 : _.slideCount - 1;\r\n    } else {\r\n      index = removeBefore === true ? --index : index;\r\n    }\r\n\r\n    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\r\n      return false;\r\n    }\r\n\r\n    _.unload();\r\n\r\n    if (removeAll === true) {\r\n      _.$slideTrack.children().remove();\r\n    } else {\r\n      _.$slideTrack.children(this.options.slide).eq(index).remove();\r\n    }\r\n\r\n    _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n    _.$slideTrack.children(this.options.slide).detach();\r\n\r\n    _.$slideTrack.append(_.$slides);\r\n\r\n    _.$slidesCache = _.$slides;\r\n\r\n    _.reinit();\r\n  };\r\n\r\n  Slick.prototype.setCSS = function (position) {\r\n    var _ = this,\r\n        positionProps = {},\r\n        x,\r\n        y;\r\n\r\n    if (_.options.rtl === true) {\r\n      position = -position;\r\n    }\r\n\r\n    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\r\n    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\r\n    positionProps[_.positionProp] = position;\r\n\r\n    if (_.transformsEnabled === false) {\r\n      _.$slideTrack.css(positionProps);\r\n    } else {\r\n      positionProps = {};\r\n\r\n      if (_.cssTransitions === false) {\r\n        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\r\n\r\n        _.$slideTrack.css(positionProps);\r\n      } else {\r\n        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\r\n\r\n        _.$slideTrack.css(positionProps);\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.setDimensions = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.vertical === false) {\r\n      if (_.options.centerMode === true) {\r\n        _.$list.css({\r\n          padding: '0px ' + _.options.centerPadding\r\n        });\r\n      }\r\n    } else {\r\n      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\r\n\r\n      if (_.options.centerMode === true) {\r\n        _.$list.css({\r\n          padding: _.options.centerPadding + ' 0px'\r\n        });\r\n      }\r\n    }\r\n\r\n    _.listWidth = _.$list.width();\r\n    _.listHeight = _.$list.height();\r\n\r\n    if (_.options.vertical === false && _.options.variableWidth === false) {\r\n      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\r\n\r\n      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));\r\n    } else if (_.options.variableWidth === true) {\r\n      _.$slideTrack.width(5000 * _.slideCount);\r\n    } else {\r\n      _.slideWidth = Math.ceil(_.listWidth);\r\n\r\n      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));\r\n    }\r\n\r\n    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\r\n\r\n    if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\r\n  };\r\n\r\n  Slick.prototype.setFade = function () {\r\n    var _ = this,\r\n        targetLeft;\r\n\r\n    _.$slides.each(function (index, element) {\r\n      targetLeft = _.slideWidth * index * -1;\r\n\r\n      if (_.options.rtl === true) {\r\n        $(element).css({\r\n          position: 'relative',\r\n          right: targetLeft,\r\n          top: 0,\r\n          zIndex: _.options.zIndex - 2,\r\n          opacity: 0\r\n        });\r\n      } else {\r\n        $(element).css({\r\n          position: 'relative',\r\n          left: targetLeft,\r\n          top: 0,\r\n          zIndex: _.options.zIndex - 2,\r\n          opacity: 0\r\n        });\r\n      }\r\n    });\r\n\r\n    _.$slides.eq(_.currentSlide).css({\r\n      zIndex: _.options.zIndex - 1,\r\n      opacity: 1\r\n    });\r\n  };\r\n\r\n  Slick.prototype.setHeight = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n\r\n      _.$list.css('height', targetHeight);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {\r\n    /**\r\n     * accepts arguments in format of:\r\n     *\r\n     *  - for changing a single option's value:\r\n     *     .slick(\"setOption\", option, value, refresh )\r\n     *\r\n     *  - for changing a set of responsive options:\r\n     *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\r\n     *\r\n     *  - for updating multiple values at once (not responsive)\r\n     *     .slick(\"setOption\", { 'option': value, ... }, refresh )\r\n     */\r\n    var _ = this,\r\n        l,\r\n        item,\r\n        option,\r\n        value,\r\n        refresh = false,\r\n        type;\r\n\r\n    if ($.type(arguments[0]) === 'object') {\r\n      option = arguments[0];\r\n      refresh = arguments[1];\r\n      type = 'multiple';\r\n    } else if ($.type(arguments[0]) === 'string') {\r\n      option = arguments[0];\r\n      value = arguments[1];\r\n      refresh = arguments[2];\r\n\r\n      if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {\r\n        type = 'responsive';\r\n      } else if (typeof arguments[1] !== 'undefined') {\r\n        type = 'single';\r\n      }\r\n    }\r\n\r\n    if (type === 'single') {\r\n      _.options[option] = value;\r\n    } else if (type === 'multiple') {\r\n      $.each(option, function (opt, val) {\r\n        _.options[opt] = val;\r\n      });\r\n    } else if (type === 'responsive') {\r\n      for (item in value) {\r\n        if ($.type(_.options.responsive) !== 'array') {\r\n          _.options.responsive = [value[item]];\r\n        } else {\r\n          l = _.options.responsive.length - 1; // loop through the responsive object and splice out duplicates.\r\n\r\n          while (l >= 0) {\r\n            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {\r\n              _.options.responsive.splice(l, 1);\r\n            }\r\n\r\n            l--;\r\n          }\r\n\r\n          _.options.responsive.push(value[item]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (refresh) {\r\n      _.unload();\r\n\r\n      _.reinit();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.setPosition = function () {\r\n    var _ = this;\r\n\r\n    _.setDimensions();\r\n\r\n    _.setHeight();\r\n\r\n    if (_.options.fade === false) {\r\n      _.setCSS(_.getLeft(_.currentSlide));\r\n    } else {\r\n      _.setFade();\r\n    }\r\n\r\n    _.$slider.trigger('setPosition', [_]);\r\n  };\r\n\r\n  Slick.prototype.setProps = function () {\r\n    var _ = this,\r\n        bodyStyle = document.body.style;\r\n\r\n    _.positionProp = _.options.vertical === true ? 'top' : 'left';\r\n\r\n    if (_.positionProp === 'top') {\r\n      _.$slider.addClass('slick-vertical');\r\n    } else {\r\n      _.$slider.removeClass('slick-vertical');\r\n    }\r\n\r\n    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {\r\n      if (_.options.useCSS === true) {\r\n        _.cssTransitions = true;\r\n      }\r\n    }\r\n\r\n    if (_.options.fade) {\r\n      if (typeof _.options.zIndex === 'number') {\r\n        if (_.options.zIndex < 3) {\r\n          _.options.zIndex = 3;\r\n        }\r\n      } else {\r\n        _.options.zIndex = _.defaults.zIndex;\r\n      }\r\n    }\r\n\r\n    if (bodyStyle.OTransform !== undefined) {\r\n      _.animType = 'OTransform';\r\n      _.transformType = '-o-transform';\r\n      _.transitionType = 'OTransition';\r\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n    }\r\n\r\n    if (bodyStyle.MozTransform !== undefined) {\r\n      _.animType = 'MozTransform';\r\n      _.transformType = '-moz-transform';\r\n      _.transitionType = 'MozTransition';\r\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\r\n    }\r\n\r\n    if (bodyStyle.webkitTransform !== undefined) {\r\n      _.animType = 'webkitTransform';\r\n      _.transformType = '-webkit-transform';\r\n      _.transitionType = 'webkitTransition';\r\n      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n    }\r\n\r\n    if (bodyStyle.msTransform !== undefined) {\r\n      _.animType = 'msTransform';\r\n      _.transformType = '-ms-transform';\r\n      _.transitionType = 'msTransition';\r\n      if (bodyStyle.msTransform === undefined) _.animType = false;\r\n    }\r\n\r\n    if (bodyStyle.transform !== undefined && _.animType !== false) {\r\n      _.animType = 'transform';\r\n      _.transformType = 'transform';\r\n      _.transitionType = 'transition';\r\n    }\r\n\r\n    _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;\r\n  };\r\n\r\n  Slick.prototype.setSlideClasses = function (index) {\r\n    var _ = this,\r\n        centerOffset,\r\n        allSlides,\r\n        indexOffset,\r\n        remainder;\r\n\r\n    allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');\r\n\r\n    _.$slides.eq(index).addClass('slick-current');\r\n\r\n    if (_.options.centerMode === true) {\r\n      var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\r\n      centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n      if (_.options.infinite === true) {\r\n        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {\r\n          _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');\r\n        } else {\r\n          indexOffset = _.options.slidesToShow + index;\r\n          allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');\r\n        }\r\n\r\n        if (index === 0) {\r\n          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');\r\n        } else if (index === _.slideCount - 1) {\r\n          allSlides.eq(_.options.slidesToShow).addClass('slick-center');\r\n        }\r\n      }\r\n\r\n      _.$slides.eq(index).addClass('slick-center');\r\n    } else {\r\n      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {\r\n        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\r\n      } else if (allSlides.length <= _.options.slidesToShow) {\r\n        allSlides.addClass('slick-active').attr('aria-hidden', 'false');\r\n      } else {\r\n        remainder = _.slideCount % _.options.slidesToShow;\r\n        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\r\n\r\n        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {\r\n          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');\r\n        } else {\r\n          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');\r\n        }\r\n      }\r\n    }\r\n\r\n    if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\r\n      _.lazyLoad();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.setupInfinite = function () {\r\n    var _ = this,\r\n        i,\r\n        slideIndex,\r\n        infiniteCount;\r\n\r\n    if (_.options.fade === true) {\r\n      _.options.centerMode = false;\r\n    }\r\n\r\n    if (_.options.infinite === true && _.options.fade === false) {\r\n      slideIndex = null;\r\n\r\n      if (_.slideCount > _.options.slidesToShow) {\r\n        if (_.options.centerMode === true) {\r\n          infiniteCount = _.options.slidesToShow + 1;\r\n        } else {\r\n          infiniteCount = _.options.slidesToShow;\r\n        }\r\n\r\n        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {\r\n          slideIndex = i - 1;\r\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');\r\n        }\r\n\r\n        for (i = 0; i < infiniteCount + _.slideCount; i += 1) {\r\n          slideIndex = i;\r\n          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');\r\n        }\r\n\r\n        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {\r\n          $(this).attr('id', '');\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.interrupt = function (toggle) {\r\n    var _ = this;\r\n\r\n    if (!toggle) {\r\n      _.autoPlay();\r\n    }\r\n\r\n    _.interrupted = toggle;\r\n  };\r\n\r\n  Slick.prototype.selectHandler = function (event) {\r\n    var _ = this;\r\n\r\n    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');\r\n    var index = parseInt(targetElement.attr('data-slick-index'));\r\n    if (!index) index = 0;\r\n\r\n    if (_.slideCount <= _.options.slidesToShow) {\r\n      _.slideHandler(index, false, true);\r\n\r\n      return;\r\n    }\r\n\r\n    _.slideHandler(index);\r\n  };\r\n\r\n  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {\r\n    var targetSlide,\r\n        animSlide,\r\n        oldSlide,\r\n        slideLeft,\r\n        targetLeft = null,\r\n        _ = this,\r\n        navTarget;\r\n\r\n    sync = sync || false;\r\n\r\n    if (_.animating === true && _.options.waitForAnimate === true) {\r\n      return;\r\n    }\r\n\r\n    if (_.options.fade === true && _.currentSlide === index) {\r\n      return;\r\n    }\r\n\r\n    if (sync === false) {\r\n      _.asNavFor(index);\r\n    }\r\n\r\n    targetSlide = index;\r\n    targetLeft = _.getLeft(targetSlide);\r\n    slideLeft = _.getLeft(_.currentSlide);\r\n    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\r\n\r\n    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\r\n      if (_.options.fade === false) {\r\n        targetSlide = _.currentSlide;\r\n\r\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n          _.animateSlide(slideLeft, function () {\r\n            _.postSlide(targetSlide);\r\n          });\r\n        } else {\r\n          _.postSlide(targetSlide);\r\n        }\r\n      }\r\n\r\n      return;\r\n    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {\r\n      if (_.options.fade === false) {\r\n        targetSlide = _.currentSlide;\r\n\r\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n          _.animateSlide(slideLeft, function () {\r\n            _.postSlide(targetSlide);\r\n          });\r\n        } else {\r\n          _.postSlide(targetSlide);\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (_.options.autoplay) {\r\n      clearInterval(_.autoPlayTimer);\r\n    }\r\n\r\n    if (targetSlide < 0) {\r\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;\r\n      } else {\r\n        animSlide = _.slideCount + targetSlide;\r\n      }\r\n    } else if (targetSlide >= _.slideCount) {\r\n      if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n        animSlide = 0;\r\n      } else {\r\n        animSlide = targetSlide - _.slideCount;\r\n      }\r\n    } else {\r\n      animSlide = targetSlide;\r\n    }\r\n\r\n    _.animating = true;\r\n\r\n    _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\r\n\r\n    oldSlide = _.currentSlide;\r\n    _.currentSlide = animSlide;\r\n\r\n    _.setSlideClasses(_.currentSlide);\r\n\r\n    if (_.options.asNavFor) {\r\n      navTarget = _.getNavTarget();\r\n      navTarget = navTarget.slick('getSlick');\r\n\r\n      if (navTarget.slideCount <= navTarget.options.slidesToShow) {\r\n        navTarget.setSlideClasses(_.currentSlide);\r\n      }\r\n    }\r\n\r\n    _.updateDots();\r\n\r\n    _.updateArrows();\r\n\r\n    if (_.options.fade === true) {\r\n      if (dontAnimate !== true) {\r\n        _.fadeSlideOut(oldSlide);\r\n\r\n        _.fadeSlide(animSlide, function () {\r\n          _.postSlide(animSlide);\r\n        });\r\n      } else {\r\n        _.postSlide(animSlide);\r\n      }\r\n\r\n      _.animateHeight();\r\n\r\n      return;\r\n    }\r\n\r\n    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n      _.animateSlide(targetLeft, function () {\r\n        _.postSlide(animSlide);\r\n      });\r\n    } else {\r\n      _.postSlide(animSlide);\r\n    }\r\n  };\r\n\r\n  Slick.prototype.startLoad = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$prevArrow.hide();\r\n\r\n      _.$nextArrow.hide();\r\n    }\r\n\r\n    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n      _.$dots.hide();\r\n    }\r\n\r\n    _.$slider.addClass('slick-loading');\r\n  };\r\n\r\n  Slick.prototype.swipeDirection = function () {\r\n    var xDist,\r\n        yDist,\r\n        r,\r\n        swipeAngle,\r\n        _ = this;\r\n\r\n    xDist = _.touchObject.startX - _.touchObject.curX;\r\n    yDist = _.touchObject.startY - _.touchObject.curY;\r\n    r = Math.atan2(yDist, xDist);\r\n    swipeAngle = Math.round(r * 180 / Math.PI);\r\n\r\n    if (swipeAngle < 0) {\r\n      swipeAngle = 360 - Math.abs(swipeAngle);\r\n    }\r\n\r\n    if (swipeAngle <= 45 && swipeAngle >= 0) {\r\n      return _.options.rtl === false ? 'left' : 'right';\r\n    }\r\n\r\n    if (swipeAngle <= 360 && swipeAngle >= 315) {\r\n      return _.options.rtl === false ? 'left' : 'right';\r\n    }\r\n\r\n    if (swipeAngle >= 135 && swipeAngle <= 225) {\r\n      return _.options.rtl === false ? 'right' : 'left';\r\n    }\r\n\r\n    if (_.options.verticalSwiping === true) {\r\n      if (swipeAngle >= 35 && swipeAngle <= 135) {\r\n        return 'down';\r\n      } else {\r\n        return 'up';\r\n      }\r\n    }\r\n\r\n    return 'vertical';\r\n  };\r\n\r\n  Slick.prototype.swipeEnd = function (event) {\r\n    var _ = this,\r\n        slideCount,\r\n        direction;\r\n\r\n    _.dragging = false;\r\n    _.swiping = false;\r\n\r\n    if (_.scrolling) {\r\n      _.scrolling = false;\r\n      return false;\r\n    }\r\n\r\n    _.interrupted = false;\r\n    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;\r\n\r\n    if (_.touchObject.curX === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (_.touchObject.edgeHit === true) {\r\n      _.$slider.trigger('edge', [_, _.swipeDirection()]);\r\n    }\r\n\r\n    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {\r\n      direction = _.swipeDirection();\r\n\r\n      switch (direction) {\r\n        case 'left':\r\n        case 'down':\r\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();\r\n          _.currentDirection = 0;\r\n          break;\r\n\r\n        case 'right':\r\n        case 'up':\r\n          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();\r\n          _.currentDirection = 1;\r\n          break;\r\n\r\n        default:\r\n      }\r\n\r\n      if (direction != 'vertical') {\r\n        _.slideHandler(slideCount);\r\n\r\n        _.touchObject = {};\r\n\r\n        _.$slider.trigger('swipe', [_, direction]);\r\n      }\r\n    } else {\r\n      if (_.touchObject.startX !== _.touchObject.curX) {\r\n        _.slideHandler(_.currentSlide);\r\n\r\n        _.touchObject = {};\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.swipeHandler = function (event) {\r\n    var _ = this;\r\n\r\n    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {\r\n      return;\r\n    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\r\n      return;\r\n    }\r\n\r\n    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;\r\n    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;\r\n\r\n    if (_.options.verticalSwiping === true) {\r\n      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;\r\n    }\r\n\r\n    switch (event.data.action) {\r\n      case 'start':\r\n        _.swipeStart(event);\r\n\r\n        break;\r\n\r\n      case 'move':\r\n        _.swipeMove(event);\r\n\r\n        break;\r\n\r\n      case 'end':\r\n        _.swipeEnd(event);\r\n\r\n        break;\r\n    }\r\n  };\r\n\r\n  Slick.prototype.swipeMove = function (event) {\r\n    var _ = this,\r\n        edgeWasHit = false,\r\n        curLeft,\r\n        swipeDirection,\r\n        swipeLength,\r\n        positionOffset,\r\n        touches,\r\n        verticalSwipeLength;\r\n\r\n    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\r\n\r\n    if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    curLeft = _.getLeft(_.currentSlide);\r\n    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\r\n    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\r\n    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\r\n    verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\r\n\r\n    if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\r\n      _.scrolling = true;\r\n      return false;\r\n    }\r\n\r\n    if (_.options.verticalSwiping === true) {\r\n      _.touchObject.swipeLength = verticalSwipeLength;\r\n    }\r\n\r\n    swipeDirection = _.swipeDirection();\r\n\r\n    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\r\n      _.swiping = true;\r\n      event.preventDefault();\r\n    }\r\n\r\n    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\r\n\r\n    if (_.options.verticalSwiping === true) {\r\n      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\r\n    }\r\n\r\n    swipeLength = _.touchObject.swipeLength;\r\n    _.touchObject.edgeHit = false;\r\n\r\n    if (_.options.infinite === false) {\r\n      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {\r\n        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\r\n        _.touchObject.edgeHit = true;\r\n      }\r\n    }\r\n\r\n    if (_.options.vertical === false) {\r\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n    } else {\r\n      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;\r\n    }\r\n\r\n    if (_.options.verticalSwiping === true) {\r\n      _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n    }\r\n\r\n    if (_.options.fade === true || _.options.touchMove === false) {\r\n      return false;\r\n    }\r\n\r\n    if (_.animating === true) {\r\n      _.swipeLeft = null;\r\n      return false;\r\n    }\r\n\r\n    _.setCSS(_.swipeLeft);\r\n  };\r\n\r\n  Slick.prototype.swipeStart = function (event) {\r\n    var _ = this,\r\n        touches;\r\n\r\n    _.interrupted = true;\r\n\r\n    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\r\n      _.touchObject = {};\r\n      return false;\r\n    }\r\n\r\n    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\r\n      touches = event.originalEvent.touches[0];\r\n    }\r\n\r\n    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\r\n    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\r\n    _.dragging = true;\r\n  };\r\n\r\n  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {\r\n    var _ = this;\r\n\r\n    if (_.$slidesCache !== null) {\r\n      _.unload();\r\n\r\n      _.$slideTrack.children(this.options.slide).detach();\r\n\r\n      _.$slidesCache.appendTo(_.$slideTrack);\r\n\r\n      _.reinit();\r\n    }\r\n  };\r\n\r\n  Slick.prototype.unload = function () {\r\n    var _ = this;\r\n\r\n    $('.slick-cloned', _.$slider).remove();\r\n\r\n    if (_.$dots) {\r\n      _.$dots.remove();\r\n    }\r\n\r\n    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\r\n      _.$prevArrow.remove();\r\n    }\r\n\r\n    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\r\n      _.$nextArrow.remove();\r\n    }\r\n\r\n    _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');\r\n  };\r\n\r\n  Slick.prototype.unslick = function (fromBreakpoint) {\r\n    var _ = this;\r\n\r\n    _.$slider.trigger('unslick', [_, fromBreakpoint]);\r\n\r\n    _.destroy();\r\n  };\r\n\r\n  Slick.prototype.updateArrows = function () {\r\n    var _ = this,\r\n        centerOffset;\r\n\r\n    centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {\r\n      _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n      _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n      if (_.currentSlide === 0) {\r\n        _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n\r\n        _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\r\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n\r\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\r\n        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n\r\n        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n      }\r\n    }\r\n  };\r\n\r\n  Slick.prototype.updateDots = function () {\r\n    var _ = this;\r\n\r\n    if (_.$dots !== null) {\r\n      _.$dots.find('li').removeClass('slick-active').end();\r\n\r\n      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');\r\n    }\r\n  };\r\n\r\n  Slick.prototype.visibility = function () {\r\n    var _ = this;\r\n\r\n    if (_.options.autoplay) {\r\n      if (document[_.hidden]) {\r\n        _.interrupted = true;\r\n      } else {\r\n        _.interrupted = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  $.fn.slick = function () {\r\n    var _ = this,\r\n        opt = arguments[0],\r\n        args = Array.prototype.slice.call(arguments, 1),\r\n        l = _.length,\r\n        i,\r\n        ret;\r\n\r\n    for (i = 0; i < l; i++) {\r\n      if (_typeof(opt) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);\r\n      if (typeof ret != 'undefined') return ret;\r\n    }\r\n\r\n    return _;\r\n  };\r\n});\n\n//# sourceURL=webpack://rks/./src/js/slick.min.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/slick.min.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;