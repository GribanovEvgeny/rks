/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/imask.js":
/*!*************************!*\
  !*** ./src/js/imask.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.IMask = {}));\r\n})(undefined, (function (exports) { 'use strict';\r\n\r\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n\r\n\tvar check = function (it) {\r\n\t  return it && it.Math == Math && it;\r\n\t}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\r\n\r\n\r\n\tvar global$p = // eslint-disable-next-line es/no-global-this -- safe\r\n\tcheck(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe\r\n\tcheck(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback\r\n\tfunction () {\r\n\t  return this;\r\n\t}() || Function('return this')();\r\n\r\n\tvar objectGetOwnPropertyDescriptor = {};\r\n\r\n\tvar fails$8 = function (exec) {\r\n\t  try {\r\n\t    return !!exec();\r\n\t  } catch (error) {\r\n\t    return true;\r\n\t  }\r\n\t};\r\n\r\n\tvar fails$7 = fails$8; // Detect IE8's incomplete defineProperty implementation\r\n\r\n\r\n\tvar descriptors = !fails$7(function () {\r\n\t  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\r\n\t  return Object.defineProperty({}, 1, {\r\n\t    get: function () {\r\n\t      return 7;\r\n\t    }\r\n\t  })[1] != 7;\r\n\t});\r\n\r\n\tvar fails$6 = fails$8;\r\n\r\n\tvar functionBindNative = !fails$6(function () {\r\n\t  var test = function () {\r\n\t    /* empty */\r\n\t  }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe\r\n\r\n\r\n\t  return typeof test != 'function' || test.hasOwnProperty('prototype');\r\n\t});\r\n\r\n\tvar NATIVE_BIND$1 = functionBindNative;\r\n\r\n\tvar call$5 = Function.prototype.call;\r\n\tvar functionCall = NATIVE_BIND$1 ? call$5.bind(call$5) : function () {\r\n\t  return call$5.apply(call$5, arguments);\r\n\t};\r\n\r\n\tvar objectPropertyIsEnumerable = {};\r\n\r\n\tvar $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\r\n\r\n\tvar getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug\r\n\r\n\tvar NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({\r\n\t  1: 2\r\n\t}, 1); // `Object.prototype.propertyIsEnumerable` method implementation\r\n\t// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\r\n\r\n\tobjectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\r\n\t  var descriptor = getOwnPropertyDescriptor$1(this, V);\r\n\t  return !!descriptor && descriptor.enumerable;\r\n\t} : $propertyIsEnumerable;\r\n\r\n\tvar createPropertyDescriptor$2 = function (bitmap, value) {\r\n\t  return {\r\n\t    enumerable: !(bitmap & 1),\r\n\t    configurable: !(bitmap & 2),\r\n\t    writable: !(bitmap & 4),\r\n\t    value: value\r\n\t  };\r\n\t};\r\n\r\n\tvar NATIVE_BIND = functionBindNative;\r\n\r\n\tvar FunctionPrototype$1 = Function.prototype;\r\n\tvar bind = FunctionPrototype$1.bind;\r\n\tvar call$4 = FunctionPrototype$1.call;\r\n\tvar uncurryThis$b = NATIVE_BIND && bind.bind(call$4, call$4);\r\n\tvar functionUncurryThis = NATIVE_BIND ? function (fn) {\r\n\t  return fn && uncurryThis$b(fn);\r\n\t} : function (fn) {\r\n\t  return fn && function () {\r\n\t    return call$4.apply(fn, arguments);\r\n\t  };\r\n\t};\r\n\r\n\tvar uncurryThis$a = functionUncurryThis;\r\n\r\n\tvar toString$4 = uncurryThis$a({}.toString);\r\n\tvar stringSlice$1 = uncurryThis$a(''.slice);\r\n\r\n\tvar classofRaw$1 = function (it) {\r\n\t  return stringSlice$1(toString$4(it), 8, -1);\r\n\t};\r\n\r\n\tvar global$o = global$p;\r\n\r\n\tvar uncurryThis$9 = functionUncurryThis;\r\n\r\n\tvar fails$5 = fails$8;\r\n\r\n\tvar classof$2 = classofRaw$1;\r\n\r\n\tvar Object$4 = global$o.Object;\r\n\tvar split = uncurryThis$9(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings\r\n\r\n\tvar indexedObject = fails$5(function () {\r\n\t  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\r\n\t  // eslint-disable-next-line no-prototype-builtins -- safe\r\n\t  return !Object$4('z').propertyIsEnumerable(0);\r\n\t}) ? function (it) {\r\n\t  return classof$2(it) == 'String' ? split(it, '') : Object$4(it);\r\n\t} : Object$4;\r\n\r\n\tvar global$n = global$p;\r\n\r\n\tvar TypeError$7 = global$n.TypeError; // `RequireObjectCoercible` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-requireobjectcoercible\r\n\r\n\tvar requireObjectCoercible$4 = function (it) {\r\n\t  if (it == undefined) throw TypeError$7(\"Can't call method on \" + it);\r\n\t  return it;\r\n\t};\r\n\r\n\t// toObject with fallback for non-array-like ES3 strings\r\n\tvar IndexedObject$1 = indexedObject;\r\n\r\n\tvar requireObjectCoercible$3 = requireObjectCoercible$4;\r\n\r\n\tvar toIndexedObject$3 = function (it) {\r\n\t  return IndexedObject$1(requireObjectCoercible$3(it));\r\n\t};\r\n\r\n\t// `IsCallable` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-iscallable\r\n\tvar isCallable$a = function (argument) {\r\n\t  return typeof argument == 'function';\r\n\t};\r\n\r\n\tvar isCallable$9 = isCallable$a;\r\n\r\n\tvar isObject$5 = function (it) {\r\n\t  return typeof it == 'object' ? it !== null : isCallable$9(it);\r\n\t};\r\n\r\n\tvar global$m = global$p;\r\n\r\n\tvar isCallable$8 = isCallable$a;\r\n\r\n\tvar aFunction = function (argument) {\r\n\t  return isCallable$8(argument) ? argument : undefined;\r\n\t};\r\n\r\n\tvar getBuiltIn$3 = function (namespace, method) {\r\n\t  return arguments.length < 2 ? aFunction(global$m[namespace]) : global$m[namespace] && global$m[namespace][method];\r\n\t};\r\n\r\n\tvar uncurryThis$8 = functionUncurryThis;\r\n\r\n\tvar objectIsPrototypeOf = uncurryThis$8({}.isPrototypeOf);\r\n\r\n\tvar getBuiltIn$2 = getBuiltIn$3;\r\n\r\n\tvar engineUserAgent = getBuiltIn$2('navigator', 'userAgent') || '';\r\n\r\n\tvar global$l = global$p;\r\n\r\n\tvar userAgent$1 = engineUserAgent;\r\n\r\n\tvar process = global$l.process;\r\n\tvar Deno = global$l.Deno;\r\n\tvar versions = process && process.versions || Deno && Deno.version;\r\n\tvar v8 = versions && versions.v8;\r\n\tvar match, version;\r\n\r\n\tif (v8) {\r\n\t  match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10\r\n\t  // but their correct versions are not interesting for us\r\n\r\n\t  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\r\n\t} // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\r\n\t// so check `userAgent` even if `.v8` exists, but 0\r\n\r\n\r\n\tif (!version && userAgent$1) {\r\n\t  match = userAgent$1.match(/Edge\\/(\\d+)/);\r\n\r\n\t  if (!match || match[1] >= 74) {\r\n\t    match = userAgent$1.match(/Chrome\\/(\\d+)/);\r\n\t    if (match) version = +match[1];\r\n\t  }\r\n\t}\r\n\r\n\tvar engineV8Version = version;\r\n\r\n\t/* eslint-disable es/no-symbol -- required for testing */\r\n\r\n\tvar V8_VERSION = engineV8Version;\r\n\r\n\tvar fails$4 = fails$8; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\r\n\r\n\r\n\tvar nativeSymbol = !!Object.getOwnPropertySymbols && !fails$4(function () {\r\n\t  var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion\r\n\t  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\r\n\r\n\t  return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\r\n\t  !Symbol.sham && V8_VERSION && V8_VERSION < 41;\r\n\t});\r\n\r\n\t/* eslint-disable es/no-symbol -- required for testing */\r\n\r\n\tvar NATIVE_SYMBOL$1 = nativeSymbol;\r\n\r\n\tvar useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && typeof Symbol.iterator == 'symbol';\r\n\r\n\tvar global$k = global$p;\r\n\r\n\tvar getBuiltIn$1 = getBuiltIn$3;\r\n\r\n\tvar isCallable$7 = isCallable$a;\r\n\r\n\tvar isPrototypeOf = objectIsPrototypeOf;\r\n\r\n\tvar USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\r\n\r\n\tvar Object$3 = global$k.Object;\r\n\tvar isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {\r\n\t  return typeof it == 'symbol';\r\n\t} : function (it) {\r\n\t  var $Symbol = getBuiltIn$1('Symbol');\r\n\t  return isCallable$7($Symbol) && isPrototypeOf($Symbol.prototype, Object$3(it));\r\n\t};\r\n\r\n\tvar global$j = global$p;\r\n\r\n\tvar String$3 = global$j.String;\r\n\r\n\tvar tryToString$1 = function (argument) {\r\n\t  try {\r\n\t    return String$3(argument);\r\n\t  } catch (error) {\r\n\t    return 'Object';\r\n\t  }\r\n\t};\r\n\r\n\tvar global$i = global$p;\r\n\r\n\tvar isCallable$6 = isCallable$a;\r\n\r\n\tvar tryToString = tryToString$1;\r\n\r\n\tvar TypeError$6 = global$i.TypeError; // `Assert: IsCallable(argument) is true`\r\n\r\n\tvar aCallable$1 = function (argument) {\r\n\t  if (isCallable$6(argument)) return argument;\r\n\t  throw TypeError$6(tryToString(argument) + ' is not a function');\r\n\t};\r\n\r\n\tvar aCallable = aCallable$1; // `GetMethod` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-getmethod\r\n\r\n\r\n\tvar getMethod$1 = function (V, P) {\r\n\t  var func = V[P];\r\n\t  return func == null ? undefined : aCallable(func);\r\n\t};\r\n\r\n\tvar global$h = global$p;\r\n\r\n\tvar call$3 = functionCall;\r\n\r\n\tvar isCallable$5 = isCallable$a;\r\n\r\n\tvar isObject$4 = isObject$5;\r\n\r\n\tvar TypeError$5 = global$h.TypeError; // `OrdinaryToPrimitive` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-ordinarytoprimitive\r\n\r\n\tvar ordinaryToPrimitive$1 = function (input, pref) {\r\n\t  var fn, val;\r\n\t  if (pref === 'string' && isCallable$5(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;\r\n\t  if (isCallable$5(fn = input.valueOf) && !isObject$4(val = call$3(fn, input))) return val;\r\n\t  if (pref !== 'string' && isCallable$5(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;\r\n\t  throw TypeError$5(\"Can't convert object to primitive value\");\r\n\t};\r\n\r\n\tvar shared$3 = {exports: {}};\r\n\r\n\tvar global$g = global$p; // eslint-disable-next-line es/no-object-defineproperty -- safe\r\n\r\n\r\n\tvar defineProperty$1 = Object.defineProperty;\r\n\r\n\tvar setGlobal$3 = function (key, value) {\r\n\t  try {\r\n\t    defineProperty$1(global$g, key, {\r\n\t      value: value,\r\n\t      configurable: true,\r\n\t      writable: true\r\n\t    });\r\n\t  } catch (error) {\r\n\t    global$g[key] = value;\r\n\t  }\r\n\r\n\t  return value;\r\n\t};\r\n\r\n\tvar global$f = global$p;\r\n\r\n\tvar setGlobal$2 = setGlobal$3;\r\n\r\n\tvar SHARED = '__core-js_shared__';\r\n\tvar store$3 = global$f[SHARED] || setGlobal$2(SHARED, {});\r\n\tvar sharedStore = store$3;\r\n\r\n\tvar store$2 = sharedStore;\r\n\r\n\t(shared$3.exports = function (key, value) {\r\n\t  return store$2[key] || (store$2[key] = value !== undefined ? value : {});\r\n\t})('versions', []).push({\r\n\t  version: '3.21.0',\r\n\t  mode: 'global',\r\n\t  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',\r\n\t  license: 'https://github.com/zloirock/core-js/blob/v3.21.0/LICENSE',\r\n\t  source: 'https://github.com/zloirock/core-js'\r\n\t});\r\n\r\n\tvar global$e = global$p;\r\n\r\n\tvar requireObjectCoercible$2 = requireObjectCoercible$4;\r\n\r\n\tvar Object$2 = global$e.Object; // `ToObject` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-toobject\r\n\r\n\tvar toObject$2 = function (argument) {\r\n\t  return Object$2(requireObjectCoercible$2(argument));\r\n\t};\r\n\r\n\tvar uncurryThis$7 = functionUncurryThis;\r\n\r\n\tvar toObject$1 = toObject$2;\r\n\r\n\tvar hasOwnProperty = uncurryThis$7({}.hasOwnProperty); // `HasOwnProperty` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-hasownproperty\r\n\r\n\tvar hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {\r\n\t  return hasOwnProperty(toObject$1(it), key);\r\n\t};\r\n\r\n\tvar uncurryThis$6 = functionUncurryThis;\r\n\r\n\tvar id = 0;\r\n\tvar postfix = Math.random();\r\n\tvar toString$3 = uncurryThis$6(1.0.toString);\r\n\r\n\tvar uid$2 = function (key) {\r\n\t  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$3(++id + postfix, 36);\r\n\t};\r\n\r\n\tvar global$d = global$p;\r\n\r\n\tvar shared$2 = shared$3.exports;\r\n\r\n\tvar hasOwn$6 = hasOwnProperty_1;\r\n\r\n\tvar uid$1 = uid$2;\r\n\r\n\tvar NATIVE_SYMBOL = nativeSymbol;\r\n\r\n\tvar USE_SYMBOL_AS_UID = useSymbolAsUid;\r\n\r\n\tvar WellKnownSymbolsStore = shared$2('wks');\r\n\tvar Symbol$1 = global$d.Symbol;\r\n\tvar symbolFor = Symbol$1 && Symbol$1['for'];\r\n\tvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;\r\n\r\n\tvar wellKnownSymbol$3 = function (name) {\r\n\t  if (!hasOwn$6(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\r\n\t    var description = 'Symbol.' + name;\r\n\r\n\t    if (NATIVE_SYMBOL && hasOwn$6(Symbol$1, name)) {\r\n\t      WellKnownSymbolsStore[name] = Symbol$1[name];\r\n\t    } else if (USE_SYMBOL_AS_UID && symbolFor) {\r\n\t      WellKnownSymbolsStore[name] = symbolFor(description);\r\n\t    } else {\r\n\t      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);\r\n\t    }\r\n\t  }\r\n\r\n\t  return WellKnownSymbolsStore[name];\r\n\t};\r\n\r\n\tvar global$c = global$p;\r\n\r\n\tvar call$2 = functionCall;\r\n\r\n\tvar isObject$3 = isObject$5;\r\n\r\n\tvar isSymbol$1 = isSymbol$2;\r\n\r\n\tvar getMethod = getMethod$1;\r\n\r\n\tvar ordinaryToPrimitive = ordinaryToPrimitive$1;\r\n\r\n\tvar wellKnownSymbol$2 = wellKnownSymbol$3;\r\n\r\n\tvar TypeError$4 = global$c.TypeError;\r\n\tvar TO_PRIMITIVE = wellKnownSymbol$2('toPrimitive'); // `ToPrimitive` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-toprimitive\r\n\r\n\tvar toPrimitive$1 = function (input, pref) {\r\n\t  if (!isObject$3(input) || isSymbol$1(input)) return input;\r\n\t  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\r\n\t  var result;\r\n\r\n\t  if (exoticToPrim) {\r\n\t    if (pref === undefined) pref = 'default';\r\n\t    result = call$2(exoticToPrim, input, pref);\r\n\t    if (!isObject$3(result) || isSymbol$1(result)) return result;\r\n\t    throw TypeError$4(\"Can't convert object to primitive value\");\r\n\t  }\r\n\r\n\t  if (pref === undefined) pref = 'number';\r\n\t  return ordinaryToPrimitive(input, pref);\r\n\t};\r\n\r\n\tvar toPrimitive = toPrimitive$1;\r\n\r\n\tvar isSymbol = isSymbol$2; // `ToPropertyKey` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-topropertykey\r\n\r\n\r\n\tvar toPropertyKey$2 = function (argument) {\r\n\t  var key = toPrimitive(argument, 'string');\r\n\t  return isSymbol(key) ? key : key + '';\r\n\t};\r\n\r\n\tvar global$b = global$p;\r\n\r\n\tvar isObject$2 = isObject$5;\r\n\r\n\tvar document$1 = global$b.document; // typeof document.createElement is 'object' in old IE\r\n\r\n\tvar EXISTS$1 = isObject$2(document$1) && isObject$2(document$1.createElement);\r\n\r\n\tvar documentCreateElement = function (it) {\r\n\t  return EXISTS$1 ? document$1.createElement(it) : {};\r\n\t};\r\n\r\n\tvar DESCRIPTORS$6 = descriptors;\r\n\r\n\tvar fails$3 = fails$8;\r\n\r\n\tvar createElement = documentCreateElement; // Thanks to IE8 for its funny defineProperty\r\n\r\n\r\n\tvar ie8DomDefine = !DESCRIPTORS$6 && !fails$3(function () {\r\n\t  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\r\n\t  return Object.defineProperty(createElement('div'), 'a', {\r\n\t    get: function () {\r\n\t      return 7;\r\n\t    }\r\n\t  }).a != 7;\r\n\t});\r\n\r\n\tvar DESCRIPTORS$5 = descriptors;\r\n\r\n\tvar call$1 = functionCall;\r\n\r\n\tvar propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;\r\n\r\n\tvar createPropertyDescriptor$1 = createPropertyDescriptor$2;\r\n\r\n\tvar toIndexedObject$2 = toIndexedObject$3;\r\n\r\n\tvar toPropertyKey$1 = toPropertyKey$2;\r\n\r\n\tvar hasOwn$5 = hasOwnProperty_1;\r\n\r\n\tvar IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\r\n\r\n\r\n\tvar $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method\r\n\t// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\r\n\r\n\tobjectGetOwnPropertyDescriptor.f = DESCRIPTORS$5 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {\r\n\t  O = toIndexedObject$2(O);\r\n\t  P = toPropertyKey$1(P);\r\n\t  if (IE8_DOM_DEFINE$1) try {\r\n\t    return $getOwnPropertyDescriptor$1(O, P);\r\n\t  } catch (error) {\r\n\t    /* empty */\r\n\t  }\r\n\t  if (hasOwn$5(O, P)) return createPropertyDescriptor$1(!call$1(propertyIsEnumerableModule$1.f, O, P), O[P]);\r\n\t};\r\n\r\n\tvar objectDefineProperty = {};\r\n\r\n\tvar DESCRIPTORS$4 = descriptors;\r\n\r\n\tvar fails$2 = fails$8; // V8 ~ Chrome 36-\r\n\t// https://bugs.chromium.org/p/v8/issues/detail?id=3334\r\n\r\n\r\n\tvar v8PrototypeDefineBug = DESCRIPTORS$4 && fails$2(function () {\r\n\t  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\r\n\t  return Object.defineProperty(function () {\r\n\t    /* empty */\r\n\t  }, 'prototype', {\r\n\t    value: 42,\r\n\t    writable: false\r\n\t  }).prototype != 42;\r\n\t});\r\n\r\n\tvar global$a = global$p;\r\n\r\n\tvar isObject$1 = isObject$5;\r\n\r\n\tvar String$2 = global$a.String;\r\n\tvar TypeError$3 = global$a.TypeError; // `Assert: Type(argument) is Object`\r\n\r\n\tvar anObject$2 = function (argument) {\r\n\t  if (isObject$1(argument)) return argument;\r\n\t  throw TypeError$3(String$2(argument) + ' is not an object');\r\n\t};\r\n\r\n\tvar global$9 = global$p;\r\n\r\n\tvar DESCRIPTORS$3 = descriptors;\r\n\r\n\tvar IE8_DOM_DEFINE = ie8DomDefine;\r\n\r\n\tvar V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;\r\n\r\n\tvar anObject$1 = anObject$2;\r\n\r\n\tvar toPropertyKey = toPropertyKey$2;\r\n\r\n\tvar TypeError$2 = global$9.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe\r\n\r\n\tvar $defineProperty = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\r\n\r\n\tvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n\tvar ENUMERABLE = 'enumerable';\r\n\tvar CONFIGURABLE$1 = 'configurable';\r\n\tvar WRITABLE = 'writable'; // `Object.defineProperty` method\r\n\t// https://tc39.es/ecma262/#sec-object.defineproperty\r\n\r\n\tobjectDefineProperty.f = DESCRIPTORS$3 ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\r\n\t  anObject$1(O);\r\n\t  P = toPropertyKey(P);\r\n\t  anObject$1(Attributes);\r\n\r\n\t  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\r\n\t    var current = $getOwnPropertyDescriptor(O, P);\r\n\r\n\t    if (current && current[WRITABLE]) {\r\n\t      O[P] = Attributes.value;\r\n\t      Attributes = {\r\n\t        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],\r\n\t        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\r\n\t        writable: false\r\n\t      };\r\n\t    }\r\n\t  }\r\n\r\n\t  return $defineProperty(O, P, Attributes);\r\n\t} : $defineProperty : function defineProperty(O, P, Attributes) {\r\n\t  anObject$1(O);\r\n\t  P = toPropertyKey(P);\r\n\t  anObject$1(Attributes);\r\n\t  if (IE8_DOM_DEFINE) try {\r\n\t    return $defineProperty(O, P, Attributes);\r\n\t  } catch (error) {\r\n\t    /* empty */\r\n\t  }\r\n\t  if ('get' in Attributes || 'set' in Attributes) throw TypeError$2('Accessors not supported');\r\n\t  if ('value' in Attributes) O[P] = Attributes.value;\r\n\t  return O;\r\n\t};\r\n\r\n\tvar DESCRIPTORS$2 = descriptors;\r\n\r\n\tvar definePropertyModule$1 = objectDefineProperty;\r\n\r\n\tvar createPropertyDescriptor = createPropertyDescriptor$2;\r\n\r\n\tvar createNonEnumerableProperty$3 = DESCRIPTORS$2 ? function (object, key, value) {\r\n\t  return definePropertyModule$1.f(object, key, createPropertyDescriptor(1, value));\r\n\t} : function (object, key, value) {\r\n\t  object[key] = value;\r\n\t  return object;\r\n\t};\r\n\r\n\tvar redefine$1 = {exports: {}};\r\n\r\n\tvar uncurryThis$5 = functionUncurryThis;\r\n\r\n\tvar isCallable$4 = isCallable$a;\r\n\r\n\tvar store$1 = sharedStore;\r\n\r\n\tvar functionToString = uncurryThis$5(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\r\n\r\n\tif (!isCallable$4(store$1.inspectSource)) {\r\n\t  store$1.inspectSource = function (it) {\r\n\t    return functionToString(it);\r\n\t  };\r\n\t}\r\n\r\n\tvar inspectSource$2 = store$1.inspectSource;\r\n\r\n\tvar global$8 = global$p;\r\n\r\n\tvar isCallable$3 = isCallable$a;\r\n\r\n\tvar inspectSource$1 = inspectSource$2;\r\n\r\n\tvar WeakMap$1 = global$8.WeakMap;\r\n\tvar nativeWeakMap = isCallable$3(WeakMap$1) && /native code/.test(inspectSource$1(WeakMap$1));\r\n\r\n\tvar shared$1 = shared$3.exports;\r\n\r\n\tvar uid = uid$2;\r\n\r\n\tvar keys = shared$1('keys');\r\n\r\n\tvar sharedKey$1 = function (key) {\r\n\t  return keys[key] || (keys[key] = uid(key));\r\n\t};\r\n\r\n\tvar hiddenKeys$3 = {};\r\n\r\n\tvar NATIVE_WEAK_MAP = nativeWeakMap;\r\n\r\n\tvar global$7 = global$p;\r\n\r\n\tvar uncurryThis$4 = functionUncurryThis;\r\n\r\n\tvar isObject = isObject$5;\r\n\r\n\tvar createNonEnumerableProperty$2 = createNonEnumerableProperty$3;\r\n\r\n\tvar hasOwn$4 = hasOwnProperty_1;\r\n\r\n\tvar shared = sharedStore;\r\n\r\n\tvar sharedKey = sharedKey$1;\r\n\r\n\tvar hiddenKeys$2 = hiddenKeys$3;\r\n\r\n\tvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\r\n\tvar TypeError$1 = global$7.TypeError;\r\n\tvar WeakMap = global$7.WeakMap;\r\n\tvar set$1, get, has;\r\n\r\n\tvar enforce = function (it) {\r\n\t  return has(it) ? get(it) : set$1(it, {});\r\n\t};\r\n\r\n\tvar getterFor = function (TYPE) {\r\n\t  return function (it) {\r\n\t    var state;\r\n\r\n\t    if (!isObject(it) || (state = get(it)).type !== TYPE) {\r\n\t      throw TypeError$1('Incompatible receiver, ' + TYPE + ' required');\r\n\t    }\r\n\r\n\t    return state;\r\n\t  };\r\n\t};\r\n\r\n\tif (NATIVE_WEAK_MAP || shared.state) {\r\n\t  var store = shared.state || (shared.state = new WeakMap());\r\n\t  var wmget = uncurryThis$4(store.get);\r\n\t  var wmhas = uncurryThis$4(store.has);\r\n\t  var wmset = uncurryThis$4(store.set);\r\n\r\n\t  set$1 = function (it, metadata) {\r\n\t    if (wmhas(store, it)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);\r\n\t    metadata.facade = it;\r\n\t    wmset(store, it, metadata);\r\n\t    return metadata;\r\n\t  };\r\n\r\n\t  get = function (it) {\r\n\t    return wmget(store, it) || {};\r\n\t  };\r\n\r\n\t  has = function (it) {\r\n\t    return wmhas(store, it);\r\n\t  };\r\n\t} else {\r\n\t  var STATE = sharedKey('state');\r\n\t  hiddenKeys$2[STATE] = true;\r\n\r\n\t  set$1 = function (it, metadata) {\r\n\t    if (hasOwn$4(it, STATE)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);\r\n\t    metadata.facade = it;\r\n\t    createNonEnumerableProperty$2(it, STATE, metadata);\r\n\t    return metadata;\r\n\t  };\r\n\r\n\t  get = function (it) {\r\n\t    return hasOwn$4(it, STATE) ? it[STATE] : {};\r\n\t  };\r\n\r\n\t  has = function (it) {\r\n\t    return hasOwn$4(it, STATE);\r\n\t  };\r\n\t}\r\n\r\n\tvar internalState = {\r\n\t  set: set$1,\r\n\t  get: get,\r\n\t  has: has,\r\n\t  enforce: enforce,\r\n\t  getterFor: getterFor\r\n\t};\r\n\r\n\tvar DESCRIPTORS$1 = descriptors;\r\n\r\n\tvar hasOwn$3 = hasOwnProperty_1;\r\n\r\n\tvar FunctionPrototype = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\r\n\r\n\tvar getDescriptor = DESCRIPTORS$1 && Object.getOwnPropertyDescriptor;\r\n\tvar EXISTS = hasOwn$3(FunctionPrototype, 'name'); // additional protection from minified / mangled / dropped function names\r\n\r\n\tvar PROPER = EXISTS && function something() {\r\n\t  /* empty */\r\n\t}.name === 'something';\r\n\r\n\tvar CONFIGURABLE = EXISTS && (!DESCRIPTORS$1 || DESCRIPTORS$1 && getDescriptor(FunctionPrototype, 'name').configurable);\r\n\tvar functionName = {\r\n\t  EXISTS: EXISTS,\r\n\t  PROPER: PROPER,\r\n\t  CONFIGURABLE: CONFIGURABLE\r\n\t};\r\n\r\n\tvar global$6 = global$p;\r\n\r\n\tvar isCallable$2 = isCallable$a;\r\n\r\n\tvar hasOwn$2 = hasOwnProperty_1;\r\n\r\n\tvar createNonEnumerableProperty$1 = createNonEnumerableProperty$3;\r\n\r\n\tvar setGlobal$1 = setGlobal$3;\r\n\r\n\tvar inspectSource = inspectSource$2;\r\n\r\n\tvar InternalStateModule = internalState;\r\n\r\n\tvar CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;\r\n\r\n\tvar getInternalState = InternalStateModule.get;\r\n\tvar enforceInternalState = InternalStateModule.enforce;\r\n\tvar TEMPLATE = String(String).split('String');\r\n\t(redefine$1.exports = function (O, key, value, options) {\r\n\t  var unsafe = options ? !!options.unsafe : false;\r\n\t  var simple = options ? !!options.enumerable : false;\r\n\t  var noTargetGet = options ? !!options.noTargetGet : false;\r\n\t  var name = options && options.name !== undefined ? options.name : key;\r\n\t  var state;\r\n\r\n\t  if (isCallable$2(value)) {\r\n\t    if (String(name).slice(0, 7) === 'Symbol(') {\r\n\t      name = '[' + String(name).replace(/^Symbol\\(([^)]*)\\)/, '$1') + ']';\r\n\t    }\r\n\r\n\t    if (!hasOwn$2(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {\r\n\t      createNonEnumerableProperty$1(value, 'name', name);\r\n\t    }\r\n\r\n\t    state = enforceInternalState(value);\r\n\r\n\t    if (!state.source) {\r\n\t      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');\r\n\t    }\r\n\t  }\r\n\r\n\t  if (O === global$6) {\r\n\t    if (simple) O[key] = value;else setGlobal$1(key, value);\r\n\t    return;\r\n\t  } else if (!unsafe) {\r\n\t    delete O[key];\r\n\t  } else if (!noTargetGet && O[key]) {\r\n\t    simple = true;\r\n\t  }\r\n\r\n\t  if (simple) O[key] = value;else createNonEnumerableProperty$1(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\r\n\t})(Function.prototype, 'toString', function toString() {\r\n\t  return isCallable$2(this) && getInternalState(this).source || inspectSource(this);\r\n\t});\r\n\r\n\tvar objectGetOwnPropertyNames = {};\r\n\r\n\tvar ceil$1 = Math.ceil;\r\n\tvar floor = Math.floor; // `ToIntegerOrInfinity` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-tointegerorinfinity\r\n\r\n\tvar toIntegerOrInfinity$3 = function (argument) {\r\n\t  var number = +argument; // eslint-disable-next-line no-self-compare -- safe\r\n\r\n\t  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil$1)(number);\r\n\t};\r\n\r\n\tvar toIntegerOrInfinity$2 = toIntegerOrInfinity$3;\r\n\r\n\tvar max = Math.max;\r\n\tvar min$1 = Math.min; // Helper for a popular repeating case of the spec:\r\n\t// Let integer be ? ToInteger(index).\r\n\t// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\r\n\r\n\tvar toAbsoluteIndex$1 = function (index, length) {\r\n\t  var integer = toIntegerOrInfinity$2(index);\r\n\t  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\r\n\t};\r\n\r\n\tvar toIntegerOrInfinity$1 = toIntegerOrInfinity$3;\r\n\r\n\tvar min = Math.min; // `ToLength` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-tolength\r\n\r\n\tvar toLength$2 = function (argument) {\r\n\t  return argument > 0 ? min(toIntegerOrInfinity$1(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\r\n\t};\r\n\r\n\tvar toLength$1 = toLength$2; // `LengthOfArrayLike` abstract operation\r\n\t// https://tc39.es/ecma262/#sec-lengthofarraylike\r\n\r\n\r\n\tvar lengthOfArrayLike$1 = function (obj) {\r\n\t  return toLength$1(obj.length);\r\n\t};\r\n\r\n\tvar toIndexedObject$1 = toIndexedObject$3;\r\n\r\n\tvar toAbsoluteIndex = toAbsoluteIndex$1;\r\n\r\n\tvar lengthOfArrayLike = lengthOfArrayLike$1; // `Array.prototype.{ indexOf, includes }` methods implementation\r\n\r\n\r\n\tvar createMethod$1 = function (IS_INCLUDES) {\r\n\t  return function ($this, el, fromIndex) {\r\n\t    var O = toIndexedObject$1($this);\r\n\t    var length = lengthOfArrayLike(O);\r\n\t    var index = toAbsoluteIndex(fromIndex, length);\r\n\t    var value; // Array#includes uses SameValueZero equality algorithm\r\n\t    // eslint-disable-next-line no-self-compare -- NaN check\r\n\r\n\t    if (IS_INCLUDES && el != el) while (length > index) {\r\n\t      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check\r\n\r\n\t      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\r\n\t    } else for (; length > index; index++) {\r\n\t      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\r\n\t    }\r\n\t    return !IS_INCLUDES && -1;\r\n\t  };\r\n\t};\r\n\r\n\tvar arrayIncludes = {\r\n\t  // `Array.prototype.includes` method\r\n\t  // https://tc39.es/ecma262/#sec-array.prototype.includes\r\n\t  includes: createMethod$1(true),\r\n\t  // `Array.prototype.indexOf` method\r\n\t  // https://tc39.es/ecma262/#sec-array.prototype.indexof\r\n\t  indexOf: createMethod$1(false)\r\n\t};\r\n\r\n\tvar uncurryThis$3 = functionUncurryThis;\r\n\r\n\tvar hasOwn$1 = hasOwnProperty_1;\r\n\r\n\tvar toIndexedObject = toIndexedObject$3;\r\n\r\n\tvar indexOf = arrayIncludes.indexOf;\r\n\r\n\tvar hiddenKeys$1 = hiddenKeys$3;\r\n\r\n\tvar push = uncurryThis$3([].push);\r\n\r\n\tvar objectKeysInternal = function (object, names) {\r\n\t  var O = toIndexedObject(object);\r\n\t  var i = 0;\r\n\t  var result = [];\r\n\t  var key;\r\n\r\n\t  for (key in O) !hasOwn$1(hiddenKeys$1, key) && hasOwn$1(O, key) && push(result, key); // Don't enum bug & hidden keys\r\n\r\n\r\n\t  while (names.length > i) if (hasOwn$1(O, key = names[i++])) {\r\n\t    ~indexOf(result, key) || push(result, key);\r\n\t  }\r\n\r\n\t  return result;\r\n\t};\r\n\r\n\t// IE8- don't enum bug keys\r\n\tvar enumBugKeys$2 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];\r\n\r\n\tvar internalObjectKeys$1 = objectKeysInternal;\r\n\r\n\tvar enumBugKeys$1 = enumBugKeys$2;\r\n\r\n\tvar hiddenKeys = enumBugKeys$1.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method\r\n\t// https://tc39.es/ecma262/#sec-object.getownpropertynames\r\n\t// eslint-disable-next-line es/no-object-getownpropertynames -- safe\r\n\r\n\tobjectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\r\n\t  return internalObjectKeys$1(O, hiddenKeys);\r\n\t};\r\n\r\n\tvar objectGetOwnPropertySymbols = {};\r\n\r\n\t// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\r\n\tobjectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\r\n\r\n\tvar getBuiltIn = getBuiltIn$3;\r\n\r\n\tvar uncurryThis$2 = functionUncurryThis;\r\n\r\n\tvar getOwnPropertyNamesModule = objectGetOwnPropertyNames;\r\n\r\n\tvar getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;\r\n\r\n\tvar anObject = anObject$2;\r\n\r\n\tvar concat$1 = uncurryThis$2([].concat); // all object keys, includes non-enumerable and symbols\r\n\r\n\tvar ownKeys$1 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\r\n\t  var keys = getOwnPropertyNamesModule.f(anObject(it));\r\n\t  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;\r\n\t  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;\r\n\t};\r\n\r\n\tvar hasOwn = hasOwnProperty_1;\r\n\r\n\tvar ownKeys = ownKeys$1;\r\n\r\n\tvar getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\r\n\r\n\tvar definePropertyModule = objectDefineProperty;\r\n\r\n\tvar copyConstructorProperties$1 = function (target, source, exceptions) {\r\n\t  var keys = ownKeys(source);\r\n\t  var defineProperty = definePropertyModule.f;\r\n\t  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\r\n\r\n\t  for (var i = 0; i < keys.length; i++) {\r\n\t    var key = keys[i];\r\n\r\n\t    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\r\n\t      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\tvar fails$1 = fails$8;\r\n\r\n\tvar isCallable$1 = isCallable$a;\r\n\r\n\tvar replacement = /#|\\.prototype\\./;\r\n\r\n\tvar isForced$1 = function (feature, detection) {\r\n\t  var value = data[normalize(feature)];\r\n\t  return value == POLYFILL ? true : value == NATIVE ? false : isCallable$1(detection) ? fails$1(detection) : !!detection;\r\n\t};\r\n\r\n\tvar normalize = isForced$1.normalize = function (string) {\r\n\t  return String(string).replace(replacement, '.').toLowerCase();\r\n\t};\r\n\r\n\tvar data = isForced$1.data = {};\r\n\tvar NATIVE = isForced$1.NATIVE = 'N';\r\n\tvar POLYFILL = isForced$1.POLYFILL = 'P';\r\n\tvar isForced_1 = isForced$1;\r\n\r\n\tvar global$5 = global$p;\r\n\r\n\tvar getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\r\n\r\n\tvar createNonEnumerableProperty = createNonEnumerableProperty$3;\r\n\r\n\tvar redefine = redefine$1.exports;\r\n\r\n\tvar setGlobal = setGlobal$3;\r\n\r\n\tvar copyConstructorProperties = copyConstructorProperties$1;\r\n\r\n\tvar isForced = isForced_1;\r\n\t/*\r\n\t  options.target      - name of the target object\r\n\t  options.global      - target is the global object\r\n\t  options.stat        - export as static methods of target\r\n\t  options.proto       - export as prototype methods of target\r\n\t  options.real        - real prototype method for the `pure` version\r\n\t  options.forced      - export even if the native feature is available\r\n\t  options.bind        - bind methods to the target, required for the `pure` version\r\n\t  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\r\n\t  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\r\n\t  options.sham        - add a flag to not completely full polyfills\r\n\t  options.enumerable  - export as enumerable property\r\n\t  options.noTargetGet - prevent calling a getter on target\r\n\t  options.name        - the .name of the function if it does not match the key\r\n\t*/\r\n\r\n\r\n\tvar _export = function (options, source) {\r\n\t  var TARGET = options.target;\r\n\t  var GLOBAL = options.global;\r\n\t  var STATIC = options.stat;\r\n\t  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\r\n\r\n\t  if (GLOBAL) {\r\n\t    target = global$5;\r\n\t  } else if (STATIC) {\r\n\t    target = global$5[TARGET] || setGlobal(TARGET, {});\r\n\t  } else {\r\n\t    target = (global$5[TARGET] || {}).prototype;\r\n\t  }\r\n\r\n\t  if (target) for (key in source) {\r\n\t    sourceProperty = source[key];\r\n\r\n\t    if (options.noTargetGet) {\r\n\t      descriptor = getOwnPropertyDescriptor(target, key);\r\n\t      targetProperty = descriptor && descriptor.value;\r\n\t    } else targetProperty = target[key];\r\n\r\n\t    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\r\n\r\n\t    if (!FORCED && targetProperty !== undefined) {\r\n\t      if (typeof sourceProperty == typeof targetProperty) continue;\r\n\t      copyConstructorProperties(sourceProperty, targetProperty);\r\n\t    } // add a flag to not completely full polyfills\r\n\r\n\r\n\t    if (options.sham || targetProperty && targetProperty.sham) {\r\n\t      createNonEnumerableProperty(sourceProperty, 'sham', true);\r\n\t    } // extend global\r\n\r\n\r\n\t    redefine(target, key, sourceProperty, options);\r\n\t  }\r\n\t};\r\n\r\n\tvar internalObjectKeys = objectKeysInternal;\r\n\r\n\tvar enumBugKeys = enumBugKeys$2; // `Object.keys` method\r\n\t// https://tc39.es/ecma262/#sec-object.keys\r\n\t// eslint-disable-next-line es/no-object-keys -- safe\r\n\r\n\r\n\tvar objectKeys$1 = Object.keys || function keys(O) {\r\n\t  return internalObjectKeys(O, enumBugKeys);\r\n\t};\r\n\r\n\tvar DESCRIPTORS = descriptors;\r\n\r\n\tvar uncurryThis$1 = functionUncurryThis;\r\n\r\n\tvar call = functionCall;\r\n\r\n\tvar fails = fails$8;\r\n\r\n\tvar objectKeys = objectKeys$1;\r\n\r\n\tvar getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\r\n\r\n\tvar propertyIsEnumerableModule = objectPropertyIsEnumerable;\r\n\r\n\tvar toObject = toObject$2;\r\n\r\n\tvar IndexedObject = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe\r\n\r\n\r\n\tvar $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing\r\n\r\n\tvar defineProperty = Object.defineProperty;\r\n\tvar concat = uncurryThis$1([].concat); // `Object.assign` method\r\n\t// https://tc39.es/ecma262/#sec-object.assign\r\n\r\n\tvar objectAssign = !$assign || fails(function () {\r\n\t  // should have correct order of operations (Edge bug)\r\n\t  if (DESCRIPTORS && $assign({\r\n\t    b: 1\r\n\t  }, $assign(defineProperty({}, 'a', {\r\n\t    enumerable: true,\r\n\t    get: function () {\r\n\t      defineProperty(this, 'b', {\r\n\t        value: 3,\r\n\t        enumerable: false\r\n\t      });\r\n\t    }\r\n\t  }), {\r\n\t    b: 2\r\n\t  })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)\r\n\r\n\t  var A = {};\r\n\t  var B = {}; // eslint-disable-next-line es/no-symbol -- safe\r\n\r\n\t  var symbol = Symbol();\r\n\t  var alphabet = 'abcdefghijklmnopqrst';\r\n\t  A[symbol] = 7;\r\n\t  alphabet.split('').forEach(function (chr) {\r\n\t    B[chr] = chr;\r\n\t  });\r\n\t  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;\r\n\t}) ? function assign(target, source) {\r\n\t  // eslint-disable-line no-unused-vars -- required for `.length`\r\n\t  var T = toObject(target);\r\n\t  var argumentsLength = arguments.length;\r\n\t  var index = 1;\r\n\t  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\r\n\t  var propertyIsEnumerable = propertyIsEnumerableModule.f;\r\n\r\n\t  while (argumentsLength > index) {\r\n\t    var S = IndexedObject(arguments[index++]);\r\n\t    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);\r\n\t    var length = keys.length;\r\n\t    var j = 0;\r\n\t    var key;\r\n\r\n\t    while (length > j) {\r\n\t      key = keys[j++];\r\n\t      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];\r\n\t    }\r\n\t  }\r\n\r\n\t  return T;\r\n\t} : $assign;\r\n\r\n\tvar $$4 = _export;\r\n\r\n\tvar assign = objectAssign; // `Object.assign` method\r\n\t// https://tc39.es/ecma262/#sec-object.assign\r\n\t// eslint-disable-next-line es/no-object-assign -- required for testing\r\n\r\n\r\n\t$$4({\r\n\t  target: 'Object',\r\n\t  stat: true,\r\n\t  forced: Object.assign !== assign\r\n\t}, {\r\n\t  assign: assign\r\n\t});\r\n\r\n\tvar wellKnownSymbol$1 = wellKnownSymbol$3;\r\n\r\n\tvar TO_STRING_TAG$1 = wellKnownSymbol$1('toStringTag');\r\n\tvar test = {};\r\n\ttest[TO_STRING_TAG$1] = 'z';\r\n\tvar toStringTagSupport = String(test) === '[object z]';\r\n\r\n\tvar global$4 = global$p;\r\n\r\n\tvar TO_STRING_TAG_SUPPORT = toStringTagSupport;\r\n\r\n\tvar isCallable = isCallable$a;\r\n\r\n\tvar classofRaw = classofRaw$1;\r\n\r\n\tvar wellKnownSymbol = wellKnownSymbol$3;\r\n\r\n\tvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\r\n\tvar Object$1 = global$4.Object; // ES3 wrong here\r\n\r\n\tvar CORRECT_ARGUMENTS = classofRaw(function () {\r\n\t  return arguments;\r\n\t}()) == 'Arguments'; // fallback for IE11 Script Access Denied error\r\n\r\n\tvar tryGet = function (it, key) {\r\n\t  try {\r\n\t    return it[key];\r\n\t  } catch (error) {\r\n\t    /* empty */\r\n\t  }\r\n\t}; // getting tag from ES6+ `Object.prototype.toString`\r\n\r\n\r\n\tvar classof$1 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\r\n\t  var O, tag, result;\r\n\t  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case\r\n\t  : typeof (tag = tryGet(O = Object$1(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case\r\n\t  : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback\r\n\t  : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;\r\n\t};\r\n\r\n\tvar global$3 = global$p;\r\n\r\n\tvar classof = classof$1;\r\n\r\n\tvar String$1 = global$3.String;\r\n\r\n\tvar toString$2 = function (argument) {\r\n\t  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\r\n\t  return String$1(argument);\r\n\t};\r\n\r\n\tvar global$2 = global$p;\r\n\r\n\tvar toIntegerOrInfinity = toIntegerOrInfinity$3;\r\n\r\n\tvar toString$1 = toString$2;\r\n\r\n\tvar requireObjectCoercible$1 = requireObjectCoercible$4;\r\n\r\n\tvar RangeError = global$2.RangeError; // `String.prototype.repeat` method implementation\r\n\t// https://tc39.es/ecma262/#sec-string.prototype.repeat\r\n\r\n\tvar stringRepeat = function repeat(count) {\r\n\t  var str = toString$1(requireObjectCoercible$1(this));\r\n\t  var result = '';\r\n\t  var n = toIntegerOrInfinity(count);\r\n\t  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\r\n\r\n\t  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\r\n\r\n\t  return result;\r\n\t};\r\n\r\n\tvar $$3 = _export;\r\n\r\n\tvar repeat$1 = stringRepeat; // `String.prototype.repeat` method\r\n\t// https://tc39.es/ecma262/#sec-string.prototype.repeat\r\n\r\n\r\n\t$$3({\r\n\t  target: 'String',\r\n\t  proto: true\r\n\t}, {\r\n\t  repeat: repeat$1\r\n\t});\r\n\r\n\t// https://github.com/tc39/proposal-string-pad-start-end\r\n\tvar uncurryThis = functionUncurryThis;\r\n\r\n\tvar toLength = toLength$2;\r\n\r\n\tvar toString = toString$2;\r\n\r\n\tvar $repeat = stringRepeat;\r\n\r\n\tvar requireObjectCoercible = requireObjectCoercible$4;\r\n\r\n\tvar repeat = uncurryThis($repeat);\r\n\tvar stringSlice = uncurryThis(''.slice);\r\n\tvar ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation\r\n\r\n\tvar createMethod = function (IS_END) {\r\n\t  return function ($this, maxLength, fillString) {\r\n\t    var S = toString(requireObjectCoercible($this));\r\n\t    var intMaxLength = toLength(maxLength);\r\n\t    var stringLength = S.length;\r\n\t    var fillStr = fillString === undefined ? ' ' : toString(fillString);\r\n\t    var fillLen, stringFiller;\r\n\t    if (intMaxLength <= stringLength || fillStr == '') return S;\r\n\t    fillLen = intMaxLength - stringLength;\r\n\t    stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));\r\n\t    if (stringFiller.length > fillLen) stringFiller = stringSlice(stringFiller, 0, fillLen);\r\n\t    return IS_END ? S + stringFiller : stringFiller + S;\r\n\t  };\r\n\t};\r\n\r\n\tvar stringPad = {\r\n\t  // `String.prototype.padStart` method\r\n\t  // https://tc39.es/ecma262/#sec-string.prototype.padstart\r\n\t  start: createMethod(false),\r\n\t  // `String.prototype.padEnd` method\r\n\t  // https://tc39.es/ecma262/#sec-string.prototype.padend\r\n\t  end: createMethod(true)\r\n\t};\r\n\r\n\t// https://github.com/zloirock/core-js/issues/280\r\n\tvar userAgent = engineUserAgent;\r\n\r\n\tvar stringPadWebkitBug = /Version\\/10(?:\\.\\d+){1,2}(?: [\\w./]+)?(?: Mobile\\/\\w+)? Safari\\//.test(userAgent);\r\n\r\n\tvar $$2 = _export;\r\n\r\n\tvar $padStart = stringPad.start;\r\n\r\n\tvar WEBKIT_BUG$1 = stringPadWebkitBug; // `String.prototype.padStart` method\r\n\t// https://tc39.es/ecma262/#sec-string.prototype.padstart\r\n\r\n\r\n\t$$2({\r\n\t  target: 'String',\r\n\t  proto: true,\r\n\t  forced: WEBKIT_BUG$1\r\n\t}, {\r\n\t  padStart: function padStart(maxLength\r\n\t  /* , fillString = ' ' */\r\n\t  ) {\r\n\t    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\r\n\t  }\r\n\t});\r\n\r\n\tvar $$1 = _export;\r\n\r\n\tvar $padEnd = stringPad.end;\r\n\r\n\tvar WEBKIT_BUG = stringPadWebkitBug; // `String.prototype.padEnd` method\r\n\t// https://tc39.es/ecma262/#sec-string.prototype.padend\r\n\r\n\r\n\t$$1({\r\n\t  target: 'String',\r\n\t  proto: true,\r\n\t  forced: WEBKIT_BUG\r\n\t}, {\r\n\t  padEnd: function padEnd(maxLength\r\n\t  /* , fillString = ' ' */\r\n\t  ) {\r\n\t    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\r\n\t  }\r\n\t});\r\n\r\n\tvar $ = _export;\r\n\r\n\tvar global$1 = global$p; // `globalThis` object\r\n\t// https://tc39.es/ecma262/#sec-globalthis\r\n\r\n\r\n\t$({\r\n\t  global: true\r\n\t}, {\r\n\t  globalThis: global$1\r\n\t});\r\n\r\n\tfunction _typeof(obj) {\r\n\t  \"@babel/helpers - typeof\";\r\n\r\n\t  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\r\n\t    return typeof obj;\r\n\t  } : function (obj) {\r\n\t    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n\t  }, _typeof(obj);\r\n\t}\r\n\r\n\tfunction _classCallCheck(instance, Constructor) {\r\n\t  if (!(instance instanceof Constructor)) {\r\n\t    throw new TypeError(\"Cannot call a class as a function\");\r\n\t  }\r\n\t}\r\n\r\n\tfunction _defineProperties(target, props) {\r\n\t  for (var i = 0; i < props.length; i++) {\r\n\t    var descriptor = props[i];\r\n\t    descriptor.enumerable = descriptor.enumerable || false;\r\n\t    descriptor.configurable = true;\r\n\t    if (\"value\" in descriptor) descriptor.writable = true;\r\n\t    Object.defineProperty(target, descriptor.key, descriptor);\r\n\t  }\r\n\t}\r\n\r\n\tfunction _createClass(Constructor, protoProps, staticProps) {\r\n\t  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n\t  if (staticProps) _defineProperties(Constructor, staticProps);\r\n\t  Object.defineProperty(Constructor, \"prototype\", {\r\n\t    writable: false\r\n\t  });\r\n\t  return Constructor;\r\n\t}\r\n\r\n\tfunction _defineProperty(obj, key, value) {\r\n\t  if (key in obj) {\r\n\t    Object.defineProperty(obj, key, {\r\n\t      value: value,\r\n\t      enumerable: true,\r\n\t      configurable: true,\r\n\t      writable: true\r\n\t    });\r\n\t  } else {\r\n\t    obj[key] = value;\r\n\t  }\r\n\r\n\t  return obj;\r\n\t}\r\n\r\n\tfunction _inherits(subClass, superClass) {\r\n\t  if (typeof superClass !== \"function\" && superClass !== null) {\r\n\t    throw new TypeError(\"Super expression must either be null or a function\");\r\n\t  }\r\n\r\n\t  subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n\t    constructor: {\r\n\t      value: subClass,\r\n\t      writable: true,\r\n\t      configurable: true\r\n\t    }\r\n\t  });\r\n\t  Object.defineProperty(subClass, \"prototype\", {\r\n\t    writable: false\r\n\t  });\r\n\t  if (superClass) _setPrototypeOf(subClass, superClass);\r\n\t}\r\n\r\n\tfunction _getPrototypeOf(o) {\r\n\t  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n\t    return o.__proto__ || Object.getPrototypeOf(o);\r\n\t  };\r\n\t  return _getPrototypeOf(o);\r\n\t}\r\n\r\n\tfunction _setPrototypeOf(o, p) {\r\n\t  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n\t    o.__proto__ = p;\r\n\t    return o;\r\n\t  };\r\n\r\n\t  return _setPrototypeOf(o, p);\r\n\t}\r\n\r\n\tfunction _isNativeReflectConstruct() {\r\n\t  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n\t  if (Reflect.construct.sham) return false;\r\n\t  if (typeof Proxy === \"function\") return true;\r\n\r\n\t  try {\r\n\t    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\r\n\t    return true;\r\n\t  } catch (e) {\r\n\t    return false;\r\n\t  }\r\n\t}\r\n\r\n\tfunction _objectWithoutPropertiesLoose(source, excluded) {\r\n\t  if (source == null) return {};\r\n\t  var target = {};\r\n\t  var sourceKeys = Object.keys(source);\r\n\t  var key, i;\r\n\r\n\t  for (i = 0; i < sourceKeys.length; i++) {\r\n\t    key = sourceKeys[i];\r\n\t    if (excluded.indexOf(key) >= 0) continue;\r\n\t    target[key] = source[key];\r\n\t  }\r\n\r\n\t  return target;\r\n\t}\r\n\r\n\tfunction _objectWithoutProperties(source, excluded) {\r\n\t  if (source == null) return {};\r\n\r\n\t  var target = _objectWithoutPropertiesLoose(source, excluded);\r\n\r\n\t  var key, i;\r\n\r\n\t  if (Object.getOwnPropertySymbols) {\r\n\t    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\r\n\r\n\t    for (i = 0; i < sourceSymbolKeys.length; i++) {\r\n\t      key = sourceSymbolKeys[i];\r\n\t      if (excluded.indexOf(key) >= 0) continue;\r\n\t      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\r\n\t      target[key] = source[key];\r\n\t    }\r\n\t  }\r\n\r\n\t  return target;\r\n\t}\r\n\r\n\tfunction _assertThisInitialized(self) {\r\n\t  if (self === void 0) {\r\n\t    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n\t  }\r\n\r\n\t  return self;\r\n\t}\r\n\r\n\tfunction _possibleConstructorReturn(self, call) {\r\n\t  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\r\n\t    return call;\r\n\t  } else if (call !== void 0) {\r\n\t    throw new TypeError(\"Derived constructors may only return object or undefined\");\r\n\t  }\r\n\r\n\t  return _assertThisInitialized(self);\r\n\t}\r\n\r\n\tfunction _createSuper(Derived) {\r\n\t  var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n\t  return function _createSuperInternal() {\r\n\t    var Super = _getPrototypeOf(Derived),\r\n\t        result;\r\n\r\n\t    if (hasNativeReflectConstruct) {\r\n\t      var NewTarget = _getPrototypeOf(this).constructor;\r\n\r\n\t      result = Reflect.construct(Super, arguments, NewTarget);\r\n\t    } else {\r\n\t      result = Super.apply(this, arguments);\r\n\t    }\r\n\r\n\t    return _possibleConstructorReturn(this, result);\r\n\t  };\r\n\t}\r\n\r\n\tfunction _superPropBase(object, property) {\r\n\t  while (!Object.prototype.hasOwnProperty.call(object, property)) {\r\n\t    object = _getPrototypeOf(object);\r\n\t    if (object === null) break;\r\n\t  }\r\n\r\n\t  return object;\r\n\t}\r\n\r\n\tfunction _get() {\r\n\t  if (typeof Reflect !== \"undefined\" && Reflect.get) {\r\n\t    _get = Reflect.get;\r\n\t  } else {\r\n\t    _get = function _get(target, property, receiver) {\r\n\t      var base = _superPropBase(target, property);\r\n\r\n\t      if (!base) return;\r\n\t      var desc = Object.getOwnPropertyDescriptor(base, property);\r\n\r\n\t      if (desc.get) {\r\n\t        return desc.get.call(arguments.length < 3 ? target : receiver);\r\n\t      }\r\n\r\n\t      return desc.value;\r\n\t    };\r\n\t  }\r\n\r\n\t  return _get.apply(this, arguments);\r\n\t}\r\n\r\n\tfunction set(target, property, value, receiver) {\r\n\t  if (typeof Reflect !== \"undefined\" && Reflect.set) {\r\n\t    set = Reflect.set;\r\n\t  } else {\r\n\t    set = function set(target, property, value, receiver) {\r\n\t      var base = _superPropBase(target, property);\r\n\r\n\t      var desc;\r\n\r\n\t      if (base) {\r\n\t        desc = Object.getOwnPropertyDescriptor(base, property);\r\n\r\n\t        if (desc.set) {\r\n\t          desc.set.call(receiver, value);\r\n\t          return true;\r\n\t        } else if (!desc.writable) {\r\n\t          return false;\r\n\t        }\r\n\t      }\r\n\r\n\t      desc = Object.getOwnPropertyDescriptor(receiver, property);\r\n\r\n\t      if (desc) {\r\n\t        if (!desc.writable) {\r\n\t          return false;\r\n\t        }\r\n\r\n\t        desc.value = value;\r\n\t        Object.defineProperty(receiver, property, desc);\r\n\t      } else {\r\n\t        _defineProperty(receiver, property, value);\r\n\t      }\r\n\r\n\t      return true;\r\n\t    };\r\n\t  }\r\n\r\n\t  return set(target, property, value, receiver);\r\n\t}\r\n\r\n\tfunction _set(target, property, value, receiver, isStrict) {\r\n\t  var s = set(target, property, value, receiver || target);\r\n\r\n\t  if (!s && isStrict) {\r\n\t    throw new Error('failed to set property');\r\n\t  }\r\n\r\n\t  return value;\r\n\t}\r\n\r\n\tfunction _slicedToArray(arr, i) {\r\n\t  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\r\n\t}\r\n\r\n\tfunction _arrayWithHoles(arr) {\r\n\t  if (Array.isArray(arr)) return arr;\r\n\t}\r\n\r\n\tfunction _iterableToArrayLimit(arr, i) {\r\n\t  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\r\n\r\n\t  if (_i == null) return;\r\n\t  var _arr = [];\r\n\t  var _n = true;\r\n\t  var _d = false;\r\n\r\n\t  var _s, _e;\r\n\r\n\t  try {\r\n\t    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\r\n\t      _arr.push(_s.value);\r\n\r\n\t      if (i && _arr.length === i) break;\r\n\t    }\r\n\t  } catch (err) {\r\n\t    _d = true;\r\n\t    _e = err;\r\n\t  } finally {\r\n\t    try {\r\n\t      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\r\n\t    } finally {\r\n\t      if (_d) throw _e;\r\n\t    }\r\n\t  }\r\n\r\n\t  return _arr;\r\n\t}\r\n\r\n\tfunction _unsupportedIterableToArray(o, minLen) {\r\n\t  if (!o) return;\r\n\t  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n\t  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n\t  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n\t  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n\t  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n\t}\r\n\r\n\tfunction _arrayLikeToArray(arr, len) {\r\n\t  if (len == null || len > arr.length) len = arr.length;\r\n\r\n\t  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n\t  return arr2;\r\n\t}\r\n\r\n\tfunction _nonIterableRest() {\r\n\t  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n\t}\r\n\r\n\t/**\r\n\t  Provides details of changing model value\r\n\t  @param {Object} [details]\r\n\t  @param {string} [details.inserted] - Inserted symbols\r\n\t  @param {boolean} [details.skip] - Can skip chars\r\n\t  @param {number} [details.removeCount] - Removed symbols count\r\n\t  @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\r\n\t*/\r\n\tvar ChangeDetails = /*#__PURE__*/function () {\r\n\t  /** Inserted symbols */\r\n\r\n\t  /** Can skip chars */\r\n\r\n\t  /** Additional offset if any changes occurred before tail */\r\n\r\n\t  /** Raw inserted is used by dynamic mask */\r\n\t  function ChangeDetails(details) {\r\n\t    _classCallCheck(this, ChangeDetails);\r\n\r\n\t    Object.assign(this, {\r\n\t      inserted: '',\r\n\t      rawInserted: '',\r\n\t      skip: false,\r\n\t      tailShift: 0\r\n\t    }, details);\r\n\t  }\r\n\t  /**\r\n\t    Aggregate changes\r\n\t    @returns {ChangeDetails} `this`\r\n\t  */\r\n\r\n\r\n\t  _createClass(ChangeDetails, [{\r\n\t    key: \"aggregate\",\r\n\t    value: function aggregate(details) {\r\n\t      this.rawInserted += details.rawInserted;\r\n\t      this.skip = this.skip || details.skip;\r\n\t      this.inserted += details.inserted;\r\n\t      this.tailShift += details.tailShift;\r\n\t      return this;\r\n\t    }\r\n\t    /** Total offset considering all changes */\r\n\r\n\t  }, {\r\n\t    key: \"offset\",\r\n\t    get: function get() {\r\n\t      return this.tailShift + this.inserted.length;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return ChangeDetails;\r\n\t}();\r\n\r\n\t/** Checks if value is string */\r\n\r\n\tfunction isString(str) {\r\n\t  return typeof str === 'string' || str instanceof String;\r\n\t}\r\n\t/**\r\n\t  Direction\r\n\t  @prop {string} NONE\r\n\t  @prop {string} LEFT\r\n\t  @prop {string} FORCE_LEFT\r\n\t  @prop {string} RIGHT\r\n\t  @prop {string} FORCE_RIGHT\r\n\t*/\r\n\r\n\tvar DIRECTION = {\r\n\t  NONE: 'NONE',\r\n\t  LEFT: 'LEFT',\r\n\t  FORCE_LEFT: 'FORCE_LEFT',\r\n\t  RIGHT: 'RIGHT',\r\n\t  FORCE_RIGHT: 'FORCE_RIGHT'\r\n\t};\r\n\t/** */\r\n\r\n\tfunction forceDirection(direction) {\r\n\t  switch (direction) {\r\n\t    case DIRECTION.LEFT:\r\n\t      return DIRECTION.FORCE_LEFT;\r\n\r\n\t    case DIRECTION.RIGHT:\r\n\t      return DIRECTION.FORCE_RIGHT;\r\n\r\n\t    default:\r\n\t      return direction;\r\n\t  }\r\n\t}\r\n\t/** Escapes regular expression control chars */\r\n\r\n\tfunction escapeRegExp(str) {\r\n\t  return str.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\r\n\t}\r\n\tfunction normalizePrepare(prep) {\r\n\t  return Array.isArray(prep) ? prep : [prep, new ChangeDetails()];\r\n\t} // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\n\r\n\tfunction objectIncludes(b, a) {\r\n\t  if (a === b) return true;\r\n\t  var arrA = Array.isArray(a),\r\n\t      arrB = Array.isArray(b),\r\n\t      i;\r\n\r\n\t  if (arrA && arrB) {\r\n\t    if (a.length != b.length) return false;\r\n\r\n\t    for (i = 0; i < a.length; i++) {\r\n\t      if (!objectIncludes(a[i], b[i])) return false;\r\n\t    }\r\n\r\n\t    return true;\r\n\t  }\r\n\r\n\t  if (arrA != arrB) return false;\r\n\r\n\t  if (a && b && _typeof(a) === 'object' && _typeof(b) === 'object') {\r\n\t    var dateA = a instanceof Date,\r\n\t        dateB = b instanceof Date;\r\n\t    if (dateA && dateB) return a.getTime() == b.getTime();\r\n\t    if (dateA != dateB) return false;\r\n\t    var regexpA = a instanceof RegExp,\r\n\t        regexpB = b instanceof RegExp;\r\n\t    if (regexpA && regexpB) return a.toString() == b.toString();\r\n\t    if (regexpA != regexpB) return false;\r\n\t    var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n\t    for (i = 0; i < keys.length; i++) {\r\n\t      // $FlowFixMe ... ???\r\n\t      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\t    }\r\n\r\n\t    for (i = 0; i < keys.length; i++) {\r\n\t      if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\r\n\t    }\r\n\r\n\t    return true;\r\n\t  } else if (a && b && typeof a === 'function' && typeof b === 'function') {\r\n\t    return a.toString() === b.toString();\r\n\t  }\r\n\r\n\t  return false;\r\n\t}\r\n\t/** Selection range */\r\n\r\n\t/** Provides details of changing input */\r\n\r\n\tvar ActionDetails = /*#__PURE__*/function () {\r\n\t  /** Current input value */\r\n\r\n\t  /** Current cursor position */\r\n\r\n\t  /** Old input value */\r\n\r\n\t  /** Old selection */\r\n\t  function ActionDetails(value, cursorPos, oldValue, oldSelection) {\r\n\t    _classCallCheck(this, ActionDetails);\r\n\r\n\t    this.value = value;\r\n\t    this.cursorPos = cursorPos;\r\n\t    this.oldValue = oldValue;\r\n\t    this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\r\n\r\n\t    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n\t      --this.oldSelection.start;\r\n\t    }\r\n\t  }\r\n\t  /**\r\n\t    Start changing position\r\n\t    @readonly\r\n\t  */\r\n\r\n\r\n\t  _createClass(ActionDetails, [{\r\n\t    key: \"startChangePos\",\r\n\t    get: function get() {\r\n\t      return Math.min(this.cursorPos, this.oldSelection.start);\r\n\t    }\r\n\t    /**\r\n\t      Inserted symbols count\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"insertedCount\",\r\n\t    get: function get() {\r\n\t      return this.cursorPos - this.startChangePos;\r\n\t    }\r\n\t    /**\r\n\t      Inserted symbols\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"inserted\",\r\n\t    get: function get() {\r\n\t      return this.value.substr(this.startChangePos, this.insertedCount);\r\n\t    }\r\n\t    /**\r\n\t      Removed symbols count\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"removedCount\",\r\n\t    get: function get() {\r\n\t      // Math.max for opposite operation\r\n\t      return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\r\n\t      this.oldValue.length - this.value.length, 0);\r\n\t    }\r\n\t    /**\r\n\t      Removed symbols\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"removed\",\r\n\t    get: function get() {\r\n\t      return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n\t    }\r\n\t    /**\r\n\t      Unchanged head symbols\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"head\",\r\n\t    get: function get() {\r\n\t      return this.value.substring(0, this.startChangePos);\r\n\t    }\r\n\t    /**\r\n\t      Unchanged tail symbols\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"tail\",\r\n\t    get: function get() {\r\n\t      return this.value.substring(this.startChangePos + this.insertedCount);\r\n\t    }\r\n\t    /**\r\n\t      Remove direction\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"removeDirection\",\r\n\t    get: function get() {\r\n\t      if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right\r\n\r\n\t      return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) && // if not range removed (event with backspace)\r\n\t      this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return ActionDetails;\r\n\t}();\r\n\r\n\t/** Provides details of continuous extracted tail */\r\n\tvar ContinuousTailDetails = /*#__PURE__*/function () {\r\n\t  /** Tail value as string */\r\n\r\n\t  /** Tail start position */\r\n\r\n\t  /** Start position */\r\n\t  function ContinuousTailDetails() {\r\n\t    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n\t    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\t    var stop = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n\t    _classCallCheck(this, ContinuousTailDetails);\r\n\r\n\t    this.value = value;\r\n\t    this.from = from;\r\n\t    this.stop = stop;\r\n\t  }\r\n\r\n\t  _createClass(ContinuousTailDetails, [{\r\n\t    key: \"toString\",\r\n\t    value: function toString() {\r\n\t      return this.value;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"extend\",\r\n\t    value: function extend(tail) {\r\n\t      this.value += String(tail);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"appendTo\",\r\n\t    value: function appendTo(masked) {\r\n\t      return masked.append(this.toString(), {\r\n\t        tail: true\r\n\t      }).aggregate(masked._appendPlaceholder());\r\n\t    }\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        value: this.value,\r\n\t        from: this.from,\r\n\t        stop: this.stop\r\n\t      };\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      Object.assign(this, state);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"unshift\",\r\n\t    value: function unshift(beforePos) {\r\n\t      if (!this.value.length || beforePos != null && this.from >= beforePos) return '';\r\n\t      var shiftChar = this.value[0];\r\n\t      this.value = this.value.slice(1);\r\n\t      return shiftChar;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"shift\",\r\n\t    value: function shift() {\r\n\t      if (!this.value.length) return '';\r\n\t      var shiftChar = this.value[this.value.length - 1];\r\n\t      this.value = this.value.slice(0, -1);\r\n\t      return shiftChar;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return ContinuousTailDetails;\r\n\t}();\r\n\r\n\t/**\r\n\t * Applies mask on element.\r\n\t * @constructor\r\n\t * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n\t * @param {Object} opts - Custom mask options\r\n\t * @return {InputMask}\r\n\t */\r\n\tfunction IMask(el) {\r\n\t  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t  // currently available only for input-like elements\r\n\t  return new IMask.InputMask(el, opts);\r\n\t}\r\n\r\n\t/** Supported mask type */\r\n\r\n\t/** Provides common masking stuff */\r\n\tvar Masked = /*#__PURE__*/function () {\r\n\t  // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\r\n\r\n\t  /** @type {Mask} */\r\n\r\n\t  /** */\r\n\t  // $FlowFixMe no ideas\r\n\r\n\t  /** Transforms value before mask processing */\r\n\r\n\t  /** Validates if value is acceptable */\r\n\r\n\t  /** Does additional processing in the end of editing */\r\n\r\n\t  /** Format typed value to string */\r\n\r\n\t  /** Parse strgin to get typed value */\r\n\r\n\t  /** Enable characters overwriting */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\t  function Masked(opts) {\r\n\t    _classCallCheck(this, Masked);\r\n\r\n\t    this._value = '';\r\n\r\n\t    this._update(Object.assign({}, Masked.DEFAULTS, opts));\r\n\r\n\t    this.isInitialized = true;\r\n\t  }\r\n\t  /** Sets and applies new options */\r\n\r\n\r\n\t  _createClass(Masked, [{\r\n\t    key: \"updateOptions\",\r\n\t    value: function updateOptions(opts) {\r\n\t      if (!Object.keys(opts).length) return; // $FlowFixMe\r\n\r\n\t      this.withValueRefresh(this._update.bind(this, opts));\r\n\t    }\r\n\t    /**\r\n\t      Sets new options\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_update\",\r\n\t    value: function _update(opts) {\r\n\t      Object.assign(this, opts);\r\n\t    }\r\n\t    /** Mask state */\r\n\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        _value: this.value\r\n\t      };\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      this._value = state._value;\r\n\t    }\r\n\t    /** Resets value */\r\n\r\n\t  }, {\r\n\t    key: \"reset\",\r\n\t    value: function reset() {\r\n\t      this._value = '';\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this._value;\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.resolve(value);\r\n\t    }\r\n\t    /** Resolve new value */\r\n\r\n\t  }, {\r\n\t    key: \"resolve\",\r\n\t    value: function resolve(value) {\r\n\t      this.reset();\r\n\t      this.append(value, {\r\n\t        input: true\r\n\t      }, '');\r\n\t      this.doCommit();\r\n\t      return this.value;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this.value;\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.reset();\r\n\t      this.append(value, {}, '');\r\n\t      this.doCommit();\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"typedValue\",\r\n\t    get: function get() {\r\n\t      return this.doParse(this.value);\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.value = this.doFormat(value);\r\n\t    }\r\n\t    /** Value that includes raw user input */\r\n\r\n\t  }, {\r\n\t    key: \"rawInputValue\",\r\n\t    get: function get() {\r\n\t      return this.extractInput(0, this.value.length, {\r\n\t        raw: true\r\n\t      });\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.reset();\r\n\t      this.append(value, {\r\n\t        raw: true\r\n\t      }, '');\r\n\t      this.doCommit();\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      return true;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"isFilled\",\r\n\t    get: function get() {\r\n\t      return this.isComplete;\r\n\t    }\r\n\t    /** Finds nearest input position in direction */\r\n\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos(cursorPos, direction) {\r\n\t      return cursorPos;\r\n\t    }\r\n\t    /** Extracts value in range considering flags */\r\n\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      return this.value.slice(fromPos, toPos);\r\n\t    }\r\n\t    /** Extracts tail in range */\r\n\r\n\t  }, {\r\n\t    key: \"extractTail\",\r\n\t    value: function extractTail() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\r\n\t    }\r\n\t    /** Appends tail */\r\n\t    // $FlowFixMe no ideas\r\n\r\n\t  }, {\r\n\t    key: \"appendTail\",\r\n\t    value: function appendTail(tail) {\r\n\t      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\r\n\t      return tail.appendTo(this);\r\n\t    }\r\n\t    /** Appends char */\r\n\r\n\t  }, {\r\n\t    key: \"_appendCharRaw\",\r\n\t    value: function _appendCharRaw(ch) {\r\n\t      if (!ch) return new ChangeDetails();\r\n\t      this._value += ch;\r\n\t      return new ChangeDetails({\r\n\t        inserted: ch,\r\n\t        rawInserted: ch\r\n\t      });\r\n\t    }\r\n\t    /** Appends char */\r\n\r\n\t  }, {\r\n\t    key: \"_appendChar\",\r\n\t    value: function _appendChar(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      var checkTail = arguments.length > 2 ? arguments[2] : undefined;\r\n\t      var consistentState = this.state;\r\n\t      var details;\r\n\r\n\t      var _normalizePrepare = normalizePrepare(this.doPrepare(ch, flags));\r\n\r\n\t      var _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2);\r\n\r\n\t      ch = _normalizePrepare2[0];\r\n\t      details = _normalizePrepare2[1];\r\n\t      details = details.aggregate(this._appendCharRaw(ch, flags));\r\n\r\n\t      if (details.inserted) {\r\n\t        var consistentTail;\r\n\t        var appended = this.doValidate(flags) !== false;\r\n\r\n\t        if (appended && checkTail != null) {\r\n\t          // validation ok, check tail\r\n\t          var beforeTailState = this.state;\r\n\r\n\t          if (this.overwrite === true) {\r\n\t            consistentTail = checkTail.state;\r\n\t            checkTail.unshift(this.value.length);\r\n\t          }\r\n\r\n\t          var tailDetails = this.appendTail(checkTail);\r\n\t          appended = tailDetails.rawInserted === checkTail.toString(); // not ok, try shift\r\n\r\n\t          if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {\r\n\t            this.state = beforeTailState;\r\n\t            consistentTail = checkTail.state;\r\n\t            checkTail.shift();\r\n\t            tailDetails = this.appendTail(checkTail);\r\n\t            appended = tailDetails.rawInserted === checkTail.toString();\r\n\t          } // if ok, rollback state after tail\r\n\r\n\r\n\t          if (appended && tailDetails.inserted) this.state = beforeTailState;\r\n\t        } // revert all if something went wrong\r\n\r\n\r\n\t        if (!appended) {\r\n\t          details = new ChangeDetails();\r\n\t          this.state = consistentState;\r\n\t          if (checkTail && consistentTail) checkTail.state = consistentTail;\r\n\t        }\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /** Appends optional placeholder at end */\r\n\r\n\t  }, {\r\n\t    key: \"_appendPlaceholder\",\r\n\t    value: function _appendPlaceholder() {\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t    /** Appends optional eager placeholder at end */\r\n\r\n\t  }, {\r\n\t    key: \"_appendEager\",\r\n\t    value: function _appendEager() {\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t    /** Appends symbols considering flags */\r\n\t    // $FlowFixMe no ideas\r\n\r\n\t  }, {\r\n\t    key: \"append\",\r\n\t    value: function append(str, flags, tail) {\r\n\t      if (!isString(str)) throw new Error('value should be string');\r\n\t      var details = new ChangeDetails();\r\n\t      var checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;\r\n\t      if (flags && flags.tail) flags._beforeTailState = this.state;\r\n\r\n\t      for (var ci = 0; ci < str.length; ++ci) {\r\n\t        details.aggregate(this._appendChar(str[ci], flags, checkTail));\r\n\t      } // append tail but aggregate only tailShift\r\n\r\n\r\n\t      if (checkTail != null) {\r\n\t        details.tailShift += this.appendTail(checkTail).tailShift; // TODO it's a good idea to clear state after appending ends\r\n\t        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\r\n\t        // this._resetBeforeTailState();\r\n\t      }\r\n\r\n\t      if (this.eager && flags !== null && flags !== void 0 && flags.input && str) {\r\n\t        details.aggregate(this._appendEager());\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t    /** Calls function and reapplies current value */\r\n\r\n\t  }, {\r\n\t    key: \"withValueRefresh\",\r\n\t    value: function withValueRefresh(fn) {\r\n\t      if (this._refreshing || !this.isInitialized) return fn();\r\n\t      this._refreshing = true;\r\n\t      var rawInput = this.rawInputValue;\r\n\t      var value = this.value;\r\n\t      var ret = fn();\r\n\t      this.rawInputValue = rawInput; // append lost trailing chars at end\r\n\r\n\t      if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\r\n\t        this.append(value.slice(this.value.length), {}, '');\r\n\t      }\r\n\r\n\t      delete this._refreshing;\r\n\t      return ret;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"runIsolated\",\r\n\t    value: function runIsolated(fn) {\r\n\t      if (this._isolated || !this.isInitialized) return fn(this);\r\n\t      this._isolated = true;\r\n\t      var state = this.state;\r\n\t      var ret = fn(this);\r\n\t      this.state = state;\r\n\t      delete this._isolated;\r\n\t      return ret;\r\n\t    }\r\n\t    /**\r\n\t      Prepares string before mask processing\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doPrepare\",\r\n\t    value: function doPrepare(str) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      return this.prepare ? this.prepare(str, this, flags) : str;\r\n\t    }\r\n\t    /**\r\n\t      Validates if value is acceptable\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate(flags) {\r\n\t      return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\r\n\t    }\r\n\t    /**\r\n\t      Does additional processing in the end of editing\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {\r\n\t      if (this.commit) this.commit(this.value, this);\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"doFormat\",\r\n\t    value: function doFormat(value) {\r\n\t      return this.format ? this.format(value, this) : value;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"doParse\",\r\n\t    value: function doParse(str) {\r\n\t      return this.parse ? this.parse(str, this) : str;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"splice\",\r\n\t    value: function splice(start, deleteCount, inserted, removeDirection) {\r\n\t      var tailPos = start + deleteCount;\r\n\t      var tail = this.extractTail(tailPos);\r\n\t      var oldRawValue;\r\n\r\n\t      if (this.eager) {\r\n\t        removeDirection = forceDirection(removeDirection);\r\n\t        oldRawValue = this.extractInput(0, tailPos, {\r\n\t          raw: true\r\n\t        });\r\n\t      }\r\n\r\n\t      var startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !this.eager ? DIRECTION.NONE : removeDirection);\r\n\t      var details = new ChangeDetails({\r\n\t        tailShift: startChangePos - start // adjust tailShift if start was aligned\r\n\r\n\t      }).aggregate(this.remove(startChangePos));\r\n\r\n\t      if (this.eager && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {\r\n\t        if (removeDirection === DIRECTION.FORCE_LEFT) {\r\n\t          var valLength;\r\n\r\n\t          while (oldRawValue === this.rawInputValue && (valLength = this.value.length)) {\r\n\t            details.aggregate(new ChangeDetails({\r\n\t              tailShift: -1\r\n\t            })).aggregate(this.remove(valLength - 1));\r\n\t          }\r\n\t        } else if (removeDirection === DIRECTION.FORCE_RIGHT) {\r\n\t          tail.unshift();\r\n\t        }\r\n\t      }\r\n\r\n\t      return details.aggregate(this.append(inserted, {\r\n\t        input: true\r\n\t      }, tail));\r\n\t    }\r\n\t  }, {\r\n\t    key: \"maskEquals\",\r\n\t    value: function maskEquals(mask) {\r\n\t      return this.mask === mask;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return Masked;\r\n\t}();\r\n\tMasked.DEFAULTS = {\r\n\t  format: function format(v) {\r\n\t    return v;\r\n\t  },\r\n\t  parse: function parse(v) {\r\n\t    return v;\r\n\t  }\r\n\t};\r\n\tIMask.Masked = Masked;\r\n\r\n\t/** Get Masked class by mask type */\r\n\r\n\tfunction maskedClass(mask) {\r\n\t  if (mask == null) {\r\n\t    throw new Error('mask property should be defined');\r\n\t  } // $FlowFixMe\r\n\r\n\r\n\t  if (mask instanceof RegExp) return IMask.MaskedRegExp; // $FlowFixMe\r\n\r\n\t  if (isString(mask)) return IMask.MaskedPattern; // $FlowFixMe\r\n\r\n\t  if (mask instanceof Date || mask === Date) return IMask.MaskedDate; // $FlowFixMe\r\n\r\n\t  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return IMask.MaskedNumber; // $FlowFixMe\r\n\r\n\t  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic; // $FlowFixMe\r\n\r\n\t  if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask; // $FlowFixMe\r\n\r\n\t  if (mask instanceof IMask.Masked) return mask.constructor; // $FlowFixMe\r\n\r\n\t  if (mask instanceof Function) return IMask.MaskedFunction;\r\n\t  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\r\n\t  // $FlowFixMe\r\n\r\n\t  return IMask.Masked;\r\n\t}\r\n\t/** Creates new {@link Masked} depending on mask type */\r\n\r\n\tfunction createMask(opts) {\r\n\t  // $FlowFixMe\r\n\t  if (IMask.Masked && opts instanceof IMask.Masked) return opts;\r\n\t  opts = Object.assign({}, opts);\r\n\t  var mask = opts.mask; // $FlowFixMe\r\n\r\n\t  if (IMask.Masked && mask instanceof IMask.Masked) return mask;\r\n\t  var MaskedClass = maskedClass(mask);\r\n\t  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\r\n\t  return new MaskedClass(opts);\r\n\t}\r\n\tIMask.createMask = createMask;\r\n\r\n\tvar _excluded$4 = [\"mask\"];\r\n\tvar DEFAULT_INPUT_DEFINITIONS = {\r\n\t  '0': /\\d/,\r\n\t  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n\t  // http://stackoverflow.com/a/22075070\r\n\t  '*': /./\r\n\t};\r\n\t/** */\r\n\r\n\tvar PatternInputDefinition = /*#__PURE__*/function () {\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\t  function PatternInputDefinition(opts) {\r\n\t    _classCallCheck(this, PatternInputDefinition);\r\n\r\n\t    var mask = opts.mask,\r\n\t        blockOpts = _objectWithoutProperties(opts, _excluded$4);\r\n\r\n\t    this.masked = createMask({\r\n\t      mask: mask\r\n\t    });\r\n\t    Object.assign(this, blockOpts);\r\n\t  }\r\n\r\n\t  _createClass(PatternInputDefinition, [{\r\n\t    key: \"reset\",\r\n\t    value: function reset() {\r\n\t      this.isFilled = false;\r\n\t      this.masked.reset();\r\n\t    }\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n\t      if (fromPos === 0 && toPos >= 1) {\r\n\t        this.isFilled = false;\r\n\t        return this.masked.remove(fromPos, toPos);\r\n\t      }\r\n\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');\r\n\t    }\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this.masked.unmaskedValue;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      return Boolean(this.masked.value) || this.isOptional;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendChar\",\r\n\t    value: function _appendChar(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      if (this.isFilled) return new ChangeDetails();\r\n\t      var state = this.masked.state; // simulate input\r\n\r\n\t      var details = this.masked._appendChar(ch, flags);\r\n\r\n\t      if (details.inserted && this.doValidate(flags) === false) {\r\n\t        details.inserted = details.rawInserted = '';\r\n\t        this.masked.state = state;\r\n\t      }\r\n\r\n\t      if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\r\n\t        details.inserted = this.placeholderChar;\r\n\t      }\r\n\r\n\t      details.skip = !details.inserted && !this.isOptional;\r\n\t      this.isFilled = Boolean(details.inserted);\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"append\",\r\n\t    value: function append() {\r\n\t      var _this$masked;\r\n\r\n\t      // TODO probably should be done via _appendChar\r\n\t      return (_this$masked = this.masked).append.apply(_this$masked, arguments);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendPlaceholder\",\r\n\t    value: function _appendPlaceholder() {\r\n\t      var details = new ChangeDetails();\r\n\t      if (this.isFilled || this.isOptional) return details;\r\n\t      this.isFilled = true;\r\n\t      details.inserted = this.placeholderChar;\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendEager\",\r\n\t    value: function _appendEager() {\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t  }, {\r\n\t    key: \"extractTail\",\r\n\t    value: function extractTail() {\r\n\t      var _this$masked2;\r\n\r\n\t      return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"appendTail\",\r\n\t    value: function appendTail() {\r\n\t      var _this$masked3;\r\n\r\n\t      return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      var flags = arguments.length > 2 ? arguments[2] : undefined;\r\n\t      return this.masked.extractInput(fromPos, toPos, flags);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos(cursorPos) {\r\n\t      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n\t      var minPos = 0;\r\n\t      var maxPos = this.value.length;\r\n\t      var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\r\n\r\n\t      switch (direction) {\r\n\t        case DIRECTION.LEFT:\r\n\t        case DIRECTION.FORCE_LEFT:\r\n\t          return this.isComplete ? boundPos : minPos;\r\n\r\n\t        case DIRECTION.RIGHT:\r\n\t        case DIRECTION.FORCE_RIGHT:\r\n\t          return this.isComplete ? boundPos : maxPos;\r\n\r\n\t        case DIRECTION.NONE:\r\n\t        default:\r\n\t          return boundPos;\r\n\t      }\r\n\t    }\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate() {\r\n\t      var _this$masked4, _this$parent;\r\n\r\n\t      return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\r\n\t    }\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {\r\n\t      this.masked.doCommit();\r\n\t    }\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        masked: this.masked.state,\r\n\t        isFilled: this.isFilled\r\n\t      };\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      this.masked.state = state.masked;\r\n\t      this.isFilled = state.isFilled;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return PatternInputDefinition;\r\n\t}();\r\n\r\n\tvar PatternFixedDefinition = /*#__PURE__*/function () {\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\t  function PatternFixedDefinition(opts) {\r\n\t    _classCallCheck(this, PatternFixedDefinition);\r\n\r\n\t    Object.assign(this, opts);\r\n\t    this._value = '';\r\n\t    this.isFixed = true;\r\n\t  }\r\n\r\n\t  _createClass(PatternFixedDefinition, [{\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this._value;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this.isUnmasking ? this.value : '';\r\n\t    }\r\n\t  }, {\r\n\t    key: \"reset\",\r\n\t    value: function reset() {\r\n\t      this._isRawInput = false;\r\n\t      this._value = '';\r\n\t    }\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\r\n\t      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\r\n\t      if (!this._value) this._isRawInput = false;\r\n\t      return new ChangeDetails();\r\n\t    }\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos(cursorPos) {\r\n\t      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n\t      var minPos = 0;\r\n\t      var maxPos = this._value.length;\r\n\r\n\t      switch (direction) {\r\n\t        case DIRECTION.LEFT:\r\n\t        case DIRECTION.FORCE_LEFT:\r\n\t          return minPos;\r\n\r\n\t        case DIRECTION.NONE:\r\n\t        case DIRECTION.RIGHT:\r\n\t        case DIRECTION.FORCE_RIGHT:\r\n\t        default:\r\n\t          return maxPos;\r\n\t      }\r\n\t    }\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\r\n\t      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\t      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\r\n\t    }\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      return true;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"isFilled\",\r\n\t    get: function get() {\r\n\t      return Boolean(this._value);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendChar\",\r\n\t    value: function _appendChar(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      var details = new ChangeDetails();\r\n\t      if (this._value) return details;\r\n\t      var appended = this.char === ch;\r\n\t      var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !this.eager && !flags.tail;\r\n\t      if (isResolved) details.rawInserted = this.char;\r\n\t      this._value = details.inserted = this.char;\r\n\t      this._isRawInput = isResolved && (flags.raw || flags.input);\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendEager\",\r\n\t    value: function _appendEager() {\r\n\t      return this._appendChar(this.char);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendPlaceholder\",\r\n\t    value: function _appendPlaceholder() {\r\n\t      var details = new ChangeDetails();\r\n\t      if (this._value) return details;\r\n\t      this._value = details.inserted = this.char;\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"extractTail\",\r\n\t    value: function extractTail() {\r\n\t      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      return new ContinuousTailDetails('');\r\n\t    } // $FlowFixMe no ideas\r\n\r\n\t  }, {\r\n\t    key: \"appendTail\",\r\n\t    value: function appendTail(tail) {\r\n\t      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\r\n\t      return tail.appendTo(this);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"append\",\r\n\t    value: function append(str, flags, tail) {\r\n\t      var details = this._appendChar(str[0], flags);\r\n\r\n\t      if (tail != null) {\r\n\t        details.tailShift += this.appendTail(tail).tailShift;\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {}\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        _value: this._value,\r\n\t        _isRawInput: this._isRawInput\r\n\t      };\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      Object.assign(this, state);\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return PatternFixedDefinition;\r\n\t}();\r\n\r\n\tvar _excluded$3 = [\"chunks\"];\r\n\r\n\tvar ChunksTailDetails = /*#__PURE__*/function () {\r\n\t  /** */\r\n\t  function ChunksTailDetails() {\r\n\t    var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n\t    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\r\n\t    _classCallCheck(this, ChunksTailDetails);\r\n\r\n\t    this.chunks = chunks;\r\n\t    this.from = from;\r\n\t  }\r\n\r\n\t  _createClass(ChunksTailDetails, [{\r\n\t    key: \"toString\",\r\n\t    value: function toString() {\r\n\t      return this.chunks.map(String).join('');\r\n\t    } // $FlowFixMe no ideas\r\n\r\n\t  }, {\r\n\t    key: \"extend\",\r\n\t    value: function extend(tailChunk) {\r\n\t      if (!String(tailChunk)) return;\r\n\t      if (isString(tailChunk)) tailChunk = new ContinuousTailDetails(String(tailChunk));\r\n\t      var lastChunk = this.chunks[this.chunks.length - 1];\r\n\t      var extendLast = lastChunk && ( // if stops are same or tail has no stop\r\n\t      lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\r\n\t      tailChunk.from === lastChunk.from + lastChunk.toString().length;\r\n\r\n\t      if (tailChunk instanceof ContinuousTailDetails) {\r\n\t        // check the ability to extend previous chunk\r\n\t        if (extendLast) {\r\n\t          // extend previous chunk\r\n\t          lastChunk.extend(tailChunk.toString());\r\n\t        } else {\r\n\t          // append new chunk\r\n\t          this.chunks.push(tailChunk);\r\n\t        }\r\n\t      } else if (tailChunk instanceof ChunksTailDetails) {\r\n\t        if (tailChunk.stop == null) {\r\n\t          // unwrap floating chunks to parent, keeping `from` pos\r\n\t          var firstTailChunk;\r\n\r\n\t          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\r\n\t            firstTailChunk = tailChunk.chunks.shift();\r\n\t            firstTailChunk.from += tailChunk.from;\r\n\t            this.extend(firstTailChunk);\r\n\t          }\r\n\t        } // if tail chunk still has value\r\n\r\n\r\n\t        if (tailChunk.toString()) {\r\n\t          // if chunks contains stops, then popup stop to container\r\n\t          tailChunk.stop = tailChunk.blockIndex;\r\n\t          this.chunks.push(tailChunk);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  }, {\r\n\t    key: \"appendTo\",\r\n\t    value: function appendTo(masked) {\r\n\t      // $FlowFixMe\r\n\t      if (!(masked instanceof IMask.MaskedPattern)) {\r\n\t        var tail = new ContinuousTailDetails(this.toString());\r\n\t        return tail.appendTo(masked);\r\n\t      }\r\n\r\n\t      var details = new ChangeDetails();\r\n\r\n\t      for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\r\n\t        var chunk = this.chunks[ci];\r\n\r\n\t        var lastBlockIter = masked._mapPosToBlock(masked.value.length);\r\n\r\n\t        var stop = chunk.stop;\r\n\t        var chunkBlock = void 0;\r\n\r\n\t        if (stop != null && ( // if block not found or stop is behind lastBlock\r\n\t        !lastBlockIter || lastBlockIter.index <= stop)) {\r\n\t          if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\r\n\t          masked._stops.indexOf(stop) >= 0) {\r\n\t            details.aggregate(masked._appendPlaceholder(stop));\r\n\t          }\r\n\r\n\t          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\r\n\t        }\r\n\r\n\t        if (chunkBlock) {\r\n\t          var tailDetails = chunkBlock.appendTail(chunk);\r\n\t          tailDetails.skip = false; // always ignore skip, it will be set on last\r\n\r\n\t          details.aggregate(tailDetails);\r\n\t          masked._value += tailDetails.inserted; // get not inserted chars\r\n\r\n\t          var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\r\n\t          if (remainChars) details.aggregate(masked.append(remainChars, {\r\n\t            tail: true\r\n\t          }));\r\n\t        } else {\r\n\t          details.aggregate(masked.append(chunk.toString(), {\r\n\t            tail: true\r\n\t          }));\r\n\t        }\r\n\t      }\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        chunks: this.chunks.map(function (c) {\r\n\t          return c.state;\r\n\t        }),\r\n\t        from: this.from,\r\n\t        stop: this.stop,\r\n\t        blockIndex: this.blockIndex\r\n\t      };\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      var chunks = state.chunks,\r\n\t          props = _objectWithoutProperties(state, _excluded$3);\r\n\r\n\t      Object.assign(this, props);\r\n\t      this.chunks = chunks.map(function (cstate) {\r\n\t        var chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails(); // $FlowFixMe already checked above\r\n\r\n\t        chunk.state = cstate;\r\n\t        return chunk;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"unshift\",\r\n\t    value: function unshift(beforePos) {\r\n\t      if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';\r\n\t      var chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\r\n\t      var ci = 0;\r\n\r\n\t      while (ci < this.chunks.length) {\r\n\t        var chunk = this.chunks[ci];\r\n\t        var shiftChar = chunk.unshift(chunkShiftPos);\r\n\r\n\t        if (chunk.toString()) {\r\n\t          // chunk still contains value\r\n\t          // but not shifted - means no more available chars to shift\r\n\t          if (!shiftChar) break;\r\n\t          ++ci;\r\n\t        } else {\r\n\t          // clean if chunk has no value\r\n\t          this.chunks.splice(ci, 1);\r\n\t        }\r\n\r\n\t        if (shiftChar) return shiftChar;\r\n\t      }\r\n\r\n\t      return '';\r\n\t    }\r\n\t  }, {\r\n\t    key: \"shift\",\r\n\t    value: function shift() {\r\n\t      if (!this.chunks.length) return '';\r\n\t      var ci = this.chunks.length - 1;\r\n\r\n\t      while (0 <= ci) {\r\n\t        var chunk = this.chunks[ci];\r\n\t        var shiftChar = chunk.shift();\r\n\r\n\t        if (chunk.toString()) {\r\n\t          // chunk still contains value\r\n\t          // but not shifted - means no more available chars to shift\r\n\t          if (!shiftChar) break;\r\n\t          --ci;\r\n\t        } else {\r\n\t          // clean if chunk has no value\r\n\t          this.chunks.splice(ci, 1);\r\n\t        }\r\n\r\n\t        if (shiftChar) return shiftChar;\r\n\t      }\r\n\r\n\t      return '';\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return ChunksTailDetails;\r\n\t}();\r\n\r\n\tvar PatternCursor = /*#__PURE__*/function () {\r\n\t  function PatternCursor(masked, pos) {\r\n\t    _classCallCheck(this, PatternCursor);\r\n\r\n\t    this.masked = masked;\r\n\t    this._log = [];\r\n\r\n\t    var _ref = masked._mapPosToBlock(pos) || (pos < 0 ? // first\r\n\t    {\r\n\t      index: 0,\r\n\t      offset: 0\r\n\t    } : // last\r\n\t    {\r\n\t      index: this.masked._blocks.length,\r\n\t      offset: 0\r\n\t    }),\r\n\t        offset = _ref.offset,\r\n\t        index = _ref.index;\r\n\r\n\t    this.offset = offset;\r\n\t    this.index = index;\r\n\t    this.ok = false;\r\n\t  }\r\n\r\n\t  _createClass(PatternCursor, [{\r\n\t    key: \"block\",\r\n\t    get: function get() {\r\n\t      return this.masked._blocks[this.index];\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pos\",\r\n\t    get: function get() {\r\n\t      return this.masked._blockStartPos(this.index) + this.offset;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return {\r\n\t        index: this.index,\r\n\t        offset: this.offset,\r\n\t        ok: this.ok\r\n\t      };\r\n\t    },\r\n\t    set: function set(s) {\r\n\t      Object.assign(this, s);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushState\",\r\n\t    value: function pushState() {\r\n\t      this._log.push(this.state);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"popState\",\r\n\t    value: function popState() {\r\n\t      var s = this._log.pop();\r\n\r\n\t      this.state = s;\r\n\t      return s;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"bindBlock\",\r\n\t    value: function bindBlock() {\r\n\t      if (this.block) return;\r\n\r\n\t      if (this.index < 0) {\r\n\t        this.index = 0;\r\n\t        this.offset = 0;\r\n\t      }\r\n\r\n\t      if (this.index >= this.masked._blocks.length) {\r\n\t        this.index = this.masked._blocks.length - 1;\r\n\t        this.offset = this.block.value.length;\r\n\t      }\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_pushLeft\",\r\n\t    value: function _pushLeft(fn) {\r\n\t      this.pushState();\r\n\r\n\t      for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) === null || _this$block === void 0 ? void 0 : _this$block.value.length) || 0) {\r\n\t        var _this$block;\r\n\r\n\t        if (fn()) return this.ok = true;\r\n\t      }\r\n\r\n\t      return this.ok = false;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_pushRight\",\r\n\t    value: function _pushRight(fn) {\r\n\t      this.pushState();\r\n\r\n\t      for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {\r\n\t        if (fn()) return this.ok = true;\r\n\t      }\r\n\r\n\t      return this.ok = false;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushLeftBeforeFilled\",\r\n\t    value: function pushLeftBeforeFilled() {\r\n\t      var _this = this;\r\n\r\n\t      return this._pushLeft(function () {\r\n\t        if (_this.block.isFixed || !_this.block.value) return;\r\n\t        _this.offset = _this.block.nearestInputPos(_this.offset, DIRECTION.FORCE_LEFT);\r\n\t        if (_this.offset !== 0) return true;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushLeftBeforeInput\",\r\n\t    value: function pushLeftBeforeInput() {\r\n\t      var _this2 = this;\r\n\r\n\t      // cases:\r\n\t      // filled input: 00|\r\n\t      // optional empty input: 00[]|\r\n\t      // nested block: XX<[]>|\r\n\t      return this._pushLeft(function () {\r\n\t        if (_this2.block.isFixed) return;\r\n\t        _this2.offset = _this2.block.nearestInputPos(_this2.offset, DIRECTION.LEFT);\r\n\t        return true;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushLeftBeforeRequired\",\r\n\t    value: function pushLeftBeforeRequired() {\r\n\t      var _this3 = this;\r\n\r\n\t      return this._pushLeft(function () {\r\n\t        if (_this3.block.isFixed || _this3.block.isOptional && !_this3.block.value) return;\r\n\t        _this3.offset = _this3.block.nearestInputPos(_this3.offset, DIRECTION.LEFT);\r\n\t        return true;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushRightBeforeFilled\",\r\n\t    value: function pushRightBeforeFilled() {\r\n\t      var _this4 = this;\r\n\r\n\t      return this._pushRight(function () {\r\n\t        if (_this4.block.isFixed || !_this4.block.value) return;\r\n\t        _this4.offset = _this4.block.nearestInputPos(_this4.offset, DIRECTION.FORCE_RIGHT);\r\n\t        if (_this4.offset !== _this4.block.value.length) return true;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushRightBeforeInput\",\r\n\t    value: function pushRightBeforeInput() {\r\n\t      var _this5 = this;\r\n\r\n\t      return this._pushRight(function () {\r\n\t        if (_this5.block.isFixed) return; // const o = this.offset;\r\n\r\n\t        _this5.offset = _this5.block.nearestInputPos(_this5.offset, DIRECTION.NONE); // HACK cases like (STILL DOES NOT WORK FOR NESTED)\r\n\t        // aa|X\r\n\t        // aa<X|[]>X_    - this will not work\r\n\t        // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;\r\n\r\n\t        return true;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"pushRightBeforeRequired\",\r\n\t    value: function pushRightBeforeRequired() {\r\n\t      var _this6 = this;\r\n\r\n\t      return this._pushRight(function () {\r\n\t        if (_this6.block.isFixed || _this6.block.isOptional && !_this6.block.value) return; // TODO check |[*]XX_\r\n\r\n\t        _this6.offset = _this6.block.nearestInputPos(_this6.offset, DIRECTION.NONE);\r\n\t        return true;\r\n\t      });\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return PatternCursor;\r\n\t}();\r\n\r\n\t/** Masking by RegExp */\r\n\r\n\tvar MaskedRegExp = /*#__PURE__*/function (_Masked) {\r\n\t  _inherits(MaskedRegExp, _Masked);\r\n\r\n\t  var _super = _createSuper(MaskedRegExp);\r\n\r\n\t  function MaskedRegExp() {\r\n\t    _classCallCheck(this, MaskedRegExp);\r\n\r\n\t    return _super.apply(this, arguments);\r\n\t  }\r\n\r\n\t  _createClass(MaskedRegExp, [{\r\n\t    key: \"_update\",\r\n\t    value:\r\n\t    /**\r\n\t      @override\r\n\t      @param {Object} opts\r\n\t    */\r\n\t    function _update(opts) {\r\n\t      if (opts.mask) opts.validate = function (value) {\r\n\t        return value.search(opts.mask) >= 0;\r\n\t      };\r\n\r\n\t      _get(_getPrototypeOf(MaskedRegExp.prototype), \"_update\", this).call(this, opts);\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedRegExp;\r\n\t}(Masked);\r\n\tIMask.MaskedRegExp = MaskedRegExp;\r\n\r\n\tvar _excluded$2 = [\"_blocks\"];\r\n\r\n\t/**\r\n\t  Pattern mask\r\n\t  @param {Object} opts\r\n\t  @param {Object} opts.blocks\r\n\t  @param {Object} opts.definitions\r\n\t  @param {string} opts.placeholderChar\r\n\t  @param {boolean} opts.lazy\r\n\t*/\r\n\tvar MaskedPattern = /*#__PURE__*/function (_Masked) {\r\n\t  _inherits(MaskedPattern, _Masked);\r\n\r\n\t  var _super = _createSuper(MaskedPattern);\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** Single char for empty input */\r\n\r\n\t  /** Show placeholder only when needed */\r\n\t  function MaskedPattern() {\r\n\t    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n\t    _classCallCheck(this, MaskedPattern);\r\n\r\n\t    // TODO type $Shape<MaskedPatternOptions>={} does not work\r\n\t    opts.definitions = Object.assign({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\r\n\t    return _super.call(this, Object.assign({}, MaskedPattern.DEFAULTS, opts));\r\n\t  }\r\n\t  /**\r\n\t    @override\r\n\t    @param {Object} opts\r\n\t  */\r\n\r\n\r\n\t  _createClass(MaskedPattern, [{\r\n\t    key: \"_update\",\r\n\t    value: function _update() {\r\n\t      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\t      opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n\r\n\t      _get(_getPrototypeOf(MaskedPattern.prototype), \"_update\", this).call(this, opts);\r\n\r\n\t      this._rebuildMask();\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_rebuildMask\",\r\n\t    value: function _rebuildMask() {\r\n\t      var _this = this;\r\n\r\n\t      var defs = this.definitions;\r\n\t      this._blocks = [];\r\n\t      this._stops = [];\r\n\t      this._maskedBlocks = {};\r\n\t      var pattern = this.mask;\r\n\t      if (!pattern || !defs) return;\r\n\t      var unmaskingBlock = false;\r\n\t      var optionalBlock = false;\r\n\r\n\t      for (var i = 0; i < pattern.length; ++i) {\r\n\t        if (this.blocks) {\r\n\t          var _ret = function () {\r\n\t            var p = pattern.slice(i);\r\n\t            var bNames = Object.keys(_this.blocks).filter(function (bName) {\r\n\t              return p.indexOf(bName) === 0;\r\n\t            }); // order by key length\r\n\r\n\t            bNames.sort(function (a, b) {\r\n\t              return b.length - a.length;\r\n\t            }); // use block name with max length\r\n\r\n\t            var bName = bNames[0];\r\n\r\n\t            if (bName) {\r\n\t              // $FlowFixMe no ideas\r\n\t              var maskedBlock = createMask(Object.assign({\r\n\t                parent: _this,\r\n\t                lazy: _this.lazy,\r\n\t                eager: _this.eager,\r\n\t                placeholderChar: _this.placeholderChar,\r\n\t                overwrite: _this.overwrite\r\n\t              }, _this.blocks[bName]));\r\n\r\n\t              if (maskedBlock) {\r\n\t                _this._blocks.push(maskedBlock); // store block index\r\n\r\n\r\n\t                if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\r\n\r\n\t                _this._maskedBlocks[bName].push(_this._blocks.length - 1);\r\n\t              }\r\n\r\n\t              i += bName.length - 1;\r\n\t              return \"continue\";\r\n\t            }\r\n\t          }();\r\n\r\n\t          if (_ret === \"continue\") continue;\r\n\t        }\r\n\r\n\t        var char = pattern[i];\r\n\t        var isInput = (char in defs);\r\n\r\n\t        if (char === MaskedPattern.STOP_CHAR) {\r\n\t          this._stops.push(this._blocks.length);\r\n\r\n\t          continue;\r\n\t        }\r\n\r\n\t        if (char === '{' || char === '}') {\r\n\t          unmaskingBlock = !unmaskingBlock;\r\n\t          continue;\r\n\t        }\r\n\r\n\t        if (char === '[' || char === ']') {\r\n\t          optionalBlock = !optionalBlock;\r\n\t          continue;\r\n\t        }\r\n\r\n\t        if (char === MaskedPattern.ESCAPE_CHAR) {\r\n\t          ++i;\r\n\t          char = pattern[i];\r\n\t          if (!char) break;\r\n\t          isInput = false;\r\n\t        }\r\n\r\n\t        var def = isInput ? new PatternInputDefinition({\r\n\t          parent: this,\r\n\t          lazy: this.lazy,\r\n\t          eager: this.eager,\r\n\t          placeholderChar: this.placeholderChar,\r\n\t          mask: defs[char],\r\n\t          isOptional: optionalBlock\r\n\t        }) : new PatternFixedDefinition({\r\n\t          char: char,\r\n\t          eager: this.eager,\r\n\t          isUnmasking: unmaskingBlock\r\n\t        });\r\n\r\n\t        this._blocks.push(def);\r\n\t      }\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return Object.assign({}, _get(_getPrototypeOf(MaskedPattern.prototype), \"state\", this), {\r\n\t        _blocks: this._blocks.map(function (b) {\r\n\t          return b.state;\r\n\t        })\r\n\t      });\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      var _blocks = state._blocks,\r\n\t          maskedState = _objectWithoutProperties(state, _excluded$2);\r\n\r\n\t      this._blocks.forEach(function (b, bi) {\r\n\t        return b.state = _blocks[bi];\r\n\t      });\r\n\r\n\t      _set(_getPrototypeOf(MaskedPattern.prototype), \"state\", maskedState, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"reset\",\r\n\t    value: function reset() {\r\n\t      _get(_getPrototypeOf(MaskedPattern.prototype), \"reset\", this).call(this);\r\n\r\n\t      this._blocks.forEach(function (b) {\r\n\t        return b.reset();\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      return this._blocks.every(function (b) {\r\n\t        return b.isComplete;\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isFilled\",\r\n\t    get: function get() {\r\n\t      return this._blocks.every(function (b) {\r\n\t        return b.isFilled;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"isFixed\",\r\n\t    get: function get() {\r\n\t      return this._blocks.every(function (b) {\r\n\t        return b.isFixed;\r\n\t      });\r\n\t    }\r\n\t  }, {\r\n\t    key: \"isOptional\",\r\n\t    get: function get() {\r\n\t      return this._blocks.every(function (b) {\r\n\t        return b.isOptional;\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {\r\n\t      this._blocks.forEach(function (b) {\r\n\t        return b.doCommit();\r\n\t      });\r\n\r\n\t      _get(_getPrototypeOf(MaskedPattern.prototype), \"doCommit\", this).call(this);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this._blocks.reduce(function (str, b) {\r\n\t        return str += b.unmaskedValue;\r\n\t      }, '');\r\n\t    },\r\n\t    set: function set(unmaskedValue) {\r\n\t      _set(_getPrototypeOf(MaskedPattern.prototype), \"unmaskedValue\", unmaskedValue, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      // TODO return _value when not in change?\r\n\t      return this._blocks.reduce(function (str, b) {\r\n\t        return str += b.value;\r\n\t      }, '');\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      _set(_getPrototypeOf(MaskedPattern.prototype), \"value\", value, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"appendTail\",\r\n\t    value: function appendTail(tail) {\r\n\t      return _get(_getPrototypeOf(MaskedPattern.prototype), \"appendTail\", this).call(this, tail).aggregate(this._appendPlaceholder());\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_appendEager\",\r\n\t    value: function _appendEager() {\r\n\t      var _this$_mapPosToBlock;\r\n\r\n\t      var details = new ChangeDetails();\r\n\t      var startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.value.length)) === null || _this$_mapPosToBlock === void 0 ? void 0 : _this$_mapPosToBlock.index;\r\n\t      if (startBlockIndex == null) return details; // TODO test if it works for nested pattern masks\r\n\r\n\t      if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;\r\n\r\n\t      for (var bi = startBlockIndex; bi < this._blocks.length; ++bi) {\r\n\t        var d = this._blocks[bi]._appendEager();\r\n\r\n\t        if (!d.inserted) break;\r\n\t        details.aggregate(d);\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_appendCharRaw\",\r\n\t    value: function _appendCharRaw(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t      var blockIter = this._mapPosToBlock(this.value.length);\r\n\r\n\t      var details = new ChangeDetails();\r\n\t      if (!blockIter) return details;\r\n\r\n\t      for (var bi = blockIter.index;; ++bi) {\r\n\t        var _flags$_beforeTailSta;\r\n\r\n\t        var _block = this._blocks[bi];\r\n\t        if (!_block) break;\r\n\r\n\t        var blockDetails = _block._appendChar(ch, Object.assign({}, flags, {\r\n\t          _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) === null || _flags$_beforeTailSta === void 0 ? void 0 : _flags$_beforeTailSta._blocks[bi]\r\n\t        }));\r\n\r\n\t        var skip = blockDetails.skip;\r\n\t        details.aggregate(blockDetails);\r\n\t        if (skip || blockDetails.rawInserted) break; // go next char\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"extractTail\",\r\n\t    value: function extractTail() {\r\n\t      var _this2 = this;\r\n\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      var chunkTail = new ChunksTailDetails();\r\n\t      if (fromPos === toPos) return chunkTail;\r\n\r\n\t      this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {\r\n\t        var blockChunk = b.extractTail(bFromPos, bToPos);\r\n\t        blockChunk.stop = _this2._findStopBefore(bi);\r\n\t        blockChunk.from = _this2._blockStartPos(bi);\r\n\t        if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\r\n\t        chunkTail.extend(blockChunk);\r\n\t      });\r\n\r\n\t      return chunkTail;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\t      if (fromPos === toPos) return '';\r\n\t      var input = '';\r\n\r\n\t      this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\r\n\t        input += b.extractInput(fromPos, toPos, flags);\r\n\t      });\r\n\r\n\t      return input;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_findStopBefore\",\r\n\t    value: function _findStopBefore(blockIndex) {\r\n\t      var stopBefore;\r\n\r\n\t      for (var si = 0; si < this._stops.length; ++si) {\r\n\t        var stop = this._stops[si];\r\n\t        if (stop <= blockIndex) stopBefore = stop;else break;\r\n\t      }\r\n\r\n\t      return stopBefore;\r\n\t    }\r\n\t    /** Appends placeholder depending on laziness */\r\n\r\n\t  }, {\r\n\t    key: \"_appendPlaceholder\",\r\n\t    value: function _appendPlaceholder(toBlockIndex) {\r\n\t      var _this3 = this;\r\n\r\n\t      var details = new ChangeDetails();\r\n\t      if (this.lazy && toBlockIndex == null) return details;\r\n\r\n\t      var startBlockIter = this._mapPosToBlock(this.value.length);\r\n\r\n\t      if (!startBlockIter) return details;\r\n\t      var startBlockIndex = startBlockIter.index;\r\n\t      var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\r\n\r\n\t      this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\r\n\t        if (!b.lazy || toBlockIndex != null) {\r\n\t          // $FlowFixMe `_blocks` may not be present\r\n\t          var args = b._blocks != null ? [b._blocks.length] : [];\r\n\r\n\t          var bDetails = b._appendPlaceholder.apply(b, args);\r\n\r\n\t          _this3._value += bDetails.inserted;\r\n\t          details.aggregate(bDetails);\r\n\t        }\r\n\t      });\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /** Finds block in pos */\r\n\r\n\t  }, {\r\n\t    key: \"_mapPosToBlock\",\r\n\t    value: function _mapPosToBlock(pos) {\r\n\t      var accVal = '';\r\n\r\n\t      for (var bi = 0; bi < this._blocks.length; ++bi) {\r\n\t        var _block2 = this._blocks[bi];\r\n\t        var blockStartPos = accVal.length;\r\n\t        accVal += _block2.value;\r\n\r\n\t        if (pos <= accVal.length) {\r\n\t          return {\r\n\t            index: bi,\r\n\t            offset: pos - blockStartPos\r\n\t          };\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_blockStartPos\",\r\n\t    value: function _blockStartPos(blockIndex) {\r\n\t      return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\r\n\t        return pos += b.value.length;\r\n\t      }, 0);\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_forEachBlocksInRange\",\r\n\t    value: function _forEachBlocksInRange(fromPos) {\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      var fn = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n\t      var fromBlockIter = this._mapPosToBlock(fromPos);\r\n\r\n\t      if (fromBlockIter) {\r\n\t        var toBlockIter = this._mapPosToBlock(toPos); // process first block\r\n\r\n\r\n\t        var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\r\n\t        var fromBlockStartPos = fromBlockIter.offset;\r\n\t        var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;\r\n\t        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\r\n\r\n\t        if (toBlockIter && !isSameBlock) {\r\n\t          // process intermediate blocks\r\n\t          for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\r\n\t            fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\r\n\t          } // process last block\r\n\r\n\r\n\t          fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n\t      var removeDetails = _get(_getPrototypeOf(MaskedPattern.prototype), \"remove\", this).call(this, fromPos, toPos);\r\n\r\n\t      this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\r\n\t        removeDetails.aggregate(b.remove(bFromPos, bToPos));\r\n\t      });\r\n\r\n\t      return removeDetails;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos(cursorPos) {\r\n\t      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n\t      if (!this._blocks.length) return 0;\r\n\t      var cursor = new PatternCursor(this, cursorPos);\r\n\r\n\t      if (direction === DIRECTION.NONE) {\r\n\t        // -------------------------------------------------\r\n\t        // NONE should only go out from fixed to the right!\r\n\t        // -------------------------------------------------\r\n\t        if (cursor.pushRightBeforeInput()) return cursor.pos;\r\n\t        cursor.popState();\r\n\t        if (cursor.pushLeftBeforeInput()) return cursor.pos;\r\n\t        return this.value.length;\r\n\t      } // FORCE is only about a|* otherwise is 0\r\n\r\n\r\n\t      if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\r\n\t        // try to break fast when *|a\r\n\t        if (direction === DIRECTION.LEFT) {\r\n\t          cursor.pushRightBeforeFilled();\r\n\t          if (cursor.ok && cursor.pos === cursorPos) return cursorPos;\r\n\t          cursor.popState();\r\n\t        } // forward flow\r\n\r\n\r\n\t        cursor.pushLeftBeforeInput();\r\n\t        cursor.pushLeftBeforeRequired();\r\n\t        cursor.pushLeftBeforeFilled(); // backward flow\r\n\r\n\t        if (direction === DIRECTION.LEFT) {\r\n\t          cursor.pushRightBeforeInput();\r\n\t          cursor.pushRightBeforeRequired();\r\n\t          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\r\n\t          cursor.popState();\r\n\t          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\r\n\t          cursor.popState();\r\n\t        }\r\n\r\n\t        if (cursor.ok) return cursor.pos;\r\n\t        if (direction === DIRECTION.FORCE_LEFT) return 0;\r\n\t        cursor.popState();\r\n\t        if (cursor.ok) return cursor.pos;\r\n\t        cursor.popState();\r\n\t        if (cursor.ok) return cursor.pos; // cursor.popState();\r\n\t        // if (\r\n\t        //   cursor.pushRightBeforeInput() &&\r\n\t        //   // TODO HACK for lazy if has aligned left inside fixed and has came to the start - use start position\r\n\t        //   (!this.lazy || this.extractInput())\r\n\t        // ) return cursor.pos;\r\n\r\n\t        return 0;\r\n\t      }\r\n\r\n\t      if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\r\n\t        // forward flow\r\n\t        cursor.pushRightBeforeInput();\r\n\t        cursor.pushRightBeforeRequired();\r\n\t        if (cursor.pushRightBeforeFilled()) return cursor.pos;\r\n\t        if (direction === DIRECTION.FORCE_RIGHT) return this.value.length; // backward flow\r\n\r\n\t        cursor.popState();\r\n\t        if (cursor.ok) return cursor.pos;\r\n\t        cursor.popState();\r\n\t        if (cursor.ok) return cursor.pos;\r\n\t        return this.nearestInputPos(cursorPos, DIRECTION.LEFT);\r\n\t      }\r\n\r\n\t      return cursorPos;\r\n\t    }\r\n\t    /** Get block by name */\r\n\r\n\t  }, {\r\n\t    key: \"maskedBlock\",\r\n\t    value: function maskedBlock(name) {\r\n\t      return this.maskedBlocks(name)[0];\r\n\t    }\r\n\t    /** Get all blocks by name */\r\n\r\n\t  }, {\r\n\t    key: \"maskedBlocks\",\r\n\t    value: function maskedBlocks(name) {\r\n\t      var _this4 = this;\r\n\r\n\t      var indices = this._maskedBlocks[name];\r\n\t      if (!indices) return [];\r\n\t      return indices.map(function (gi) {\r\n\t        return _this4._blocks[gi];\r\n\t      });\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedPattern;\r\n\t}(Masked);\r\n\tMaskedPattern.DEFAULTS = {\r\n\t  lazy: true,\r\n\t  placeholderChar: '_'\r\n\t};\r\n\tMaskedPattern.STOP_CHAR = '`';\r\n\tMaskedPattern.ESCAPE_CHAR = '\\\\';\r\n\tMaskedPattern.InputDefinition = PatternInputDefinition;\r\n\tMaskedPattern.FixedDefinition = PatternFixedDefinition;\r\n\tIMask.MaskedPattern = MaskedPattern;\r\n\r\n\t/** Pattern which accepts ranges */\r\n\r\n\tvar MaskedRange = /*#__PURE__*/function (_MaskedPattern) {\r\n\t  _inherits(MaskedRange, _MaskedPattern);\r\n\r\n\t  var _super = _createSuper(MaskedRange);\r\n\r\n\t  function MaskedRange() {\r\n\t    _classCallCheck(this, MaskedRange);\r\n\r\n\t    return _super.apply(this, arguments);\r\n\t  }\r\n\r\n\t  _createClass(MaskedRange, [{\r\n\t    key: \"_matchFrom\",\r\n\t    get:\r\n\t    /**\r\n\t      Optionally sets max length of pattern.\r\n\t      Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\r\n\t    */\r\n\r\n\t    /** Min bound */\r\n\r\n\t    /** Max bound */\r\n\r\n\t    /** */\r\n\t    function get() {\r\n\t      return this.maxLength - String(this.from).length;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_update\",\r\n\t    value: function _update(opts) {\r\n\t      // TODO type\r\n\t      opts = Object.assign({\r\n\t        to: this.to || 0,\r\n\t        from: this.from || 0,\r\n\t        maxLength: this.maxLength || 0\r\n\t      }, opts);\r\n\t      var maxLength = String(opts.to).length;\r\n\t      if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\r\n\t      opts.maxLength = maxLength;\r\n\t      var fromStr = String(opts.from).padStart(maxLength, '0');\r\n\t      var toStr = String(opts.to).padStart(maxLength, '0');\r\n\t      var sameCharsCount = 0;\r\n\r\n\t      while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\r\n\t        ++sameCharsCount;\r\n\t      }\r\n\r\n\t      opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\r\n\r\n\t      _get(_getPrototypeOf(MaskedRange.prototype), \"_update\", this).call(this, opts);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      return _get(_getPrototypeOf(MaskedRange.prototype), \"isComplete\", this) && Boolean(this.value);\r\n\t    }\r\n\t  }, {\r\n\t    key: \"boundaries\",\r\n\t    value: function boundaries(str) {\r\n\t      var minstr = '';\r\n\t      var maxstr = '';\r\n\r\n\t      var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\r\n\t          _ref2 = _slicedToArray(_ref, 3),\r\n\t          placeholder = _ref2[1],\r\n\t          num = _ref2[2];\r\n\r\n\t      if (num) {\r\n\t        minstr = '0'.repeat(placeholder.length) + num;\r\n\t        maxstr = '9'.repeat(placeholder.length) + num;\r\n\t      }\r\n\r\n\t      minstr = minstr.padEnd(this.maxLength, '0');\r\n\t      maxstr = maxstr.padEnd(this.maxLength, '9');\r\n\t      return [minstr, maxstr];\r\n\t    } // TODO str is a single char everytime\r\n\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doPrepare\",\r\n\t    value: function doPrepare(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      var details;\r\n\r\n\t      var _normalizePrepare = normalizePrepare(_get(_getPrototypeOf(MaskedRange.prototype), \"doPrepare\", this).call(this, ch.replace(/\\D/g, ''), flags));\r\n\r\n\t      var _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2);\r\n\r\n\t      ch = _normalizePrepare2[0];\r\n\t      details = _normalizePrepare2[1];\r\n\t      if (!this.autofix || !ch) return ch;\r\n\t      var fromStr = String(this.from).padStart(this.maxLength, '0');\r\n\t      var toStr = String(this.to).padStart(this.maxLength, '0');\r\n\t      var nextVal = this.value + ch;\r\n\t      if (nextVal.length > this.maxLength) return '';\r\n\r\n\t      var _this$boundaries = this.boundaries(nextVal),\r\n\t          _this$boundaries2 = _slicedToArray(_this$boundaries, 2),\r\n\t          minstr = _this$boundaries2[0],\r\n\t          maxstr = _this$boundaries2[1];\r\n\r\n\t      if (Number(maxstr) < this.from) return fromStr[nextVal.length - 1];\r\n\r\n\t      if (Number(minstr) > this.to) {\r\n\t        if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\r\n\t          return ['', details.aggregate(this.append(fromStr[nextVal.length - 1] + ch, flags))];\r\n\t        }\r\n\r\n\t        return toStr[nextVal.length - 1];\r\n\t      }\r\n\r\n\t      return ch;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate() {\r\n\t      var _get2;\r\n\r\n\t      var str = this.value;\r\n\t      var firstNonZero = str.search(/[^0]/);\r\n\t      if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n\t      var _this$boundaries3 = this.boundaries(str),\r\n\t          _this$boundaries4 = _slicedToArray(_this$boundaries3, 2),\r\n\t          minstr = _this$boundaries4[0],\r\n\t          maxstr = _this$boundaries4[1];\r\n\r\n\t      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n\t        args[_key] = arguments[_key];\r\n\t      }\r\n\r\n\t      return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = _get(_getPrototypeOf(MaskedRange.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedRange;\r\n\t}(MaskedPattern);\r\n\tIMask.MaskedRange = MaskedRange;\r\n\r\n\t/** Date mask */\r\n\r\n\tvar MaskedDate = /*#__PURE__*/function (_MaskedPattern) {\r\n\t  _inherits(MaskedDate, _MaskedPattern);\r\n\r\n\t  var _super = _createSuper(MaskedDate);\r\n\r\n\t  /** Pattern mask for date according to {@link MaskedDate#format} */\r\n\r\n\t  /** Start date */\r\n\r\n\t  /** End date */\r\n\r\n\t  /** */\r\n\r\n\t  /**\r\n\t    @param {Object} opts\r\n\t  */\r\n\t  function MaskedDate(opts) {\r\n\t    _classCallCheck(this, MaskedDate);\r\n\r\n\t    return _super.call(this, Object.assign({}, MaskedDate.DEFAULTS, opts));\r\n\t  }\r\n\t  /**\r\n\t    @override\r\n\t  */\r\n\r\n\r\n\t  _createClass(MaskedDate, [{\r\n\t    key: \"_update\",\r\n\t    value: function _update(opts) {\r\n\t      if (opts.mask === Date) delete opts.mask;\r\n\t      if (opts.pattern) opts.mask = opts.pattern;\r\n\t      var blocks = opts.blocks;\r\n\t      opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\r\n\r\n\t      if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\r\n\t      if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\r\n\r\n\t      if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\r\n\t        opts.blocks.m.from = opts.min.getMonth() + 1;\r\n\t        opts.blocks.m.to = opts.max.getMonth() + 1;\r\n\r\n\t        if (opts.blocks.m.from === opts.blocks.m.to) {\r\n\t          opts.blocks.d.from = opts.min.getDate();\r\n\t          opts.blocks.d.to = opts.max.getDate();\r\n\t        }\r\n\t      }\r\n\r\n\t      Object.assign(opts.blocks, this.blocks, blocks); // add autofix\r\n\r\n\t      Object.keys(opts.blocks).forEach(function (bk) {\r\n\t        var b = opts.blocks[bk];\r\n\t        if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\r\n\t      });\r\n\r\n\t      _get(_getPrototypeOf(MaskedDate.prototype), \"_update\", this).call(this, opts);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate() {\r\n\t      var _get2;\r\n\r\n\t      var date = this.date;\r\n\r\n\t      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n\t        args[_key] = arguments[_key];\r\n\t      }\r\n\r\n\t      return (_get2 = _get(_getPrototypeOf(MaskedDate.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\r\n\t    }\r\n\t    /** Checks if date is exists */\r\n\r\n\t  }, {\r\n\t    key: \"isDateExist\",\r\n\t    value: function isDateExist(str) {\r\n\t      return this.format(this.parse(str, this), this).indexOf(str) >= 0;\r\n\t    }\r\n\t    /** Parsed Date */\r\n\r\n\t  }, {\r\n\t    key: \"date\",\r\n\t    get: function get() {\r\n\t      return this.typedValue;\r\n\t    },\r\n\t    set: function set(date) {\r\n\t      this.typedValue = date;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"typedValue\",\r\n\t    get: function get() {\r\n\t      return this.isComplete ? _get(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", this) : null;\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      _set(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", value, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"maskEquals\",\r\n\t    value: function maskEquals(mask) {\r\n\t      return mask === Date || _get(_getPrototypeOf(MaskedDate.prototype), \"maskEquals\", this).call(this, mask);\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedDate;\r\n\t}(MaskedPattern);\r\n\tMaskedDate.DEFAULTS = {\r\n\t  pattern: 'd{.}`m{.}`Y',\r\n\t  format: function format(date) {\r\n\t    if (!date) return '';\r\n\t    var day = String(date.getDate()).padStart(2, '0');\r\n\t    var month = String(date.getMonth() + 1).padStart(2, '0');\r\n\t    var year = date.getFullYear();\r\n\t    return [day, month, year].join('.');\r\n\t  },\r\n\t  parse: function parse(str) {\r\n\t    var _str$split = str.split('.'),\r\n\t        _str$split2 = _slicedToArray(_str$split, 3),\r\n\t        day = _str$split2[0],\r\n\t        month = _str$split2[1],\r\n\t        year = _str$split2[2];\r\n\r\n\t    return new Date(year, month - 1, day);\r\n\t  }\r\n\t};\r\n\r\n\tMaskedDate.GET_DEFAULT_BLOCKS = function () {\r\n\t  return {\r\n\t    d: {\r\n\t      mask: MaskedRange,\r\n\t      from: 1,\r\n\t      to: 31,\r\n\t      maxLength: 2\r\n\t    },\r\n\t    m: {\r\n\t      mask: MaskedRange,\r\n\t      from: 1,\r\n\t      to: 12,\r\n\t      maxLength: 2\r\n\t    },\r\n\t    Y: {\r\n\t      mask: MaskedRange,\r\n\t      from: 1900,\r\n\t      to: 9999\r\n\t    }\r\n\t  };\r\n\t};\r\n\r\n\tIMask.MaskedDate = MaskedDate;\r\n\r\n\t/**\r\n\t  Generic element API to use with mask\r\n\t  @interface\r\n\t*/\r\n\tvar MaskElement = /*#__PURE__*/function () {\r\n\t  function MaskElement() {\r\n\t    _classCallCheck(this, MaskElement);\r\n\t  }\r\n\r\n\t  _createClass(MaskElement, [{\r\n\t    key: \"selectionStart\",\r\n\t    get:\r\n\t    /** */\r\n\r\n\t    /** */\r\n\r\n\t    /** */\r\n\r\n\t    /** Safely returns selection start */\r\n\t    function get() {\r\n\t      var start;\r\n\r\n\t      try {\r\n\t        start = this._unsafeSelectionStart;\r\n\t      } catch (e) {}\r\n\r\n\t      return start != null ? start : this.value.length;\r\n\t    }\r\n\t    /** Safely returns selection end */\r\n\r\n\t  }, {\r\n\t    key: \"selectionEnd\",\r\n\t    get: function get() {\r\n\t      var end;\r\n\r\n\t      try {\r\n\t        end = this._unsafeSelectionEnd;\r\n\t      } catch (e) {}\r\n\r\n\t      return end != null ? end : this.value.length;\r\n\t    }\r\n\t    /** Safely sets element selection */\r\n\r\n\t  }, {\r\n\t    key: \"select\",\r\n\t    value: function select(start, end) {\r\n\t      if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\r\n\r\n\t      try {\r\n\t        this._unsafeSelect(start, end);\r\n\t      } catch (e) {}\r\n\t    }\r\n\t    /** Should be overriden in subclasses */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelect\",\r\n\t    value: function _unsafeSelect(start, end) {}\r\n\t    /** Should be overriden in subclasses */\r\n\r\n\t  }, {\r\n\t    key: \"isActive\",\r\n\t    get: function get() {\r\n\t      return false;\r\n\t    }\r\n\t    /** Should be overriden in subclasses */\r\n\r\n\t  }, {\r\n\t    key: \"bindEvents\",\r\n\t    value: function bindEvents(handlers) {}\r\n\t    /** Should be overriden in subclasses */\r\n\r\n\t  }, {\r\n\t    key: \"unbindEvents\",\r\n\t    value: function unbindEvents() {}\r\n\t  }]);\r\n\r\n\t  return MaskElement;\r\n\t}();\r\n\tIMask.MaskElement = MaskElement;\r\n\r\n\t/** Bridge between HTMLElement and {@link Masked} */\r\n\r\n\tvar HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\r\n\t  _inherits(HTMLMaskElement, _MaskElement);\r\n\r\n\t  var _super = _createSuper(HTMLMaskElement);\r\n\r\n\t  /** Mapping between HTMLElement events and mask internal events */\r\n\r\n\t  /** HTMLElement to use mask on */\r\n\r\n\t  /**\r\n\t    @param {HTMLInputElement|HTMLTextAreaElement} input\r\n\t  */\r\n\t  function HTMLMaskElement(input) {\r\n\t    var _this;\r\n\r\n\t    _classCallCheck(this, HTMLMaskElement);\r\n\r\n\t    _this = _super.call(this);\r\n\t    _this.input = input;\r\n\t    _this._handlers = {};\r\n\t    return _this;\r\n\t  }\r\n\t  /** */\r\n\t  // $FlowFixMe https://github.com/facebook/flow/issues/2839\r\n\r\n\r\n\t  _createClass(HTMLMaskElement, [{\r\n\t    key: \"rootElement\",\r\n\t    get: function get() {\r\n\t      var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\r\n\r\n\t      return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\r\n\t    }\r\n\t    /**\r\n\t      Is element in focus\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isActive\",\r\n\t    get: function get() {\r\n\t      //$FlowFixMe\r\n\t      return this.input === this.rootElement.activeElement;\r\n\t    }\r\n\t    /**\r\n\t      Returns HTMLElement selection start\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelectionStart\",\r\n\t    get: function get() {\r\n\t      return this.input.selectionStart;\r\n\t    }\r\n\t    /**\r\n\t      Returns HTMLElement selection end\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelectionEnd\",\r\n\t    get: function get() {\r\n\t      return this.input.selectionEnd;\r\n\t    }\r\n\t    /**\r\n\t      Sets HTMLElement selection\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelect\",\r\n\t    value: function _unsafeSelect(start, end) {\r\n\t      this.input.setSelectionRange(start, end);\r\n\t    }\r\n\t    /**\r\n\t      HTMLElement value\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this.input.value;\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.input.value = value;\r\n\t    }\r\n\t    /**\r\n\t      Binds HTMLElement events to mask internal events\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"bindEvents\",\r\n\t    value: function bindEvents(handlers) {\r\n\t      var _this2 = this;\r\n\r\n\t      Object.keys(handlers).forEach(function (event) {\r\n\t        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      Unbinds HTMLElement events to mask internal events\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"unbindEvents\",\r\n\t    value: function unbindEvents() {\r\n\t      var _this3 = this;\r\n\r\n\t      Object.keys(this._handlers).forEach(function (event) {\r\n\t        return _this3._toggleEventHandler(event);\r\n\t      });\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_toggleEventHandler\",\r\n\t    value: function _toggleEventHandler(event, handler) {\r\n\t      if (this._handlers[event]) {\r\n\t        this.input.removeEventListener(event, this._handlers[event]);\r\n\t        delete this._handlers[event];\r\n\t      }\r\n\r\n\t      if (handler) {\r\n\t        this.input.addEventListener(event, handler);\r\n\t        this._handlers[event] = handler;\r\n\t      }\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return HTMLMaskElement;\r\n\t}(MaskElement);\r\n\tHTMLMaskElement.EVENTS_MAP = {\r\n\t  selectionChange: 'keydown',\r\n\t  input: 'input',\r\n\t  drop: 'drop',\r\n\t  click: 'click',\r\n\t  focus: 'focus',\r\n\t  commit: 'blur'\r\n\t};\r\n\tIMask.HTMLMaskElement = HTMLMaskElement;\r\n\r\n\tvar HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\r\n\t  _inherits(HTMLContenteditableMaskElement, _HTMLMaskElement);\r\n\r\n\t  var _super = _createSuper(HTMLContenteditableMaskElement);\r\n\r\n\t  function HTMLContenteditableMaskElement() {\r\n\t    _classCallCheck(this, HTMLContenteditableMaskElement);\r\n\r\n\t    return _super.apply(this, arguments);\r\n\t  }\r\n\r\n\t  _createClass(HTMLContenteditableMaskElement, [{\r\n\t    key: \"_unsafeSelectionStart\",\r\n\t    get:\r\n\t    /**\r\n\t      Returns HTMLElement selection start\r\n\t      @override\r\n\t    */\r\n\t    function get() {\r\n\t      var root = this.rootElement;\r\n\t      var selection = root.getSelection && root.getSelection();\r\n\t      var anchorOffset = selection && selection.anchorOffset;\r\n\t      var focusOffset = selection && selection.focusOffset;\r\n\r\n\t      if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\r\n\t        return anchorOffset;\r\n\t      }\r\n\r\n\t      return focusOffset;\r\n\t    }\r\n\t    /**\r\n\t      Returns HTMLElement selection end\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelectionEnd\",\r\n\t    get: function get() {\r\n\t      var root = this.rootElement;\r\n\t      var selection = root.getSelection && root.getSelection();\r\n\t      var anchorOffset = selection && selection.anchorOffset;\r\n\t      var focusOffset = selection && selection.focusOffset;\r\n\r\n\t      if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\r\n\t        return anchorOffset;\r\n\t      }\r\n\r\n\t      return focusOffset;\r\n\t    }\r\n\t    /**\r\n\t      Sets HTMLElement selection\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_unsafeSelect\",\r\n\t    value: function _unsafeSelect(start, end) {\r\n\t      if (!this.rootElement.createRange) return;\r\n\t      var range = this.rootElement.createRange();\r\n\t      range.setStart(this.input.firstChild || this.input, start);\r\n\t      range.setEnd(this.input.lastChild || this.input, end);\r\n\t      var root = this.rootElement;\r\n\t      var selection = root.getSelection && root.getSelection();\r\n\r\n\t      if (selection) {\r\n\t        selection.removeAllRanges();\r\n\t        selection.addRange(range);\r\n\t      }\r\n\t    }\r\n\t    /**\r\n\t      HTMLElement value\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      // $FlowFixMe\r\n\t      return this.input.textContent;\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      this.input.textContent = value;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return HTMLContenteditableMaskElement;\r\n\t}(HTMLMaskElement);\r\n\tIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\r\n\r\n\tvar _excluded$1 = [\"mask\"];\r\n\t/** Listens to element events and controls changes between element and {@link Masked} */\r\n\r\n\tvar InputMask = /*#__PURE__*/function () {\r\n\t  /**\r\n\t    View element\r\n\t    @readonly\r\n\t  */\r\n\r\n\t  /**\r\n\t    Internal {@link Masked} model\r\n\t    @readonly\r\n\t  */\r\n\r\n\t  /**\r\n\t    @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n\t    @param {Object} opts\r\n\t  */\r\n\t  function InputMask(el, opts) {\r\n\t    _classCallCheck(this, InputMask);\r\n\r\n\t    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLMaskElement(el);\r\n\t    this.masked = createMask(opts);\r\n\t    this._listeners = {};\r\n\t    this._value = '';\r\n\t    this._unmaskedValue = '';\r\n\t    this._saveSelection = this._saveSelection.bind(this);\r\n\t    this._onInput = this._onInput.bind(this);\r\n\t    this._onChange = this._onChange.bind(this);\r\n\t    this._onDrop = this._onDrop.bind(this);\r\n\t    this._onFocus = this._onFocus.bind(this);\r\n\t    this._onClick = this._onClick.bind(this);\r\n\t    this.alignCursor = this.alignCursor.bind(this);\r\n\t    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n\t    this._bindEvents(); // refresh\r\n\r\n\r\n\t    this.updateValue();\r\n\r\n\t    this._onChange();\r\n\t  }\r\n\t  /** Read or update mask */\r\n\r\n\r\n\t  _createClass(InputMask, [{\r\n\t    key: \"mask\",\r\n\t    get: function get() {\r\n\t      return this.masked.mask;\r\n\t    },\r\n\t    set: function set(mask) {\r\n\t      if (this.maskEquals(mask)) return; // $FlowFixMe No ideas ... after update\r\n\r\n\t      if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\r\n\t        this.masked.updateOptions({\r\n\t          mask: mask\r\n\t        });\r\n\t        return;\r\n\t      }\r\n\r\n\t      var masked = createMask({\r\n\t        mask: mask\r\n\t      });\r\n\t      masked.unmaskedValue = this.masked.unmaskedValue;\r\n\t      this.masked = masked;\r\n\t    }\r\n\t    /** Raw value */\r\n\r\n\t  }, {\r\n\t    key: \"maskEquals\",\r\n\t    value: function maskEquals(mask) {\r\n\t      var _this$masked;\r\n\r\n\t      return mask == null || ((_this$masked = this.masked) === null || _this$masked === void 0 ? void 0 : _this$masked.maskEquals(mask));\r\n\t    }\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this._value;\r\n\t    },\r\n\t    set: function set(str) {\r\n\t      this.masked.value = str;\r\n\t      this.updateControl();\r\n\t      this.alignCursor();\r\n\t    }\r\n\t    /** Unmasked value */\r\n\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this._unmaskedValue;\r\n\t    },\r\n\t    set: function set(str) {\r\n\t      this.masked.unmaskedValue = str;\r\n\t      this.updateControl();\r\n\t      this.alignCursor();\r\n\t    }\r\n\t    /** Typed unmasked value */\r\n\r\n\t  }, {\r\n\t    key: \"typedValue\",\r\n\t    get: function get() {\r\n\t      return this.masked.typedValue;\r\n\t    },\r\n\t    set: function set(val) {\r\n\t      this.masked.typedValue = val;\r\n\t      this.updateControl();\r\n\t      this.alignCursor();\r\n\t    }\r\n\t    /**\r\n\t      Starts listening to element events\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_bindEvents\",\r\n\t    value: function _bindEvents() {\r\n\t      this.el.bindEvents({\r\n\t        selectionChange: this._saveSelection,\r\n\t        input: this._onInput,\r\n\t        drop: this._onDrop,\r\n\t        click: this._onClick,\r\n\t        focus: this._onFocus,\r\n\t        commit: this._onChange\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      Stops listening to element events\r\n\t      @protected\r\n\t     */\r\n\r\n\t  }, {\r\n\t    key: \"_unbindEvents\",\r\n\t    value: function _unbindEvents() {\r\n\t      if (this.el) this.el.unbindEvents();\r\n\t    }\r\n\t    /**\r\n\t      Fires custom event\r\n\t      @protected\r\n\t     */\r\n\r\n\t  }, {\r\n\t    key: \"_fireEvent\",\r\n\t    value: function _fireEvent(ev) {\r\n\t      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n\t        args[_key - 1] = arguments[_key];\r\n\t      }\r\n\r\n\t      var listeners = this._listeners[ev];\r\n\t      if (!listeners) return;\r\n\t      listeners.forEach(function (l) {\r\n\t        return l.apply(void 0, args);\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      Current selection start\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"selectionStart\",\r\n\t    get: function get() {\r\n\t      return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\r\n\t    }\r\n\t    /** Current cursor position */\r\n\r\n\t  }, {\r\n\t    key: \"cursorPos\",\r\n\t    get: function get() {\r\n\t      return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\r\n\t    },\r\n\t    set: function set(pos) {\r\n\t      if (!this.el || !this.el.isActive) return;\r\n\t      this.el.select(pos, pos);\r\n\r\n\t      this._saveSelection();\r\n\t    }\r\n\t    /**\r\n\t      Stores current selection\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_saveSelection\",\r\n\t    value: function\r\n\t      /* ev */\r\n\t    _saveSelection() {\r\n\t      if (this.value !== this.el.value) {\r\n\t        console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\r\n\t      }\r\n\r\n\t      this._selection = {\r\n\t        start: this.selectionStart,\r\n\t        end: this.cursorPos\r\n\t      };\r\n\t    }\r\n\t    /** Syncronizes model value from view */\r\n\r\n\t  }, {\r\n\t    key: \"updateValue\",\r\n\t    value: function updateValue() {\r\n\t      this.masked.value = this.el.value;\r\n\t      this._value = this.masked.value;\r\n\t    }\r\n\t    /** Syncronizes view from model value, fires change events */\r\n\r\n\t  }, {\r\n\t    key: \"updateControl\",\r\n\t    value: function updateControl() {\r\n\t      var newUnmaskedValue = this.masked.unmaskedValue;\r\n\t      var newValue = this.masked.value;\r\n\t      var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\r\n\t      this._unmaskedValue = newUnmaskedValue;\r\n\t      this._value = newValue;\r\n\t      if (this.el.value !== newValue) this.el.value = newValue;\r\n\t      if (isChanged) this._fireChangeEvents();\r\n\t    }\r\n\t    /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\r\n\r\n\t  }, {\r\n\t    key: \"updateOptions\",\r\n\t    value: function updateOptions(opts) {\r\n\t      var mask = opts.mask,\r\n\t          restOpts = _objectWithoutProperties(opts, _excluded$1);\r\n\r\n\t      var updateMask = !this.maskEquals(mask);\r\n\t      var updateOpts = !objectIncludes(this.masked, restOpts);\r\n\t      if (updateMask) this.mask = mask;\r\n\t      if (updateOpts) this.masked.updateOptions(restOpts);\r\n\t      if (updateMask || updateOpts) this.updateControl();\r\n\t    }\r\n\t    /** Updates cursor */\r\n\r\n\t  }, {\r\n\t    key: \"updateCursor\",\r\n\t    value: function updateCursor(cursorPos) {\r\n\t      if (cursorPos == null) return;\r\n\t      this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\r\n\r\n\t      this._delayUpdateCursor(cursorPos);\r\n\t    }\r\n\t    /**\r\n\t      Delays cursor update to support mobile browsers\r\n\t      @private\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_delayUpdateCursor\",\r\n\t    value: function _delayUpdateCursor(cursorPos) {\r\n\t      var _this = this;\r\n\r\n\t      this._abortUpdateCursor();\r\n\r\n\t      this._changingCursorPos = cursorPos;\r\n\t      this._cursorChanging = setTimeout(function () {\r\n\t        if (!_this.el) return; // if was destroyed\r\n\r\n\t        _this.cursorPos = _this._changingCursorPos;\r\n\r\n\t        _this._abortUpdateCursor();\r\n\t      }, 10);\r\n\t    }\r\n\t    /**\r\n\t      Fires custom events\r\n\t      @protected\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_fireChangeEvents\",\r\n\t    value: function _fireChangeEvents() {\r\n\t      this._fireEvent('accept', this._inputEvent);\r\n\r\n\t      if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\r\n\t    }\r\n\t    /**\r\n\t      Aborts delayed cursor update\r\n\t      @private\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_abortUpdateCursor\",\r\n\t    value: function _abortUpdateCursor() {\r\n\t      if (this._cursorChanging) {\r\n\t        clearTimeout(this._cursorChanging);\r\n\t        delete this._cursorChanging;\r\n\t      }\r\n\t    }\r\n\t    /** Aligns cursor to nearest available position */\r\n\r\n\t  }, {\r\n\t    key: \"alignCursor\",\r\n\t    value: function alignCursor() {\r\n\t      this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\r\n\t    }\r\n\t    /** Aligns cursor only if selection is empty */\r\n\r\n\t  }, {\r\n\t    key: \"alignCursorFriendly\",\r\n\t    value: function alignCursorFriendly() {\r\n\t      if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\r\n\r\n\t      this.alignCursor();\r\n\t    }\r\n\t    /** Adds listener on custom event */\r\n\r\n\t  }, {\r\n\t    key: \"on\",\r\n\t    value: function on(ev, handler) {\r\n\t      if (!this._listeners[ev]) this._listeners[ev] = [];\r\n\r\n\t      this._listeners[ev].push(handler);\r\n\r\n\t      return this;\r\n\t    }\r\n\t    /** Removes custom event listener */\r\n\r\n\t  }, {\r\n\t    key: \"off\",\r\n\t    value: function off(ev, handler) {\r\n\t      if (!this._listeners[ev]) return this;\r\n\r\n\t      if (!handler) {\r\n\t        delete this._listeners[ev];\r\n\t        return this;\r\n\t      }\r\n\r\n\t      var hIndex = this._listeners[ev].indexOf(handler);\r\n\r\n\t      if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\r\n\t      return this;\r\n\t    }\r\n\t    /** Handles view input event */\r\n\r\n\t  }, {\r\n\t    key: \"_onInput\",\r\n\t    value: function _onInput(e) {\r\n\t      this._inputEvent = e;\r\n\r\n\t      this._abortUpdateCursor(); // fix strange IE behavior\r\n\r\n\r\n\t      if (!this._selection) return this.updateValue();\r\n\t      var details = new ActionDetails( // new state\r\n\t      this.el.value, this.cursorPos, // old state\r\n\t      this.value, this._selection);\r\n\t      var oldRawValue = this.masked.rawInputValue;\r\n\t      var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset; // force align in remove direction only if no input chars were removed\r\n\t      // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\r\n\r\n\t      var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\r\n\t      var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\r\n\t      if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\r\n\t      this.updateControl();\r\n\t      this.updateCursor(cursorPos);\r\n\t      delete this._inputEvent;\r\n\t    }\r\n\t    /** Handles view change event and commits model value */\r\n\r\n\t  }, {\r\n\t    key: \"_onChange\",\r\n\t    value: function _onChange() {\r\n\t      if (this.value !== this.el.value) {\r\n\t        this.updateValue();\r\n\t      }\r\n\r\n\t      this.masked.doCommit();\r\n\t      this.updateControl();\r\n\r\n\t      this._saveSelection();\r\n\t    }\r\n\t    /** Handles view drop event, prevents by default */\r\n\r\n\t  }, {\r\n\t    key: \"_onDrop\",\r\n\t    value: function _onDrop(ev) {\r\n\t      ev.preventDefault();\r\n\t      ev.stopPropagation();\r\n\t    }\r\n\t    /** Restore last selection on focus */\r\n\r\n\t  }, {\r\n\t    key: \"_onFocus\",\r\n\t    value: function _onFocus(ev) {\r\n\t      this.alignCursorFriendly();\r\n\t    }\r\n\t    /** Restore last selection on focus */\r\n\r\n\t  }, {\r\n\t    key: \"_onClick\",\r\n\t    value: function _onClick(ev) {\r\n\t      this.alignCursorFriendly();\r\n\t    }\r\n\t    /** Unbind view events and removes element reference */\r\n\r\n\t  }, {\r\n\t    key: \"destroy\",\r\n\t    value: function destroy() {\r\n\t      this._unbindEvents(); // $FlowFixMe why not do so?\r\n\r\n\r\n\t      this._listeners.length = 0; // $FlowFixMe\r\n\r\n\t      delete this.el;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return InputMask;\r\n\t}();\r\n\tIMask.InputMask = InputMask;\r\n\r\n\t/** Pattern which validates enum values */\r\n\r\n\tvar MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {\r\n\t  _inherits(MaskedEnum, _MaskedPattern);\r\n\r\n\t  var _super = _createSuper(MaskedEnum);\r\n\r\n\t  function MaskedEnum() {\r\n\t    _classCallCheck(this, MaskedEnum);\r\n\r\n\t    return _super.apply(this, arguments);\r\n\t  }\r\n\r\n\t  _createClass(MaskedEnum, [{\r\n\t    key: \"_update\",\r\n\t    value:\r\n\t    /**\r\n\t      @override\r\n\t      @param {Object} opts\r\n\t    */\r\n\t    function _update(opts) {\r\n\t      // TODO type\r\n\t      if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\r\n\r\n\t      _get(_getPrototypeOf(MaskedEnum.prototype), \"_update\", this).call(this, opts);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate() {\r\n\t      var _this = this,\r\n\t          _get2;\r\n\r\n\t      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n\t        args[_key] = arguments[_key];\r\n\t      }\r\n\r\n\t      return this.enum.some(function (e) {\r\n\t        return e.indexOf(_this.unmaskedValue) >= 0;\r\n\t      }) && (_get2 = _get(_getPrototypeOf(MaskedEnum.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedEnum;\r\n\t}(MaskedPattern);\r\n\tIMask.MaskedEnum = MaskedEnum;\r\n\r\n\t/**\r\n\t  Number mask\r\n\t  @param {Object} opts\r\n\t  @param {string} opts.radix - Single char\r\n\t  @param {string} opts.thousandsSeparator - Single char\r\n\t  @param {Array<string>} opts.mapToRadix - Array of single chars\r\n\t  @param {number} opts.min\r\n\t  @param {number} opts.max\r\n\t  @param {number} opts.scale - Digits after point\r\n\t  @param {boolean} opts.signed - Allow negative\r\n\t  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n\t  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n\t*/\r\n\tvar MaskedNumber = /*#__PURE__*/function (_Masked) {\r\n\t  _inherits(MaskedNumber, _Masked);\r\n\r\n\t  var _super = _createSuper(MaskedNumber);\r\n\r\n\t  /** Single char */\r\n\r\n\t  /** Single char */\r\n\r\n\t  /** Array of single chars */\r\n\r\n\t  /** */\r\n\r\n\t  /** */\r\n\r\n\t  /** Digits after point */\r\n\r\n\t  /** */\r\n\r\n\t  /** Flag to remove leading and trailing zeros in the end of editing */\r\n\r\n\t  /** Flag to pad trailing zeros after point in the end of editing */\r\n\t  function MaskedNumber(opts) {\r\n\t    _classCallCheck(this, MaskedNumber);\r\n\r\n\t    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\r\n\t  }\r\n\t  /**\r\n\t    @override\r\n\t  */\r\n\r\n\r\n\t  _createClass(MaskedNumber, [{\r\n\t    key: \"_update\",\r\n\t    value: function _update(opts) {\r\n\t      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\r\n\r\n\t      this._updateRegExps();\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_updateRegExps\",\r\n\t    value: function _updateRegExps() {\r\n\t      // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n\t      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\r\n\t      var midInput = '(0|([1-9]+\\\\d*))?';\r\n\t      var mid = '\\\\d*';\r\n\t      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\r\n\t      this._numberRegExpInput = new RegExp(start + midInput + end);\r\n\t      this._numberRegExp = new RegExp(start + mid + end);\r\n\t      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\r\n\t      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_removeThousandsSeparators\",\r\n\t    value: function _removeThousandsSeparators(value) {\r\n\t      return value.replace(this._thousandsSeparatorRegExp, '');\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_insertThousandsSeparators\",\r\n\t    value: function _insertThousandsSeparators(value) {\r\n\t      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n\t      var parts = value.split(this.radix);\r\n\t      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n\t      return parts.join(this.radix);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doPrepare\",\r\n\t    value: function doPrepare(ch) {\r\n\t      var _get2;\r\n\r\n\t      ch = ch.replace(this._mapToRadixRegExp, this.radix);\r\n\r\n\t      var noSepCh = this._removeThousandsSeparators(ch);\r\n\r\n\t      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n\t        args[_key - 1] = arguments[_key];\r\n\t      }\r\n\r\n\t      var _normalizePrepare = normalizePrepare((_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, noSepCh].concat(args))),\r\n\t          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\r\n\t          prepCh = _normalizePrepare2[0],\r\n\t          details = _normalizePrepare2[1];\r\n\r\n\t      if (ch && !noSepCh) details.skip = true;\r\n\t      return [prepCh, details];\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_separatorsCount\",\r\n\t    value: function _separatorsCount(to) {\r\n\t      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n\t      var count = 0;\r\n\r\n\t      for (var pos = 0; pos < to; ++pos) {\r\n\t        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\r\n\t          ++count;\r\n\t          if (extendOnSeparators) to += this.thousandsSeparator.length;\r\n\t        }\r\n\t      }\r\n\r\n\t      return count;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_separatorsCountFromSlice\",\r\n\t    value: function _separatorsCountFromSlice() {\r\n\t      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\r\n\t      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\t      var flags = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n\t      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\r\n\r\n\t      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\r\n\r\n\t      fromPos = _this$_adjustRangeWit2[0];\r\n\t      toPos = _this$_adjustRangeWit2[1];\r\n\t      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_appendCharRaw\",\r\n\t    value: function _appendCharRaw(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\r\n\t      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\r\n\r\n\t      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\r\n\r\n\t      this._value = this._removeThousandsSeparators(this.value);\r\n\r\n\t      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\r\n\r\n\t      this._value = this._insertThousandsSeparators(this._value);\r\n\t      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\r\n\r\n\t      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\r\n\r\n\t      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\r\n\t      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\r\n\t      return appendDetails;\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_findSeparatorAround\",\r\n\t    value: function _findSeparatorAround(pos) {\r\n\t      if (this.thousandsSeparator) {\r\n\t        var searchFrom = pos - this.thousandsSeparator.length + 1;\r\n\t        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\r\n\t        if (separatorPos <= pos) return separatorPos;\r\n\t      }\r\n\r\n\t      return -1;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_adjustRangeWithSeparators\",\r\n\t    value: function _adjustRangeWithSeparators(from, to) {\r\n\t      var separatorAroundFromPos = this._findSeparatorAround(from);\r\n\r\n\t      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\r\n\r\n\t      var separatorAroundToPos = this._findSeparatorAround(to);\r\n\r\n\t      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\r\n\t      return [from, to];\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n\t      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n\t      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\r\n\r\n\t      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\r\n\r\n\t      fromPos = _this$_adjustRangeWit4[0];\r\n\t      toPos = _this$_adjustRangeWit4[1];\r\n\t      var valueBeforePos = this.value.slice(0, fromPos);\r\n\t      var valueAfterPos = this.value.slice(toPos);\r\n\r\n\t      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\r\n\r\n\t      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\r\n\r\n\t      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\r\n\r\n\t      return new ChangeDetails({\r\n\t        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos(cursorPos, direction) {\r\n\t      if (!this.thousandsSeparator) return cursorPos;\r\n\r\n\t      switch (direction) {\r\n\t        case DIRECTION.NONE:\r\n\t        case DIRECTION.LEFT:\r\n\t        case DIRECTION.FORCE_LEFT:\r\n\t          {\r\n\t            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\r\n\r\n\t            if (separatorAtLeftPos >= 0) {\r\n\t              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\r\n\r\n\t              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\r\n\t                return separatorAtLeftPos;\r\n\t              }\r\n\t            }\r\n\r\n\t            break;\r\n\t          }\r\n\r\n\t        case DIRECTION.RIGHT:\r\n\t        case DIRECTION.FORCE_RIGHT:\r\n\t          {\r\n\t            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\r\n\r\n\t            if (separatorAtRightPos >= 0) {\r\n\t              return separatorAtRightPos + this.thousandsSeparator.length;\r\n\t            }\r\n\t          }\r\n\t      }\r\n\r\n\t      return cursorPos;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate(flags) {\r\n\t      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\r\n\r\n\t      var valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n\t      if (valid) {\r\n\t        // validate as number\r\n\t        var number = this.number;\r\n\t        valid = valid && !isNaN(number) && ( // check min bound for negative values\r\n\t        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\r\n\t        this.max == null || this.max <= 0 || this.number <= this.max);\r\n\t      }\r\n\r\n\t      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {\r\n\t      if (this.value) {\r\n\t        var number = this.number;\r\n\t        var validnum = number; // check bounds\r\n\r\n\t        if (this.min != null) validnum = Math.max(validnum, this.min);\r\n\t        if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\t        if (validnum !== number) this.unmaskedValue = String(validnum);\r\n\t        var formatted = this.value;\r\n\t        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n\t        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\r\n\t        this._value = formatted;\r\n\t      }\r\n\r\n\t      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_normalizeZeros\",\r\n\t    value: function _normalizeZeros(value) {\r\n\t      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\r\n\r\n\r\n\t      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\r\n\t        return sign + num;\r\n\t      }); // add leading zero\r\n\r\n\t      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n\t      if (parts.length > 1) {\r\n\t        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\r\n\r\n\t        if (!parts[1].length) parts.length = 1; // remove fractional\r\n\t      }\r\n\r\n\t      return this._insertThousandsSeparators(parts.join(this.radix));\r\n\t    }\r\n\t    /** */\r\n\r\n\t  }, {\r\n\t    key: \"_padFractionalZeros\",\r\n\t    value: function _padFractionalZeros(value) {\r\n\t      if (!value) return value;\r\n\t      var parts = value.split(this.radix);\r\n\t      if (parts.length < 2) parts.push('');\r\n\t      parts[1] = parts[1].padEnd(this.scale, '0');\r\n\t      return parts.join(this.radix);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\r\n\t    },\r\n\t    set: function set(unmaskedValue) {\r\n\t      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"typedValue\",\r\n\t    get: function get() {\r\n\t      return Number(this.unmaskedValue);\r\n\t    },\r\n\t    set: function set(n) {\r\n\t      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\r\n\t    }\r\n\t    /** Parsed Number */\r\n\r\n\t  }, {\r\n\t    key: \"number\",\r\n\t    get: function get() {\r\n\t      return this.typedValue;\r\n\t    },\r\n\t    set: function set(number) {\r\n\t      this.typedValue = number;\r\n\t    }\r\n\t    /**\r\n\t      Is negative allowed\r\n\t      @readonly\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"allowNegative\",\r\n\t    get: function get() {\r\n\t      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedNumber;\r\n\t}(Masked);\r\n\tMaskedNumber.DEFAULTS = {\r\n\t  radix: ',',\r\n\t  thousandsSeparator: '',\r\n\t  mapToRadix: ['.'],\r\n\t  scale: 2,\r\n\t  signed: false,\r\n\t  normalizeZeros: true,\r\n\t  padFractionalZeros: false\r\n\t};\r\n\tIMask.MaskedNumber = MaskedNumber;\r\n\r\n\t/** Masking by custom Function */\r\n\r\n\tvar MaskedFunction = /*#__PURE__*/function (_Masked) {\r\n\t  _inherits(MaskedFunction, _Masked);\r\n\r\n\t  var _super = _createSuper(MaskedFunction);\r\n\r\n\t  function MaskedFunction() {\r\n\t    _classCallCheck(this, MaskedFunction);\r\n\r\n\t    return _super.apply(this, arguments);\r\n\t  }\r\n\r\n\t  _createClass(MaskedFunction, [{\r\n\t    key: \"_update\",\r\n\t    value:\r\n\t    /**\r\n\t      @override\r\n\t      @param {Object} opts\r\n\t    */\r\n\t    function _update(opts) {\r\n\t      if (opts.mask) opts.validate = opts.mask;\r\n\r\n\t      _get(_getPrototypeOf(MaskedFunction.prototype), \"_update\", this).call(this, opts);\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedFunction;\r\n\t}(Masked);\r\n\tIMask.MaskedFunction = MaskedFunction;\r\n\r\n\tvar _excluded = [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"];\r\n\r\n\t/** Dynamic mask for choosing apropriate mask in run-time */\r\n\tvar MaskedDynamic = /*#__PURE__*/function (_Masked) {\r\n\t  _inherits(MaskedDynamic, _Masked);\r\n\r\n\t  var _super = _createSuper(MaskedDynamic);\r\n\r\n\t  /** Currently chosen mask */\r\n\r\n\t  /** Compliled {@link Masked} options */\r\n\r\n\t  /** Chooses {@link Masked} depending on input value */\r\n\r\n\t  /**\r\n\t    @param {Object} opts\r\n\t  */\r\n\t  function MaskedDynamic(opts) {\r\n\t    var _this;\r\n\r\n\t    _classCallCheck(this, MaskedDynamic);\r\n\r\n\t    _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\r\n\t    _this.currentMask = null;\r\n\t    return _this;\r\n\t  }\r\n\t  /**\r\n\t    @override\r\n\t  */\r\n\r\n\r\n\t  _createClass(MaskedDynamic, [{\r\n\t    key: \"_update\",\r\n\t    value: function _update(opts) {\r\n\t      _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\r\n\r\n\t      if ('mask' in opts) {\r\n\t        // mask could be totally dynamic with only `dispatch` option\r\n\t        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\r\n\t          return createMask(m);\r\n\t        }) : [];\r\n\t      }\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_appendCharRaw\",\r\n\t    value: function _appendCharRaw(ch) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t      var details = this._applyDispatch(ch, flags);\r\n\r\n\t      if (this.currentMask) {\r\n\t        details.aggregate(this.currentMask._appendChar(ch, flags));\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_applyDispatch\",\r\n\t    value: function _applyDispatch() {\r\n\t      var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\r\n\t      var inputValue = this.rawInputValue;\r\n\t      var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\r\n\t      flags._beforeTailState._rawInputValue : inputValue;\r\n\t      var tailValue = inputValue.slice(insertValue.length);\r\n\t      var prevMask = this.currentMask;\r\n\t      var details = new ChangeDetails();\r\n\t      var prevMaskState = prevMask && prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\r\n\r\n\t      this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\r\n\r\n\t      if (this.currentMask) {\r\n\t        if (this.currentMask !== prevMask) {\r\n\t          // if mask changed reapply input\r\n\t          this.currentMask.reset();\r\n\r\n\t          if (insertValue) {\r\n\t            // $FlowFixMe - it's ok, we don't change current mask above\r\n\t            var d = this.currentMask.append(insertValue, {\r\n\t              raw: true\r\n\t            });\r\n\t            details.tailShift = d.inserted.length - prevValueBeforeTail.length;\r\n\t          }\r\n\r\n\t          if (tailValue) {\r\n\t            // $FlowFixMe - it's ok, we don't change current mask above\r\n\t            details.tailShift += this.currentMask.append(tailValue, {\r\n\t              raw: true,\r\n\t              tail: true\r\n\t            }).tailShift;\r\n\t          }\r\n\t        } else {\r\n\t          // Dispatch can do something bad with state, so\r\n\t          // restore prev mask state\r\n\t          this.currentMask.state = prevMaskState;\r\n\t        }\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t  }, {\r\n\t    key: \"_appendPlaceholder\",\r\n\t    value: function _appendPlaceholder() {\r\n\t      var details = this._applyDispatch.apply(this, arguments);\r\n\r\n\t      if (this.currentMask) {\r\n\t        details.aggregate(this.currentMask._appendPlaceholder());\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /**\r\n\t     @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"_appendEager\",\r\n\t    value: function _appendEager() {\r\n\t      var details = this._applyDispatch.apply(this, arguments);\r\n\r\n\t      if (this.currentMask) {\r\n\t        details.aggregate(this.currentMask._appendEager());\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doDispatch\",\r\n\t    value: function doDispatch(appended) {\r\n\t      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\t      return this.dispatch(appended, this, flags);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doValidate\",\r\n\t    value: function doValidate() {\r\n\t      var _get2, _this$currentMask;\r\n\r\n\t      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n\t        args[_key] = arguments[_key];\r\n\t      }\r\n\r\n\t      return (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask = this.currentMask).doValidate.apply(_this$currentMask, args));\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"reset\",\r\n\t    value: function reset() {\r\n\t      var _this$currentMask2;\r\n\r\n\t      (_this$currentMask2 = this.currentMask) === null || _this$currentMask2 === void 0 ? void 0 : _this$currentMask2.reset();\r\n\t      this.compiledMasks.forEach(function (m) {\r\n\t        return m.reset();\r\n\t      });\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"value\",\r\n\t    get: function get() {\r\n\t      return this.currentMask ? this.currentMask.value : '';\r\n\t    },\r\n\t    set: function set(value) {\r\n\t      _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"unmaskedValue\",\r\n\t    get: function get() {\r\n\t      return this.currentMask ? this.currentMask.unmaskedValue : '';\r\n\t    },\r\n\t    set: function set(unmaskedValue) {\r\n\t      _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"typedValue\",\r\n\t    get: function get() {\r\n\t      return this.currentMask ? this.currentMask.typedValue : '';\r\n\t    } // probably typedValue should not be used with dynamic\r\n\t    ,\r\n\t    set: function set(value) {\r\n\t      var unmaskedValue = String(value); // double check it\r\n\r\n\t      if (this.currentMask) {\r\n\t        this.currentMask.typedValue = value;\r\n\t        unmaskedValue = this.currentMask.unmaskedValue;\r\n\t      }\r\n\r\n\t      this.unmaskedValue = unmaskedValue;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isComplete\",\r\n\t    get: function get() {\r\n\t      var _this$currentMask3;\r\n\r\n\t      return Boolean((_this$currentMask3 = this.currentMask) === null || _this$currentMask3 === void 0 ? void 0 : _this$currentMask3.isComplete);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"isFilled\",\r\n\t    get: function get() {\r\n\t      var _this$currentMask4;\r\n\r\n\t      return Boolean((_this$currentMask4 = this.currentMask) === null || _this$currentMask4 === void 0 ? void 0 : _this$currentMask4.isFilled);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"remove\",\r\n\t    value: function remove() {\r\n\t      var details = new ChangeDetails();\r\n\r\n\t      if (this.currentMask) {\r\n\t        var _this$currentMask5;\r\n\r\n\t        details.aggregate((_this$currentMask5 = this.currentMask).remove.apply(_this$currentMask5, arguments)) // update with dispatch\r\n\t        .aggregate(this._applyDispatch());\r\n\t      }\r\n\r\n\t      return details;\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"state\",\r\n\t    get: function get() {\r\n\t      return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\r\n\t        _rawInputValue: this.rawInputValue,\r\n\t        compiledMasks: this.compiledMasks.map(function (m) {\r\n\t          return m.state;\r\n\t        }),\r\n\t        currentMaskRef: this.currentMask,\r\n\t        currentMask: this.currentMask && this.currentMask.state\r\n\t      });\r\n\t    },\r\n\t    set: function set(state) {\r\n\t      var compiledMasks = state.compiledMasks,\r\n\t          currentMaskRef = state.currentMaskRef,\r\n\t          currentMask = state.currentMask,\r\n\t          maskedState = _objectWithoutProperties(state, _excluded);\r\n\r\n\t      this.compiledMasks.forEach(function (m, mi) {\r\n\t        return m.state = compiledMasks[mi];\r\n\t      });\r\n\r\n\t      if (currentMaskRef != null) {\r\n\t        this.currentMask = currentMaskRef;\r\n\t        this.currentMask.state = currentMask;\r\n\t      }\r\n\r\n\t      _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"extractInput\",\r\n\t    value: function extractInput() {\r\n\t      var _this$currentMask6;\r\n\r\n\t      return this.currentMask ? (_this$currentMask6 = this.currentMask).extractInput.apply(_this$currentMask6, arguments) : '';\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"extractTail\",\r\n\t    value: function extractTail() {\r\n\t      var _this$currentMask7, _get3;\r\n\r\n\t      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n\t        args[_key2] = arguments[_key2];\r\n\t      }\r\n\r\n\t      return this.currentMask ? (_this$currentMask7 = this.currentMask).extractTail.apply(_this$currentMask7, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get3, [this].concat(args));\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"doCommit\",\r\n\t    value: function doCommit() {\r\n\t      if (this.currentMask) this.currentMask.doCommit();\r\n\r\n\t      _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"nearestInputPos\",\r\n\t    value: function nearestInputPos() {\r\n\t      var _this$currentMask8, _get4;\r\n\r\n\t      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n\t        args[_key3] = arguments[_key3];\r\n\t      }\r\n\r\n\t      return this.currentMask ? (_this$currentMask8 = this.currentMask).nearestInputPos.apply(_this$currentMask8, args) : (_get4 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get4, [this].concat(args));\r\n\t    }\r\n\t  }, {\r\n\t    key: \"overwrite\",\r\n\t    get: function get() {\r\n\t      return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), \"overwrite\", this);\r\n\t    },\r\n\t    set: function set(overwrite) {\r\n\t      console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\r\n\t    }\r\n\t  }, {\r\n\t    key: \"eager\",\r\n\t    get: function get() {\r\n\t      return this.currentMask ? this.currentMask.eager : _get(_getPrototypeOf(MaskedDynamic.prototype), \"eager\", this);\r\n\t    },\r\n\t    set: function set(eager) {\r\n\t      console.warn('\"eager\" option is not available in dynamic mask, use this option in siblings');\r\n\t    }\r\n\t    /**\r\n\t      @override\r\n\t    */\r\n\r\n\t  }, {\r\n\t    key: \"maskEquals\",\r\n\t    value: function maskEquals(mask) {\r\n\t      return Array.isArray(mask) && this.compiledMasks.every(function (m, mi) {\r\n\t        var _mask$mi;\r\n\r\n\t        return m.maskEquals((_mask$mi = mask[mi]) === null || _mask$mi === void 0 ? void 0 : _mask$mi.mask);\r\n\t      });\r\n\t    }\r\n\t  }]);\r\n\r\n\t  return MaskedDynamic;\r\n\t}(Masked);\r\n\tMaskedDynamic.DEFAULTS = {\r\n\t  dispatch: function dispatch(appended, masked, flags) {\r\n\t    if (!masked.compiledMasks.length) return;\r\n\t    var inputValue = masked.rawInputValue; // simulate input\r\n\r\n\t    var inputs = masked.compiledMasks.map(function (m, index) {\r\n\t      m.reset();\r\n\t      m.append(inputValue, {\r\n\t        raw: true\r\n\t      });\r\n\t      m.append(appended, flags);\r\n\t      var weight = m.rawInputValue.length;\r\n\t      return {\r\n\t        weight: weight,\r\n\t        index: index\r\n\t      };\r\n\t    }); // pop masks with longer values first\r\n\r\n\t    inputs.sort(function (i1, i2) {\r\n\t      return i2.weight - i1.weight;\r\n\t    });\r\n\t    return masked.compiledMasks[inputs[0].index];\r\n\t  }\r\n\t};\r\n\tIMask.MaskedDynamic = MaskedDynamic;\r\n\r\n\t/** Mask pipe source and destination types */\r\n\r\n\tvar PIPE_TYPE = {\r\n\t  MASKED: 'value',\r\n\t  UNMASKED: 'unmaskedValue',\r\n\t  TYPED: 'typedValue'\r\n\t};\r\n\t/** Creates new pipe function depending on mask type, source and destination options */\r\n\r\n\tfunction createPipe(mask) {\r\n\t  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\r\n\t  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\r\n\t  var masked = createMask(mask);\r\n\t  return function (value) {\r\n\t    return masked.runIsolated(function (m) {\r\n\t      m[from] = value;\r\n\t      return m[to];\r\n\t    });\r\n\t  };\r\n\t}\r\n\t/** Pipes value through mask depending on mask type, source and destination options */\r\n\r\n\tfunction pipe(value) {\r\n\t  for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n\t    pipeArgs[_key - 1] = arguments[_key];\r\n\t  }\r\n\r\n\t  return createPipe.apply(void 0, pipeArgs)(value);\r\n\t}\r\n\tIMask.PIPE_TYPE = PIPE_TYPE;\r\n\tIMask.createPipe = createPipe;\r\n\tIMask.pipe = pipe;\r\n\r\n\ttry {\r\n\t  globalThis.IMask = IMask;\r\n\t} catch (e) {}\r\n\r\n\texports.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\r\n\texports.HTMLMaskElement = HTMLMaskElement;\r\n\texports.InputMask = InputMask;\r\n\texports.MaskElement = MaskElement;\r\n\texports.Masked = Masked;\r\n\texports.MaskedDate = MaskedDate;\r\n\texports.MaskedDynamic = MaskedDynamic;\r\n\texports.MaskedEnum = MaskedEnum;\r\n\texports.MaskedFunction = MaskedFunction;\r\n\texports.MaskedNumber = MaskedNumber;\r\n\texports.MaskedPattern = MaskedPattern;\r\n\texports.MaskedRange = MaskedRange;\r\n\texports.MaskedRegExp = MaskedRegExp;\r\n\texports.PIPE_TYPE = PIPE_TYPE;\r\n\texports.createMask = createMask;\r\n\texports.createPipe = createPipe;\r\n\texports[\"default\"] = IMask;\r\n\texports.pipe = pipe;\r\n\r\n\tObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\n\n//# sourceURL=webpack://rks/./src/js/imask.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/imask.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;